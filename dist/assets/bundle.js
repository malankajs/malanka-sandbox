/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, callbacks = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId])
/******/ 				callbacks.push.apply(callbacks, installedChunks[chunkId]);
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			modules[moduleId] = moreModules[moduleId];
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules);
/******/ 		while(callbacks.length)
/******/ 			callbacks.shift().call(null, __webpack_require__);
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// "0" means "already loaded"
/******/ 	// Array means "loading", array contains callbacks
/******/ 	var installedChunks = {
/******/ 		0:0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId, callback) {
/******/ 		// "0" is the signal for "already loaded"
/******/ 		if(installedChunks[chunkId] === 0)
/******/ 			return callback.call(null, __webpack_require__);
/******/
/******/ 		// an array means "currently loading".
/******/ 		if(installedChunks[chunkId] !== undefined) {
/******/ 			installedChunks[chunkId].push(callback);
/******/ 		} else {
/******/ 			// start chunk loading
/******/ 			installedChunks[chunkId] = [callback];
/******/ 			var head = document.getElementsByTagName('head')[0];
/******/ 			var script = document.createElement('script');
/******/ 			script.type = 'text/javascript';
/******/ 			script.charset = 'utf-8';
/******/ 			script.async = true;
/******/
/******/ 			script.src = __webpack_require__.p + "" + chunkId + ".bundle.js";
/******/ 			head.appendChild(script);
/******/ 		}
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "dist/assets/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(1);


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var _di = __webpack_require__(2);
	
	var _DomRenderer = __webpack_require__(4);
	
	var _FetchRequest = __webpack_require__(87);
	
	var _di2 = __webpack_require__(91);
	
	_di2.diConfig.resolvers.push((0, _di.staticResolver)({ FetchRequest: _FetchRequest.FetchRequest }));
	_di2.diConfig.dependencies.request = 'FetchRequest';
	
	var di = (0, _di.createContainer)(_di2.diConfig);
	
	di.put('renderer', new _DomRenderer.DomRenderer());
	
	(0, _di.then)(di({ 'env': 'env', page: 'home' }, { di: di }), function (_ref) {
	    var env = _ref.env;
	    var page = _ref.page;
	
	    var element = env.render(page);
	    document.body.appendChild(element);
	});

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(process) {(function (global, factory) {
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== 'undefined') {
	        factory(exports);
	    } else {
	        var mod = {
	            exports: {}
	        };
	        factory(mod.exports);
	        global.di = mod.exports;
	    }
	})(this, function (exports) {
	    /**
	     * @typedef {{bundleName: string, factory: string, Module: (function|{factory: function}), instance: object, dependencies: object, update: string}} DiDefinition
	     */
	
	    /**
	     * @typedef {{session: function, put: function}} DiContainer
	     */
	
	    'use strict';
	
	    Object.defineProperty(exports, '__esModule', {
	        value: true
	    });
	    var DEFAULT_FACTORY = 'factory';
	    var DEFAULT_UPDATE = 'updateDependencies';
	
	    var INSTANCE_ID = typeof Symbol === 'function' ? Symbol('DI.js instance id') : '___di.js';
	
	    /**
	     * Return object keys
	     */
	    var keys = Object.keys;
	
	    /**
	     * Simple version of object map
	     *
	     * @param object
	     * @param callback
	     * @returns {Array}
	     */
	    var map = function map(object, callback) {
	        var objectKeys = keys(object),
	            arr = new Array(objectKeys.length);
	
	        for (var index = 0; index < objectKeys.length; index++) {
	            arr[index] = callback(object[objectKeys[index]], objectKeys[index]);
	        }
	
	        return arr;
	    };
	
	    /**
	     * Simple version of object forEach
	     *
	     * @param object
	     * @param callback
	     * @returns {Array}
	     */
	    var forEach = function forEach(object, callback) {
	        var objKeys = keys(object);
	
	        for (var index = 0; index < objKeys.length; index++) {
	            callback(object[objKeys[index]], objKeys[index]);
	        }
	    };
	
	    /**
	     * Simple version of object filter
	     *
	     * @param object
	     * @param callback
	     * @returns {Array}
	     */
	    var filter = function filter(object, callback) {
	        var objKeys = keys(object),
	            result = [];
	
	        for (var index = 0; index < objKeys.length; index++) {
	            var key = objKeys[index];
	
	            if (callback(object[key], key)) {
	                result.push(object[key]);
	            }
	        }
	
	        return result;
	    };
	
	    /**
	     * @param {{}} object
	     * @param {function} callback
	     *
	     * @returns {*}
	     */
	    var find = function find(object, callback) {
	        var objKeys = keys(object);
	
	        for (var index = 0; index < objKeys.length; index++) {
	            var value = object[objKeys[index]];
	
	            if (callback(value)) {
	                return value;
	            }
	        }
	    };
	
	    /**
	     * Omit values from object by callback
	     *
	     * @param {{}} object
	     * @param {function} callback
	     *
	     * @returns {{}}
	     */
	    var omitBy = function omitBy(object, callback) {
	        var result = {};
	
	        forEach(object, function (value, key) {
	            if (!callback(value, key)) {
	                result[key] = value;
	            }
	        });
	
	        return result;
	    };
	
	    /**
	     * Omit values from object by key
	     *
	     * @param {{}} object
	     * @param {string} key
	     *
	     * @returns {{}}
	     */
	    var omit = function omit(object, key) {
	        return omitBy(object, function (_, _key) {
	            return _key === key;
	        });
	    };
	
	    /**
	     * @param {{}} object
	     *
	     * @returns {string[]}
	     */
	    var functions = function functions(object) {
	        return keys(object).filter(function (key) {
	            return isFunction(object[key]);
	        });
	    };
	
	    /**
	     * @param {function} func
	     *
	     * @returns {boolean}
	     */
	    var isFunction = function isFunction(func) {
	        return isObject(func) && Object.prototype.toString.call(func) === '[object Function]';
	    };
	
	    /**
	     * Extend variables
	     *
	     * @param {{}} object
	     * @param {{}[]} args
	     *
	     * @returns {{}}
	     */
	    var extend = Object.assign ? Object.assign : function (object) {
	        for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {
	            args[_key2 - 1] = arguments[_key2];
	        }
	
	        for (var i = 0; i < args.length; i++) {
	            var obj = args[i];
	
	            if (obj != null) {
	                var objKeys = keys(obj);
	
	                for (var j = 0; j < objKeys.length; j++) {
	                    var key = objKeys[j];
	
	                    object[key] = obj[key];
	                }
	            }
	        }
	
	        return object;
	    };
	
	    /**
	     * @param {{}} object
	     * @param {{}[]} args
	     *
	     * @returns {{}}
	     */
	    var defaults = function defaults(object) {
	        for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {
	            args[_key3 - 1] = arguments[_key3];
	        }
	
	        for (var i = 0; i < args.length; i++) {
	            var obj = args[i];
	
	            if (obj != null) {
	                var objKeys = keys(obj);
	
	                for (var j = 0; j < objKeys.length; j++) {
	                    var key = objKeys[j];
	
	                    if (object[key] === undefined) {
	                        object[key] = obj[key];
	                    }
	                }
	            }
	        }
	
	        return object;
	    };
	
	    /**
	     * @type {number}
	     */
	    var uniqueIndex = 0;
	
	    /**
	     * @returns {string}
	     */
	    var uniqueId = function uniqueId() {
	        return 'di' + uniqueIndex++;
	    };
	
	    /**
	     * @param {{}} object
	     *
	     * @returns {{}}
	     */
	    var clone = function clone(object) {
	        return extend({}, object);
	    };
	
	    /**
	     * @type {function(arr: *): boolean}
	     */
	    var isArray = Array.isArray ? Array.isArray : function (arr) {
	        return arr instanceof Array;
	    };
	
	    /**
	     * @param {{}} obj
	     *
	     * @returns {boolean}
	     */
	    var isObject = function isObject(obj) {
	        var type = typeof obj;
	        return !!obj && (type == 'object' || type == 'function');
	    };
	
	    /**
	     * @param {Promise|*} promise
	     * @param {function} success
	     * @param {function} [error]
	     *
	     * @returns {Promise|*}
	     */
	    var then = function then(promise, success, error) {
	        if (promise && promise.then) {
	            return promise.then(success, error);
	        } else {
	            try {
	                return success(promise);
	            } catch (err) {
	                if (error) {
	                    return error(err);
	                } else {
	                    return Promise.reject(err);
	                }
	            }
	        }
	    };
	
	    /**
	     * @param {(Promise|*)[]} values
	     * @param {function} callback
	     * @param {function} [error]
	     *
	     * @returns {Promise|*}
	     */
	    var all = function all(values, callback, error) {
	        var some = values.some(function (promise) {
	            return Boolean(promise && promise.then);
	        });
	
	        if (some) {
	            return Promise.all(values).then(callback, error);
	        } else {
	            try {
	                return callback(values);
	            } catch (err) {
	                if (error) {
	                    return error(err);
	                } else {
	                    return Promise.reject(err);
	                }
	            }
	        }
	    };
	
	    /**
	     * @param {Promise|*} promise
	     * @param {function} callback
	     *
	     * @returns {Promise|*}
	     */
	    var qCatch = function qCatch(promise, callback) {
	        if (promise && promise['catch']) {
	            promise['catch'](callback);
	        }
	
	        return promise;
	    };
	
	    /**
	     * Usage:
	     *
	     * ```
	     *  resolvers: [
	     *      webpackResolver([
	     *          require.context('./states/', true, /State.js$/),
	     *          require.context('./models/', true, /.js$/)
	     *      ])
	     *  ]
	     * ```
	     *
	     * @param {function[]|{keys: function}[]} requires
	     * @returns {Function}
	     */
	    var webpackResolver = function webpackResolver(requires) {
	        var bundles = {};
	
	        /**
	         * @param {function|{keys: function}} require
	         * @returns {Function}
	         */
	        var createLoader = function createLoader(require) {
	            require.keys().forEach(function (path) {
	                var name = path.match(/\/([^\/]+)$/)[1];
	
	                // If we already has declared bundle, use it for loading
	                // do not override
	                if (!bundles[name]) {
	                    bundles[name] = function () {
	                        return require(path);
	                    };
	                }
	            });
	        };
	
	        requires.forEach(createLoader);
	
	        /**
	         * @params {string} name
	         *
	         * @returns {Promise<object>|object}
	         */
	        return function (name) {
	            if (!name.match(/\.js$/)) {
	                name += '.js';
	            }
	
	            var require = bundles[name],
	                bundleLoader = undefined;
	
	            if (require) {
	                bundleLoader = require();
	
	                if (typeof bundleLoader === 'function' && !bundleLoader.name) {
	                    if (bundleLoader.length === 1) {
	                        return new Promise(function (resolve) {
	                            bundleLoader(resolve);
	                        });
	                    } else if (bundleLoader.length === 0) {
	                        return bundleLoader();
	                    }
	                }
	
	                return bundleLoader;
	            }
	        };
	    };
	
	    /**
	     * Usage:
	     *
	     * ```
	     *  resolvers: [
	     *      staticResolver({
	     *          config: _ => {...},
	     *          globalBus: _ => new Backbone.Wreqr.EventEmitter()
	     *      })
	     *  ]
	     * ```
	     *
	     * @param {object} hash
	     * @returns {Function}
	     */
	    var staticResolver = function staticResolver(hash) {
	        return function (name) {
	            return hash[name];
	        };
	    };
	
	    /**
	     * Usage:
	     *
	     * ```
	     *  resolvers: [
	     *      arrayResolver([
	     *          staticResolver(...),
	     *          webpackResolver(...),
	     *          ....
	     *      ])
	     *  ]
	     * ```
	     *
	     * @param {function(name: string)[]} resolvers
	     * @returns {Function}
	     */
	    var arrayResolver = function arrayResolver(resolvers) {
	        var bundleCache = {};
	
	        return function (name) {
	            var queue = resolvers.slice();
	
	            if (bundleCache[name]) {
	                return bundleCache[name];
	            }
	
	            var nextLoader = function nextLoader() {
	                if (!queue.length) {
	                    return;
	                }
	
	                var loader = queue.shift();
	
	                return then(loader(name), function (result) {
	                    if (result) {
	                        return bundleCache[name] = result;
	                    } else {
	                        return nextLoader();
	                    }
	                });
	            };
	
	            return bundleCache[name] = nextLoader();
	        };
	    };
	
	    /**
	     * @param {string} definition
	     * @returns {{name: string, factory: string|undefined}}
	     */
	    var parseStringDefinition = function parseStringDefinition(definition) {
	        var matches = definition ? definition.match(/^!?([^.#]+)(\.([^#]+))?(#(.+))?$/) : null;
	
	        if (!matches) {
	            throw new Error('Unknown module format: ' + JSON.stringify(definition));
	        }
	
	        if (definition[0] === '!') {
	            return {
	                reuse: definition.slice(1)
	            };
	        } else {
	            return {
	                parentId: definition,
	                bundleName: matches[1],
	                factory: matches[3],
	                update: matches[5]
	            };
	        }
	    };
	
	    /**
	     * @param {string} dependencyId
	     * @param {{}} config
	     *
	     * @returns {DiDefinition}
	     */
	    var normalizeDefinitionView = function normalizeDefinitionView(dependencyId, config) {
	        var definition = {
	            id: dependencyId
	        };
	
	        if (typeof config === 'string') {
	            extend(definition, parseStringDefinition(config));
	        } else if (isArray(config)) {
	            if (typeof config[0] === 'object') {
	                extend(definition, config[0]);
	            } else {
	                extend(definition, parseStringDefinition(config[0]), { dependencies: config[1] });
	            }
	        } else if (isObject(config)) {
	            extend(definition, parseStringDefinition(dependencyId), { dependencies: config });
	        } else if (typeof dependencyId === 'string' && !config) {
	            extend(definition, parseStringDefinition(dependencyId));
	        } else {
	            throw new Error('Unknown type of dependency definition');
	        }
	
	        return definition;
	    };
	
	    /**
	     * @param {DiDefinition} definition
	     *
	     * @returns {DiDefinition}
	     */
	    var normalizeDefinitionWithDefaults = function normalizeDefinitionWithDefaults(definition) {
	        if (definition.reuse) {
	            return defaults(definition, { dependencies: {} });
	        }
	
	        return defaults(definition, {
	            factory: DEFAULT_FACTORY,
	            update: DEFAULT_UPDATE,
	            dependencies: {}
	        });
	    };
	
	    /**
	     * @param {string} dependencyId
	     * @param {{}} config
	     *
	     * @returns {DiDefinition}
	     */
	    var normalizeDefinition = function normalizeDefinition(dependencyId, config) {
	        return normalizeDefinitionWithDefaults(normalizeDefinitionView(dependencyId, config));
	    };
	
	    /**
	     * @param {{}} dependencies
	     * @returns {{}}
	     */
	    var normalizeDefinitions = function normalizeDefinitions(dependencies) {
	        var definitions = {};
	
	        /**
	         * @param {DiDefinition} definition
	         */
	        var normalizeDefinitionDependencies = function normalizeDefinitionDependencies(definition) {
	            forEach(definition.dependencies, function (dependency, name) {
	                if (typeof dependency === 'object' && !isArray(dependency)) {
	                    dependency = [name, dependency];
	                }
	
	                if (typeof dependency === 'string' && !dependencies[dependency]) {
	                    var stringDefinition = parseStringDefinition(dependency);
	
	                    // If we use bundleName as dependency, and bundle is not defined in global definitions, we need to create it
	                    // elsewhere create dynamic definition
	                    if (stringDefinition.bundleName === dependency) {
	                        dependencies[dependency] = process(dependency).id;
	                    } else {
	                        dependency = [dependency, {}];
	                    }
	                }
	
	                if (isArray(dependency)) {
	                    var depId = definition.id + '/' + name;
	                    dependencies[depId] = dependency;
	
	                    var depDefinition = process(depId);
	
	                    definitions[depDefinition.id] = depDefinition;
	                    definition.dependencies[name] = depDefinition.id;
	
	                    normalizeDefinitionDependencies(depDefinition);
	                }
	            });
	        };
	
	        var process = function process(dependencyId) {
	            if (definitions[dependencyId]) {
	                return definitions[dependencyId];
	            }
	
	            var definition = normalizeDefinitionView(dependencyId, dependencies[dependencyId]);
	
	            if (definition.reuse) {
	                var reuse = process(definition.reuse);
	
	                definition = extend(Object.create(reuse), definition);
	                definition.parentId = definition.id;
	                definition.dependencies = extend({}, reuse.dependencies, definition.dependencies);
	            }
	
	            if (definition.id !== definition.parentId) {
	                var parentId = undefined;
	
	                if (dependencies[definition.parentId]) {
	                    parentId = definition.parentId;
	                } else {
	                    parentId = definition.bundleName;
	                }
	
	                if (parentId === dependencyId) {
	                    definition.parentId = definition.bundleName;
	                    definition = normalizeDefinitionWithDefaults(definition);
	                } else {
	                    var _parent = process(parentId);
	
	                    definition = defaults(definition, _parent);
	                    definition.parentId = parentId;
	                    definition.bundleName = _parent.bundleName;
	
	                    if (definition.dependencies !== _parent.dependencies) {
	                        definition.dependencies = extend({}, _parent.dependencies, definition.dependencies);
	                        definition.dependencies = omitBy(definition.dependencies, function (value) {
	                            return value == null;
	                        });
	                    }
	                }
	            } else {
	                definition = normalizeDefinitionWithDefaults(definition);
	            }
	
	            normalizeDefinitionDependencies(definition);
	
	            return definitions[dependencyId] = definition;
	        };
	
	        keys(dependencies).forEach(process);
	
	        return definitions;
	    };
	
	    /**
	     * Extract module from ES6 definition
	     *
	     * @param {{__esModule: boolean}|function} Module
	     * @returns {*}
	     */
	    var extractModule = function extractModule(Module) {
	        if (Module.__esModule === true) {
	            if (Module['default']) {
	                return Module['default'];
	            }
	            return find(Module, function (value) {
	                return isFunction(value) || isObject(value);
	            });
	        }
	
	        return Module;
	    };
	
	    /**
	     * @returns {function}
	     */
	    var createMethodFactory = function createMethodFactory() {
	        return function (_ref, dependencies) {
	            var Module = _ref.Module;
	            var factory = _ref.factory;
	            var id = _ref.id;
	
	            if (Module[factory]) {
	                return then(Module[factory](dependencies), function (instance) {
	                    if (!instance) {
	                        throw new Error('Factory "' + id + '.' + factory + '" return instance of ' + typeof instance + ' type');
	                    }
	
	                    return instance;
	                });
	            }
	
	            if (factory && factory !== DEFAULT_FACTORY) {
	                throw new Error('Module "' + id + '" has no factory with name "' + factory + '"');
	            }
	        };
	    };
	
	    /**
	     * @returns {function}
	     */
	    var createInstanceFactory = function createInstanceFactory() {
	        return function (_ref2, dependencies) {
	            var Module = _ref2.Module;
	            var id = _ref2.id;
	
	            var moduleType = typeof Module;
	
	            if (moduleType !== 'function') {
	                throw new Error('Module "' + id + '" cannot be constructed, because has ' + moduleType + ' type');
	            }
	
	            return new Module(dependencies);
	        };
	    };
	
	    /**
	     * @param {[]} factories Array of factories
	     * @returns {Function}
	     */
	    var createArrayFactory = function createArrayFactory(factories) {
	        return function (definition, dependencies) {
	            var factoriesQueue = factories.slice();
	
	            var nextFactory = function nextFactory() {
	                var factory = factoriesQueue.shift();
	
	                return then(factory(definition, dependencies), function (instance) {
	                    if (instance) {
	                        return instance;
	                    } else {
	                        if (factoriesQueue.length) {
	                            return nextFactory();
	                        }
	                    }
	                });
	            };
	
	            return nextFactory();
	        };
	    };
	
	    /**
	     * @param {function[]} resolvers
	     * @param {object} dependencies
	     *
	     * @param {function} [factory]
	     * @param {function} [resolve]
	     * @param {function[]} [factories]
	     * @param {object} [definitions]
	     *
	     * @returns {function}
	     */
	    var createContainer = function createContainer() {
	        var _ref3 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var _ref3$resolvers = _ref3.resolvers;
	        var resolvers = _ref3$resolvers === undefined ? [] : _ref3$resolvers;
	        var _ref3$dependencies = _ref3.dependencies;
	        var dependencies = _ref3$dependencies === undefined ? {} : _ref3$dependencies;
	        var _ref3$factories = _ref3.factories;
	        var factories = _ref3$factories === undefined ? [createMethodFactory(), createInstanceFactory()] : _ref3$factories;
	        var _ref3$definitions = _ref3.definitions;
	        var definitions = _ref3$definitions === undefined ? normalizeDefinitions(dependencies) : _ref3$definitions;
	        var _ref3$resolve = _ref3.resolve;
	        var resolve = _ref3$resolve === undefined ? arrayResolver(resolvers) : _ref3$resolve;
	        var _ref3$factory = _ref3.factory;
	        var factory = _ref3$factory === undefined ? createArrayFactory(factories) : _ref3$factory;
	
	        var destroyQueue = [];
	
	        /**
	         * @param {DiDefinition} definition
	         *
	         * @returns {Promise<object>|object}
	         */
	        var loadModuleBundle = function loadModuleBundle(definition) {
	            if (definition.Module) {
	                return definition.Module;
	            }
	
	            return then(resolve(definition.bundleName), function (Module) {
	                if (!Module) {
	                    throw new Error('Cannot find bundle with name "' + definition.bundleName + '"');
	                }
	
	                definition.Module = extractModule(Module);
	
	                return Module;
	            });
	        };
	
	        /**
	         * @param {DiDefinition|string} module
	         * @returns {DiDefinition}
	         */
	        var normalizeModule = function normalizeModule(module) {
	            if (typeof module === 'string') {
	                if (definitions[module]) {
	                    return definitions[module];
	                }
	
	                return definitions[module] = normalizeDefinition(module, {});
	            }
	
	            throw new Error('Unknown module: ' + JSON.stringify(module));
	        };
	
	        /**
	         * @param {DiDefinition} definition
	         * @param {string} diSessionId
	         * @returns {boolean}
	         */
	        var isModuleNeedUpdate = function isModuleNeedUpdate(definition, diSessionId) {
	            return !diSessionId || definition.diSessionId !== diSessionId;
	        };
	
	        /**
	         * @param {string|DiDefinition} moduleName
	         * @param {{}} params
	         *
	         * @returns {Promise<object>}
	         */
	        var loadModule = function loadModule(moduleName, params) {
	            var definition = normalizeModule(moduleName);
	
	            var load = function load() {
	                var promises = [loadModuleDependencies(definition, params), definition.instance ? null : loadModuleBundle(definition)];
	
	                return all(promises, function (_ref4) {
	                    var dependencies = _ref4[0];
	
	                    dependencies.definition = definition;
	
	                    var _factory = function _factory() {
	                        if (definition.instance) {
	                            return definition.instance;
	                        } else {
	                            return factory(definition, dependencies);
	                        }
	                    };
	
	                    // If instance has updateDependencies invoke it before complete DI resolve
	                    return then(_factory(), function (instance) {
	                        if (!instance) {
	                            throw new Error('Factory of "' + definition.id + '" return instance of ' + typeof instance + ' type');
	                        }
	
	                        instance[INSTANCE_ID] = definition.id;
	
	                        var isNeedUpdate = isModuleNeedUpdate(definition, params.diSessionId);
	                        definition.diSessionId = params.diSessionId;
	
	                        if (isFunction(instance[definition.update])) {
	                            if (isNeedUpdate) {
	                                // If updateDependencies return instance with same type use it instead of instance
	                                return then(instance[definition.update](dependencies), function (updateResult) {
	                                    if (updateResult && instance !== updateResult && updateResult instanceof instance.constructor) {
	                                        destroyQueue.push(instance);
	
	                                        return updateResult;
	                                    }
	
	                                    return instance;
	                                });
	                            }
	                        } else if (definition.update && definition.update !== DEFAULT_UPDATE) {
	                            throw new Error('Module "' + definition.id + '" has no instance method with name "' + definition.update + '"');
	                        }
	
	                        return instance;
	                    });
	                });
	            };
	
	            if (definition._progress) {
	                return definition._progress;
	            }
	
	            if (definition.hasOwnProperty('instance') && definition.instance && !isModuleNeedUpdate(definition, params.diSessionId)) {
	                return definition.instance;
	            }
	
	            definition._progress = then(load(), function (instance) {
	                definition.instance = instance;
	
	                if (definition.reuse) {
	                    var reuse = normalizeModule(definition.reuse);
	                    reuse.instance = instance;
	                    reuse.diSessionId = params.diSessionId;
	                }
	
	                return instance;
	            });
	
	            return then(definition._progress, function (instance) {
	                definition._progress = null;
	
	                return instance;
	            }, function (error) {
	                definition._progress = null;
	
	                throw error;
	            });
	        };
	
	        /**
	         * @param {{}} dependencies
	         * @param params
	         *
	         * @returns {Promise<object>|object}
	         */
	        var loadModules = function loadModules(dependencies, params) {
	            var loaded = extend({}, params);
	
	            if (dependencies) {
	                var promises = map(dependencies, function (dependencyName, key) {
	                    return then(loadModule(dependencyName, params), function (dependency) {
	                        return loaded[key] = dependency;
	                    });
	                });
	
	                return all(promises, function (_) {
	                    return loaded;
	                });
	            }
	
	            return loaded;
	        };
	
	        /**
	         * @param {string|DiDefinition} definition
	         * @param {{}} params
	         *
	         * @returns {Promise<object>|object}
	         */
	        var loadModuleDependencies = function loadModuleDependencies(definition, params) {
	            return loadModules(definition.dependencies, params);
	        };
	
	        /**
	         * @param {DiDefinition} definition
	         * @param {{trigger: boolean, destroy: boolean}} options
	         */
	        var destroyInstance = function destroyInstance(definition, options) {
	            var instance = definition.instance;
	
	            if (!instance) {
	                return;
	            }
	
	            if (!definition.reuse) {
	                destroyObject(instance, options);
	                definition.instance = null;
	            } else {
	                delete definition.instance;
	            }
	        };
	
	        /**
	         * @param {*} instance
	         * @param {boolean} trigger
	         * @param {boolean} destroy
	         */
	        var destroyObject = function destroyObject(instance) {
	            var _ref5 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	            var _ref5$trigger = _ref5.trigger;
	            var trigger = _ref5$trigger === undefined ? true : _ref5$trigger;
	            var _ref5$destroy = _ref5.destroy;
	            var destroy = _ref5$destroy === undefined ? true : _ref5$destroy;
	
	            try {
	                if (instance[INSTANCE_ID]) {
	                    if (trigger && isFunction(instance.trigger)) {
	                        instance.trigger('di:destroy');
	                    }
	
	                    if (destroy && isFunction(instance.destroy)) {
	                        instance.destroy();
	                    }
	
	                    instance[INSTANCE_ID] = undefined;
	                }
	            } catch (err) {
	                console.error(err);
	            }
	        };
	
	        /**
	         * @param {string|object} module
	         * @param {{}} [params]
	         *
	         * @returns {Promise<object>|object}
	         */
	        var di = function di(module) {
	            var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	            var promise = undefined;
	
	            if (typeof module === 'string') {
	                promise = loadModule(module, params);
	            } else {
	                promise = loadModules(module, params);
	            }
	
	            return promise;
	        };
	
	        /**
	         * Create session of DI loading. When session close - all unknown dependencies will be truncated
	         *
	         * @param {{}} [defaults]
	         *
	         * @returns {{load: Function, close: Function}}
	         */
	        di.session = function () {
	            var defaults = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	            var id = uniqueId();
	
	            defaults.diSessionId = id;
	
	            /**
	             * Work like original DI function
	             *
	             * @see di
	             *
	             * @param {string|object} module
	             * @param {{}} [params]
	             *
	             * @returns {Promise<object>|object}
	             */
	            var diSession = function diSession(module) {
	                var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	                extend(params, defaults);
	
	                return di(module, params);
	            };
	
	            diSession.load = diSession;
	
	            /**
	             * Run GC to destroy unknown dependencies
	             *
	             * @param {{trigger: boolean, destroy: boolean}} options
	             */
	            diSession.close = function (options) {
	                forEach(definitions, function (definition) {
	                    var instance = definition.instance;
	
	                    if (!definition.isPersistent && definition.diSessionId && definition.diSessionId !== id && instance) {
	                        destroyInstance(definition, options);
	                    }
	                });
	
	                while (destroyQueue.length) {
	                    var instance = destroyQueue.shift(),
	                        definition = di.getInstanceDefinition(instance);
	
	                    if (!definition || instance !== definition.instance) {
	                        destroyObject(instance, options);
	                    }
	                }
	            };
	
	            functions(di).forEach(function (name) {
	                diSession[name] = di[name];
	            });
	
	            return diSession;
	        };
	
	        /**
	         * @param {string} inputDefinition
	         * @param {*} instance
	         * @param {object} options
	         *
	         * @returns {DiContainer}
	         */
	        di.put = function (inputDefinition, instance, options) {
	            var definition = normalizeModule(inputDefinition);
	            extend(definition, { instance: instance, isPersistent: true }, options);
	
	            instance[INSTANCE_ID] = definition.id;
	
	            return undefined;
	        };
	
	        /**
	         * @returns {Promise<object>}
	         */
	        di.serialize = function () {
	            for (var _len3 = arguments.length, args = Array(_len3), _key4 = 0; _key4 < _len3; _key4++) {
	                args[_key4] = arguments[_key4];
	            }
	
	            var serialized = {};
	
	            var serializable = filter(definitions, function (_ref6) {
	                var instance = _ref6.instance;
	
	                return instance && isFunction(instance.serialize);
	            });
	
	            var serializedPromises = serializable.map(function (_ref7) {
	                var id = _ref7.id;
	                var instance = _ref7.instance;
	
	                return then(instance.serialize.apply(instance, args), function (json) {
	                    return serialized[id] = json;
	                });
	            });
	
	            return all(serializedPromises, function () {
	                return serialized;
	            });
	        };
	
	        /**
	         * @param {object} data
	         * @param {*} args
	         */
	        di.restore = function (data) {
	            for (var _len4 = arguments.length, args = Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {
	                args[_key5 - 1] = arguments[_key5];
	            }
	
	            var results = map(data, function (moduleData, id) {
	                return di.restoreModule.apply(di, [id, moduleData].concat(args));
	            });
	
	            return all(results, function (data) {
	                return data;
	            });
	        };
	
	        /**
	         * @param {string} id
	         * @param {*} args
	         *
	         * @returns {Promise}
	         */
	        di.restoreModule = function (id) {
	            for (var _len5 = arguments.length, args = Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {
	                args[_key6 - 1] = arguments[_key6];
	            }
	
	            var definition = normalizeModule(id);
	
	            return then(loadModuleBundle(definition), function (Module) {
	                var _Module;
	
	                Module = extractModule(Module);
	
	                if (!Module.restore) {
	                    throw new Error('Cannot restore module');
	                }
	
	                return then((_Module = Module).restore.apply(_Module, args), function (instance) {
	                    return definition.instance = instance;
	                });
	            });
	        };
	
	        /**
	         * @returns {{}}
	         */
	        di.getDefinitions = function () {
	            return definitions;
	        };
	
	        /**
	         * @param {string} id
	         * @returns {DiDefinition}
	         */
	        di.getDefinition = function (id) {
	            return normalizeModule(id);
	        };
	
	        /**
	         * @param {object} instance
	         * @returns {DiDefinition}
	         */
	        di.getInstanceDefinition = function (instance) {
	            if (instance) {
	                var instanceId = instance[INSTANCE_ID];
	
	                if (instanceId) {
	                    return definitions[instanceId];
	                } else {
	                    var defKeys = keys(definitions);
	
	                    for (var index = 0; index < defKeys.length; index++) {
	                        var key = defKeys[index];
	
	                        if (definitions[key].instance === instance) {
	                            return definitions[key];
	                        }
	                    }
	                }
	            }
	        };
	
	        /**
	         * Destroy all definitions and clean up container
	         *
	         * @param {{trigger: boolean, destroy: boolean}} options
	         */
	        di.destroy = function (options) {
	            forEach(definitions, function (definition) {
	                return destroyInstance(definition, options);
	            });
	        };
	
	        /**
	         * Clone container with definitions and resolvers
	         *
	         * @property {boolean} cloneInstances
	         *
	         * @returns {function}
	         */
	        di.clone = function () {
	            var _ref8 = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	            var _ref8$cloneInstances = _ref8.cloneInstances;
	            var cloneInstances = _ref8$cloneInstances === undefined ? false : _ref8$cloneInstances;
	
	            var newDefinitions = {};
	
	            forEach(definitions, function (definition, id) {
	                var newDefinition = cloneInstances ? clone(definition) : omit(definition, 'instance');
	                newDefinition.dependencies = clone(newDefinition.dependencies);
	
	                newDefinitions[id] = newDefinition;
	            });
	
	            return createContainer({
	                resolve: resolve,
	                definitions: newDefinitions,
	                factory: factory
	            });
	        };
	
	        return di;
	    };
	
	    exports.createContainer = createContainer;
	    exports.webpackResolver = webpackResolver;
	    exports.staticResolver = staticResolver;
	    exports.arrayResolver = arrayResolver;
	    exports.createMethodFactory = createMethodFactory;
	    exports.createInstanceFactory = createInstanceFactory;
	    exports.createArrayFactory = createArrayFactory;
	    exports.then = then;
	    exports.all = all;
	    exports.qCatch = qCatch;
	    exports.parseStringDefinition = parseStringDefinition;
	    exports.normalizeDefinitions = normalizeDefinitions;
	    exports.normalizeDefinition = normalizeDefinition;
	    exports.extractModule = extractModule;
	});
	
	//# sourceMappingURL=data:application/json;base64,
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3)))

/***/ },
/* 3 */
/***/ function(module, exports) {

	'use strict';
	
	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	(function () {
	    try {
	        cachedSetTimeout = setTimeout;
	    } catch (e) {
	        cachedSetTimeout = function cachedSetTimeout() {
	            throw new Error('setTimeout is not defined');
	        };
	    }
	    try {
	        cachedClearTimeout = clearTimeout;
	    } catch (e) {
	        cachedClearTimeout = function cachedClearTimeout() {
	            throw new Error('clearTimeout is not defined');
	        };
	    }
	})();
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e) {
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e) {
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while (len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () {
	    return '/';
	};
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function () {
	    return 0;
	};

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.DomRenderer = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Renderer2 = __webpack_require__(83);
	
	var _ValueProxy = __webpack_require__(84);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DomRenderer = exports.DomRenderer = function (_Renderer) {
	    (0, _inherits3.default)(DomRenderer, _Renderer);
	
	    function DomRenderer() {
	        (0, _classCallCheck3.default)(this, DomRenderer);
	        return (0, _possibleConstructorReturn3.default)(this, _Renderer.apply(this, arguments));
	    }
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {string} tagName
	     *
	     * @returns {Element}
	     */
	    DomRenderer.prototype.createElement = function createElement(tagName) {
	        return document.createElement(tagName);
	    };
	
	    /**
	     * @returns {Comment}
	     */
	
	
	    DomRenderer.prototype.createComment = function createComment() {
	        return document.createComment('');
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @params {string} content
	     *
	     * @returns {Element}
	     */
	
	
	    DomRenderer.prototype.createTextNode = function createTextNode(content) {
	        return document.createTextNode(String(content));
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {Element} node
	     * @param {string} name
	     * @param {string} value
	     */
	
	
	    DomRenderer.prototype.setAttribute = function setAttribute(node, name, value) {
	        if (name === 'value') {
	            node.value = String(value);
	        }
	
	        if (value instanceof _ValueProxy.ValueProxy) {
	            value = value.getValue();
	        }
	
	        if (value == null) {
	            node.removeAttribute(name);
	        } else {
	            node.setAttribute(name, String(value));
	        }
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {Element} node
	     * @param {string} content
	     */
	
	
	    DomRenderer.prototype.setContent = function setContent(node, content) {
	        node.textContent = String(content);
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {Element} node
	     * @param {Element} child
	     */
	
	
	    DomRenderer.prototype.append = function append(node, child) {
	        node.appendChild(child);
	    };
	
	    /**
	     * @param {Element} node
	     * @param {Element} child
	     * @param {number} index
	     */
	
	
	    DomRenderer.prototype.appendAt = function appendAt(node, child, index) {
	        var before = node.childNodes[index];
	
	        if (before) {
	            node.insertBefore(child, before);
	        } else {
	            this.append(node, child);
	        }
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {Element} node
	     * @param {Element} child
	     */
	
	
	    DomRenderer.prototype.removeChild = function removeChild(node, child) {
	        if (child.parentNode) {
	            child.parentNode.removeChild(child);
	        }
	    };
	
	    /**
	     * @param {Element} node
	     */
	
	
	    DomRenderer.prototype.clear = function clear(node) {
	        this.setContent(node, '');
	    };
	
	    /**
	     * @param {Element} oldNode
	     * @param {Element} newNode
	     */
	
	
	    DomRenderer.prototype.replaceWith = function replaceWith(oldNode, newNode) {
	        if (!oldNode || !newNode || oldNode === newNode) {
	            return;
	        }
	
	        var parent = oldNode.parentNode;
	
	        if (parent) {
	            parent.insertBefore(newNode, oldNode);
	            parent.removeChild(oldNode);
	        }
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {Element} element
	     * @param {string} name
	     * @param {function} value
	     * @param {{}} [options]
	     */
	
	
	    DomRenderer.prototype.addEventListener = function addEventListener(element, name, value, options) {
	        element.addEventListener(name, value, options);
	    };
	
	    return DomRenderer;
	}(_Renderer2.Renderer);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SZW5kZXJlci9Eb21SZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0lBRWEsVyxXQUFBLFc7Ozs7Ozs7O0FBRVQ7QUFDQTs7Ozs7MEJBS0EsYSwwQkFBYyxPLEVBQVM7QUFDbkIsZUFBTyxTQUFTLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7OzBCQUdBLGEsNEJBQWdCO0FBQ1osZUFBTyxTQUFTLGFBQVQsQ0FBdUIsRUFBdkIsQ0FBUDtBQUNILEs7O0FBRUQ7QUFDQTs7Ozs7OzswQkFLQSxjLDJCQUFlLE8sRUFBUztBQUNwQixlQUFPLFNBQVMsY0FBVCxDQUF3QixPQUFPLE9BQVAsQ0FBeEIsQ0FBUDtBQUNILEs7O0FBRUQ7QUFDQTs7Ozs7OzswQkFLQSxZLHlCQUFhLEksRUFBTSxJLEVBQU0sSyxFQUFPO0FBQzVCLFlBQUksU0FBUyxPQUFiLEVBQXNCO0FBQ2xCLGlCQUFLLEtBQUwsR0FBYSxPQUFPLEtBQVAsQ0FBYjtBQUNIOztBQUVELFlBQUksdUNBQUosRUFBaUM7QUFDN0Isb0JBQVEsTUFBTSxRQUFOLEVBQVI7QUFDSDs7QUFFRCxZQUFJLFNBQVMsSUFBYixFQUFtQjtBQUNmLGlCQUFLLGVBQUwsQ0FBcUIsSUFBckI7QUFDSCxTQUZELE1BRU87QUFDSCxpQkFBSyxZQUFMLENBQWtCLElBQWxCLEVBQXdCLE9BQU8sS0FBUCxDQUF4QjtBQUNIO0FBQ0osSzs7QUFFRDtBQUNBOzs7Ozs7MEJBSUEsVSx1QkFBVyxJLEVBQU0sTyxFQUFTO0FBQ3RCLGFBQUssV0FBTCxHQUFtQixPQUFPLE9BQVAsQ0FBbkI7QUFDSCxLOztBQUVEO0FBQ0E7Ozs7OzswQkFJQSxNLG1CQUFPLEksRUFBTSxLLEVBQU87QUFDaEIsYUFBSyxXQUFMLENBQWlCLEtBQWpCO0FBQ0gsSzs7QUFFRDs7Ozs7OzswQkFLQSxRLHFCQUFTLEksRUFBTSxLLEVBQU8sSyxFQUFPO0FBQ3pCLFlBQUksU0FBUyxLQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsQ0FBYjs7QUFFQSxZQUFJLE1BQUosRUFBWTtBQUNSLGlCQUFLLFlBQUwsQ0FBa0IsS0FBbEIsRUFBeUIsTUFBekI7QUFDSCxTQUZELE1BRU87QUFDSCxpQkFBSyxNQUFMLENBQVksSUFBWixFQUFrQixLQUFsQjtBQUNIO0FBQ0osSzs7QUFFRDtBQUNBOzs7Ozs7MEJBSUEsVyx3QkFBWSxJLEVBQU0sSyxFQUFPO0FBQ3JCLFlBQUksTUFBTSxVQUFWLEVBQXNCO0FBQ2xCLGtCQUFNLFVBQU4sQ0FBaUIsV0FBakIsQ0FBNkIsS0FBN0I7QUFDSDtBQUNKLEs7O0FBRUQ7Ozs7OzBCQUdBLEssa0JBQU0sSSxFQUFNO0FBQ1IsYUFBSyxVQUFMLENBQWdCLElBQWhCLEVBQXNCLEVBQXRCO0FBQ0gsSzs7QUFFRDs7Ozs7OzBCQUlBLFcsd0JBQVksTyxFQUFTLE8sRUFBUztBQUMxQixZQUFJLENBQUMsT0FBRCxJQUFZLENBQUMsT0FBYixJQUF3QixZQUFZLE9BQXhDLEVBQWlEO0FBQzdDO0FBQ0g7O0FBRUQsWUFBSSxTQUFTLFFBQVEsVUFBckI7O0FBRUEsWUFBSSxNQUFKLEVBQVk7QUFDUixtQkFBTyxZQUFQLENBQW9CLE9BQXBCLEVBQTZCLE9BQTdCO0FBQ0EsbUJBQU8sV0FBUCxDQUFtQixPQUFuQjtBQUNIO0FBQ0osSzs7QUFFRDtBQUNBOzs7Ozs7OzswQkFNQSxnQiw2QkFBaUIsTyxFQUFTLEksRUFBTSxLLEVBQU8sTyxFQUFTO0FBQzVDLGdCQUFRLGdCQUFSLENBQXlCLElBQXpCLEVBQStCLEtBQS9CLEVBQXNDLE9BQXRDO0FBQ0gsSyIsImZpbGUiOiJEb21SZW5kZXJlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UmVuZGVyZXJ9IGZyb20gJy4vUmVuZGVyZXInO1xuaW1wb3J0IHtWYWx1ZVByb3h5fSBmcm9tICcuLi9EYXRhL1ZhbHVlUHJveHknO1xuXG5leHBvcnQgY2xhc3MgRG9tUmVuZGVyZXIgZXh0ZW5kcyBSZW5kZXJlciB7XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHRhZ05hbWVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtFbGVtZW50fVxuICAgICAqL1xuICAgIGNyZWF0ZUVsZW1lbnQodGFnTmFtZSkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Q29tbWVudH1cbiAgICAgKi9cbiAgICBjcmVhdGVDb21tZW50KCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlQ29tbWVudCgnJyk7XG4gICAgfVxuXG4gICAgLy9ub2luc3BlY3Rpb24gSlNNZXRob2RDYW5CZVN0YXRpY1xuICAgIC8qKlxuICAgICAqIEBwYXJhbXMge3N0cmluZ30gY29udGVudFxuICAgICAqXG4gICAgICogQHJldHVybnMge0VsZW1lbnR9XG4gICAgICovXG4gICAgY3JlYXRlVGV4dE5vZGUoY29udGVudCkge1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoU3RyaW5nKGNvbnRlbnQpKTtcbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdmFsdWVcbiAgICAgKi9cbiAgICBzZXRBdHRyaWJ1dGUobm9kZSwgbmFtZSwgdmFsdWUpIHtcbiAgICAgICAgaWYgKG5hbWUgPT09ICd2YWx1ZScpIHtcbiAgICAgICAgICAgIG5vZGUudmFsdWUgPSBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVmFsdWVQcm94eSkge1xuICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZS5nZXRWYWx1ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbm9kZS5zZXRBdHRyaWJ1dGUobmFtZSwgU3RyaW5nKHZhbHVlKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICAgKi9cbiAgICBzZXRDb250ZW50KG5vZGUsIGNvbnRlbnQpIHtcbiAgICAgICAgbm9kZS50ZXh0Q29udGVudCA9IFN0cmluZyhjb250ZW50KTtcbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBub2RlXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBjaGlsZFxuICAgICAqL1xuICAgIGFwcGVuZChub2RlLCBjaGlsZCkge1xuICAgICAgICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IGNoaWxkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gICAgICovXG4gICAgYXBwZW5kQXQobm9kZSwgY2hpbGQsIGluZGV4KSB7XG4gICAgICAgIGxldCBiZWZvcmUgPSBub2RlLmNoaWxkTm9kZXNbaW5kZXhdO1xuXG4gICAgICAgIGlmIChiZWZvcmUpIHtcbiAgICAgICAgICAgIG5vZGUuaW5zZXJ0QmVmb3JlKGNoaWxkLCBiZWZvcmUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hcHBlbmQobm9kZSwgY2hpbGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy9ub2luc3BlY3Rpb24gSlNNZXRob2RDYW5CZVN0YXRpY1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gbm9kZVxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gY2hpbGRcbiAgICAgKi9cbiAgICByZW1vdmVDaGlsZChub2RlLCBjaGlsZCkge1xuICAgICAgICBpZiAoY2hpbGQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgY2hpbGQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IG5vZGVcbiAgICAgKi9cbiAgICBjbGVhcihub2RlKSB7XG4gICAgICAgIHRoaXMuc2V0Q29udGVudChub2RlLCAnJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBvbGROb2RlXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBuZXdOb2RlXG4gICAgICovXG4gICAgcmVwbGFjZVdpdGgob2xkTm9kZSwgbmV3Tm9kZSkge1xuICAgICAgICBpZiAoIW9sZE5vZGUgfHwgIW5ld05vZGUgfHwgb2xkTm9kZSA9PT0gbmV3Tm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHBhcmVudCA9IG9sZE5vZGUucGFyZW50Tm9kZTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUobmV3Tm9kZSwgb2xkTm9kZSk7XG4gICAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQob2xkTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSB2YWx1ZVxuICAgICAqIEBwYXJhbSB7e319IFtvcHRpb25zXVxuICAgICAqL1xuICAgIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudCwgbmFtZSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKG5hbWUsIHZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 5 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(7);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(8);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(59);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(9), __esModule: true };

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(10);
	__webpack_require__(54);
	module.exports = __webpack_require__(58).f('iterator');

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $at = __webpack_require__(11)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(14)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0; // next index
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t,
	      index = this._i,
	      point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(12),
	    defined = __webpack_require__(13);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that)),
	        i = toInteger(pos),
	        l = s.length,
	        a,
	        b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 12 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.1.4 ToInteger
	var ceil = Math.ceil,
	    floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var LIBRARY = __webpack_require__(15),
	    $export = __webpack_require__(16),
	    redefine = __webpack_require__(31),
	    hide = __webpack_require__(21),
	    has = __webpack_require__(32),
	    Iterators = __webpack_require__(33),
	    $iterCreate = __webpack_require__(34),
	    setToStringTag = __webpack_require__(50),
	    getPrototypeOf = __webpack_require__(52),
	    ITERATOR = __webpack_require__(51)('iterator'),
	    BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	,
	    FF_ITERATOR = '@@iterator',
	    KEYS = 'keys',
	    VALUES = 'values';
	
	var returnThis = function returnThis() {
	  return this;
	};
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function getMethod(kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator',
	      DEF_VALUES = DEFAULT == VALUES,
	      VALUES_BUG = false,
	      proto = Base.prototype,
	      $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
	      $default = $native || getMethod(DEFAULT),
	      $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
	      $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
	      methods,
	      key,
	      IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 15 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = true;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(17),
	    core = __webpack_require__(18),
	    ctx = __webpack_require__(19),
	    hide = __webpack_require__(21),
	    PROTOTYPE = 'prototype';
	
	var $export = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F,
	      IS_GLOBAL = type & $export.G,
	      IS_STATIC = type & $export.S,
	      IS_PROTO = type & $export.P,
	      IS_BIND = type & $export.B,
	      IS_WRAP = type & $export.W,
	      exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
	      expProto = exports[PROTOTYPE],
	      target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
	      key,
	      own,
	      out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? function (C) {
	      var F = function F(a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0:
	              return new C();
	            case 1:
	              return new C(a);
	            case 2:
	              return new C(a, b);
	          }return new C(a, b, c);
	        }return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	      // make static versions for prototype methods
	    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1; // forced
	$export.G = 2; // global
	$export.S = 4; // static
	$export.P = 8; // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	$export.U = 64; // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 17 */
/***/ function(module, exports) {

	'use strict';
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ },
/* 18 */
/***/ function(module, exports) {

	'use strict';
	
	var core = module.exports = { version: '2.4.0' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// optional / simple context binding
	var aFunction = __webpack_require__(20);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () /* ...args */{
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 20 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(22),
	    createDesc = __webpack_require__(30);
	module.exports = __webpack_require__(26) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var anObject = __webpack_require__(23),
	    IE8_DOM_DEFINE = __webpack_require__(25),
	    toPrimitive = __webpack_require__(29),
	    dP = Object.defineProperty;
	
	exports.f = __webpack_require__(26) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(24);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 24 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = !__webpack_require__(26) && !__webpack_require__(27)(function () {
	  return Object.defineProperty(__webpack_require__(28)('div'), 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(27)(function () {
	  return Object.defineProperty({}, 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 27 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(24),
	    document = __webpack_require__(17).document
	// in old IE typeof document.createElement is 'object'
	,
	    is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(24);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 30 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(21);

/***/ },
/* 32 */
/***/ function(module, exports) {

	"use strict";
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 33 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var create = __webpack_require__(35),
	    descriptor = __webpack_require__(30),
	    setToStringTag = __webpack_require__(50),
	    IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(21)(IteratorPrototype, __webpack_require__(51)('iterator'), function () {
	  return this;
	});
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(23),
	    dPs = __webpack_require__(36),
	    enumBugKeys = __webpack_require__(48),
	    IE_PROTO = __webpack_require__(45)('IE_PROTO'),
	    Empty = function Empty() {/* empty */},
	    PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var _createDict = function createDict() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(28)('iframe'),
	      i = enumBugKeys.length,
	      lt = '<',
	      gt = '>',
	      iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(49).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) {
	    delete _createDict[PROTOTYPE][enumBugKeys[i]];
	  }return _createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = _createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(22),
	    anObject = __webpack_require__(23),
	    getKeys = __webpack_require__(37);
	
	module.exports = __webpack_require__(26) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties),
	      length = keys.length,
	      i = 0,
	      P;
	  while (length > i) {
	    dP.f(O, P = keys[i++], Properties[P]);
	  }return O;
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(38),
	    enumBugKeys = __webpack_require__(48);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var has = __webpack_require__(32),
	    toIObject = __webpack_require__(39),
	    arrayIndexOf = __webpack_require__(42)(false),
	    IE_PROTO = __webpack_require__(45)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object),
	      i = 0,
	      result = [],
	      key;
	  for (key in O) {
	    if (key != IE_PROTO) has(O, key) && result.push(key);
	  } // Don't enum bug & hidden keys
	  while (names.length > i) {
	    if (has(O, key = names[i++])) {
	      ~arrayIndexOf(result, key) || result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(40),
	    defined = __webpack_require__(13);
	module.exports = function (it) {
	  return IObject(defined(it));
	};

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(41);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 41 */
/***/ function(module, exports) {

	"use strict";
	
	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(39),
	    toLength = __webpack_require__(43),
	    toIndex = __webpack_require__(44);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this),
	        length = toLength(O.length),
	        index = toIndex(fromIndex, length),
	        value;
	    // Array#includes uses SameValueZero equality algorithm
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      if (value != value) return true;
	      // Array#toIndex ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if (IS_INCLUDES || index in O) {
	        if (O[index] === el) return IS_INCLUDES || index || 0;
	      }
	    }return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(12),
	    min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(12),
	    max = Math.max,
	    min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shared = __webpack_require__(46)('keys'),
	    uid = __webpack_require__(47);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(17),
	    SHARED = '__core-js_shared__',
	    store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 47 */
/***/ function(module, exports) {

	'use strict';
	
	var id = 0,
	    px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 48 */
/***/ function(module, exports) {

	'use strict';
	
	// IE 8- don't enum bug keys
	module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(17).document && document.documentElement;

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var def = __webpack_require__(22).f,
	    has = __webpack_require__(32),
	    TAG = __webpack_require__(51)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var store = __webpack_require__(46)('wks'),
	    uid = __webpack_require__(47),
	    Symbol = __webpack_require__(17).Symbol,
	    USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(32),
	    toObject = __webpack_require__(53),
	    IE_PROTO = __webpack_require__(45)('IE_PROTO'),
	    ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(13);
	module.exports = function (it) {
	  return Object(defined(it));
	};

/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(55);
	var global = __webpack_require__(17),
	    hide = __webpack_require__(21),
	    Iterators = __webpack_require__(33),
	    TO_STRING_TAG = __webpack_require__(51)('toStringTag');
	
	for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
	  var NAME = collections[i],
	      Collection = global[NAME],
	      proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var addToUnscopables = __webpack_require__(56),
	    step = __webpack_require__(57),
	    Iterators = __webpack_require__(33),
	    toIObject = __webpack_require__(39);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(14)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0; // next index
	  this._k = kind; // kind
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t,
	      kind = this._k,
	      index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 56 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function () {/* empty */};

/***/ },
/* 57 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.f = __webpack_require__(51);

/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(60), __esModule: true };

/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(61);
	__webpack_require__(72);
	__webpack_require__(73);
	__webpack_require__(74);
	module.exports = __webpack_require__(18).Symbol;

/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	
	var global = __webpack_require__(17),
	    has = __webpack_require__(32),
	    DESCRIPTORS = __webpack_require__(26),
	    $export = __webpack_require__(16),
	    redefine = __webpack_require__(31),
	    META = __webpack_require__(62).KEY,
	    $fails = __webpack_require__(27),
	    shared = __webpack_require__(46),
	    setToStringTag = __webpack_require__(50),
	    uid = __webpack_require__(47),
	    wks = __webpack_require__(51),
	    wksExt = __webpack_require__(58),
	    wksDefine = __webpack_require__(63),
	    keyOf = __webpack_require__(64),
	    enumKeys = __webpack_require__(65),
	    isArray = __webpack_require__(68),
	    anObject = __webpack_require__(23),
	    toIObject = __webpack_require__(39),
	    toPrimitive = __webpack_require__(29),
	    createDesc = __webpack_require__(30),
	    _create = __webpack_require__(35),
	    gOPNExt = __webpack_require__(69),
	    $GOPD = __webpack_require__(71),
	    $DP = __webpack_require__(22),
	    $keys = __webpack_require__(37),
	    gOPD = $GOPD.f,
	    dP = $DP.f,
	    gOPN = gOPNExt.f,
	    $Symbol = global.Symbol,
	    $JSON = global.JSON,
	    _stringify = $JSON && $JSON.stringify,
	    PROTOTYPE = 'prototype',
	    HIDDEN = wks('_hidden'),
	    TO_PRIMITIVE = wks('toPrimitive'),
	    isEnum = {}.propertyIsEnumerable,
	    SymbolRegistry = shared('symbol-registry'),
	    AllSymbols = shared('symbols'),
	    OPSymbols = shared('op-symbols'),
	    ObjectProto = Object[PROTOTYPE],
	    USE_NATIVE = typeof $Symbol == 'function',
	    QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function get() {
	      return dP(this, 'a', { value: 7 }).a;
	    }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function wrap(tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    }return setSymbolDesc(it, key, D);
	  }return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P)),
	      i = 0,
	      l = keys.length,
	      key;
	  while (l > i) {
	    $defineProperty(it, key = keys[i++], P[key]);
	  }return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  }return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto,
	      names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  }return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function $set(value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(70).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(67).f = $propertyIsEnumerable;
	  __webpack_require__(66).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(15)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var symbols =
	// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) {
	  wks(symbols[i++]);
	}for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) {
	  wksDefine(symbols[i++]);
	}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function _for(key) {
	    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key) {
	    if (isSymbol(key)) return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function useSetter() {
	    setter = true;
	  },
	  useSimple: function useSimple() {
	    setter = false;
	  }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it],
	        i = 1,
	        replacer,
	        $replacer;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(21)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var META = __webpack_require__(47)('meta'),
	    isObject = __webpack_require__(24),
	    has = __webpack_require__(32),
	    setDesc = __webpack_require__(22).f,
	    id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(27)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function setMeta(it) {
	  setDesc(it, META, { value: {
	      i: 'O' + ++id, // object ID
	      w: {} // weak collections IDs
	    } });
	};
	var fastKey = function fastKey(it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	    // return object ID
	  }return it[META].i;
	};
	var getWeak = function getWeak(it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	    // return hash weak collections IDs
	  }return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function onFreeze(it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(17),
	    core = __webpack_require__(18),
	    LIBRARY = __webpack_require__(15),
	    wksExt = __webpack_require__(58),
	    defineProperty = __webpack_require__(22).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getKeys = __webpack_require__(37),
	    toIObject = __webpack_require__(39);
	module.exports = function (object, el) {
	  var O = toIObject(object),
	      keys = getKeys(O),
	      length = keys.length,
	      index = 0,
	      key;
	  while (length > index) {
	    if (O[key = keys[index++]] === el) return key;
	  }
	};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(37),
	    gOPS = __webpack_require__(66),
	    pIE = __webpack_require__(67);
	module.exports = function (it) {
	  var result = getKeys(it),
	      getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it),
	        isEnum = pIE.f,
	        i = 0,
	        key;
	    while (symbols.length > i) {
	      if (isEnum.call(it, key = symbols[i++])) result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 66 */
/***/ function(module, exports) {

	"use strict";
	
	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 67 */
/***/ function(module, exports) {

	"use strict";
	
	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(41);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};

/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(39),
	    gOPN = __webpack_require__(70).f,
	    toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function getWindowNames(it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(38),
	    hiddenKeys = __webpack_require__(48).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var pIE = __webpack_require__(67),
	    createDesc = __webpack_require__(30),
	    toIObject = __webpack_require__(39),
	    toPrimitive = __webpack_require__(29),
	    has = __webpack_require__(32),
	    IE8_DOM_DEFINE = __webpack_require__(25),
	    gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(26) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

	"use strict";

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(63)('asyncIterator');

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(63)('observable');

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(76);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(80);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(7);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(77), __esModule: true };

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(78);
	module.exports = __webpack_require__(18).Object.setPrototypeOf;

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(16);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(79).set });

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(24),
	    anObject = __webpack_require__(23);
	var check = function check(O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	  function (test, buggy, set) {
	    try {
	      set = __webpack_require__(19)(Function.call, __webpack_require__(71).f(Object.prototype, '__proto__').set, 2);
	      set(test, []);
	      buggy = !(test instanceof Array);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(81), __esModule: true };

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(82);
	var $Object = __webpack_require__(18).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(16);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(35) });

/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.Renderer = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Renderer = exports.Renderer = function Renderer() {
	  (0, _classCallCheck3.default)(this, Renderer);
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SZW5kZXJlci9SZW5kZXJlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFhLFEsV0FBQSxRIiwiZmlsZSI6IlJlbmRlcmVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIFJlbmRlcmVyIHtcblxufSJdfQ==

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ValueProxy = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Events2 = __webpack_require__(85);
	
	var _Planner = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ValueProxy = exports.ValueProxy = function (_Events) {
	    (0, _inherits3.default)(ValueProxy, _Events);
	
	    /**
	     * @param {function} set
	     * @param {function} get
	     * @param {function} subscribe
	     * @param {function} unsubscribe
	     * @param {ValueProxy[]} parents
	     * @param {number} generation
	     */
	    function ValueProxy() {
	        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var set = _ref.set;
	        var get = _ref.get;
	        var subscribe = _ref.subscribe;
	        var unsubscribe = _ref.unsubscribe;
	        var parents = _ref.parents;
	        var _ref$generation = _ref.generation;
	        var generation = _ref$generation === undefined ? 0 : _ref$generation;
	        (0, _classCallCheck3.default)(this, ValueProxy);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _Events.call(this));
	
	        _this.parents = parents || [];
	        _this.setValue = set;
	        _this.subscribe = subscribe;
	        _this.unsubscribe = unsubscribe;
	        _this.isActive = false;
	        _this._generation = generation || 0;
	
	        if (get) {
	            _this.getValue = get;
	        }
	        return _this;
	    }
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.on = function on(callback) {
	        _Events.prototype.on.call(this, callback);
	
	        if (!this.isActive) {
	            if (this.subscribe) {
	                this.subscribe();
	            }
	
	            this.isActive = true;
	        }
	
	        return this;
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.off = function off(callback) {
	        _Events.prototype.off.call(this, callback);
	
	        if (!this._listeners.length) {
	            if (this.unsubscribe) {
	                this.unsubscribe();
	            }
	
	            this.isActive = false;
	
	            this.stopListening();
	        }
	
	        return this;
	    };
	
	    /**
	     * @param {*} value
	     * @param {boolean} noCache
	     */
	
	
	    ValueProxy.prototype.emitValue = function emitValue(value) {
	        var _ref2 = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	        var _ref2$noCache = _ref2.noCache;
	        var noCache = _ref2$noCache === undefined ? false : _ref2$noCache;
	
	        if (value !== this.value || noCache) {
	            this.value = value;
	            this.emit(value);
	        }
	    };
	
	    /**
	     * @returns {*}
	     */
	
	
	    ValueProxy.prototype.getValue = function getValue() {
	        return this.value;
	    };
	
	    /**
	     * @param {function} mutate
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.pipe = function pipe(mutate) {
	        return ValueProxy.pipe(this, mutate);
	    };
	
	    /**
	     * @param {ValueProxy} args
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.and = function and() {
	        for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	            args[_key] = arguments[_key];
	        }
	
	        return ValueProxy.all([this].concat(args));
	    };
	
	    /**
	     * @param {string} key
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.proxy = function proxy(key) {
	        return this.pipe(function (value) {
	            return value && value[key];
	        });
	    };
	
	    /**
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.then = function then() {
	        return ValueProxy.then(this);
	    };
	
	    //noinspection ReservedWordAsName
	    /**
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.catch = function _catch() {
	        return ValueProxy.catch(this);
	    };
	
	    /**
	     * @param {function(*, function(*))} producer
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.async = function async(producer, options) {
	        var proxy = this;
	
	        return new ValueProxy({
	            generation: this._generation + 1,
	            getValue: function getValue() {
	                var _this2 = this;
	
	                if (!this.isActive) {
	                    producer(proxy.getValue(), function (value) {
	                        _this2.emitValue(value, options);
	                    });
	                }
	
	                return this.value;
	            },
	            subscribe: function subscribe() {
	                var _this3 = this;
	
	                this.listenTo(proxy, function (value) {
	                    producer(value, function (value) {
	                        _this3.emitValue(value, options);
	                    });
	                });
	
	                this.getValue();
	            }
	        });
	    };
	
	    /**
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.prototype.atom = function atom(options) {
	        var planner = _Planner.Planner.getInstance().atom();
	
	        return this.async(function (value, callback) {
	            planner.commit(function () {
	                return callback(value);
	            });
	        }, options);
	    };
	
	    /**
	     * @returns {ValueProxy[]}
	     */
	
	
	    ValueProxy.prototype.getNestedParents = function getNestedParents() {
	        var parents = this.parents.slice();
	
	        parents.forEach(function (parent) {
	            return parents.concat(parent.getNestedParents());
	        });
	
	        return parents;
	    };
	
	    /**
	     * @returns {Promise[]}
	     */
	
	
	    ValueProxy.prototype.getNestedPromises = function getNestedPromises() {
	        return this.getNestedParents().map(function (parent) {
	            return parent._promise;
	        }).filter(Boolean);
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    ValueProxy.prototype.toString = function toString() {
	        return String(this.getValue());
	    };
	
	    /**
	     * @returns {number}
	     */
	
	
	    ValueProxy.prototype.toNumber = function toNumber() {
	        return Number(this.getValue());
	    };
	
	    /**
	     * @param {*} obj
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.fromValue = function fromValue(obj) {
	        if (obj instanceof ValueProxy) {
	            return obj;
	        }
	
	        return new ValueProxy({
	            generation: 0,
	            get: function get() {
	                return this.value = obj;
	            }
	        });
	    };
	
	    /**
	     * @param {Model} obj
	     * @param {string} key
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.fromModel = function fromModel(obj, key) {
	        return new ValueProxy({
	            generation: obj._generation,
	            get: function get() {
	                return this.value = obj.get(key);
	            },
	            set: function set(value) {
	                obj.set(key, value);
	            },
	            subscribe: function subscribe() {
	                var _this4 = this;
	
	                var change = obj.channel('change:' + key);
	
	                this.listenTo(change, function (value) {
	                    return _this4.emitValue(value);
	                });
	
	                this.getValue();
	            }
	        });
	    };
	
	    /**
	     * @param proxy
	     * @param mutate
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.pipe = function pipe(proxy, mutate) {
	        var valueProxy = new ValueProxy({
	            generation: proxy._generation + 1,
	            parents: [proxy],
	            get: function get() {
	                if (!this.isActive) {
	                    this.value = mutate(proxy.getValue());
	                }
	
	                return this.value;
	            },
	            set: function set(value) {
	                return proxy.setValue(value);
	            },
	            subscribe: function subscribe() {
	                var _this5 = this;
	
	                //noinspection JSUnusedAssignment
	                valueProxy.listenTo(proxy, function (args) {
	                    _this5.emitValue(mutate(args));
	                });
	
	                this.getValue();
	            }
	        });
	
	        return valueProxy;
	    };
	
	    /**
	     * @param {ValueProxy[]} proxies
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.all = function all(proxies) {
	        var generation = proxies.reduce(function (generation, proxy) {
	            return Math.max(generation, proxy._generation + 1);
	        }, 0);
	
	        var valueProxy = new ValueProxy({
	            generation: generation,
	            parents: proxies,
	            get: function get() {
	                if (!this.isActive) {
	                    this.values = proxies.map(function (proxy) {
	                        return proxy.getValue();
	                    });
	                }
	
	                return this.values;
	            },
	            subscribe: function subscribe() {
	                var _this6 = this;
	
	                proxies.forEach(function (proxy, index) {
	                    valueProxy.listenTo(proxy, function (value) {
	                        if (_this6.values[index] !== value) {
	                            var newValues = _this6.values; //.slice();
	
	                            newValues[index] = value;
	
	                            valueProxy.emit(newValues);
	                        }
	                    });
	                });
	
	                // force get value to override cache
	                this.getValue();
	            }
	        });
	
	        return valueProxy;
	    };
	
	    /**
	     * @param {ValueProxy} proxy
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.then = function then(proxy) {
	        return this.fromPromise(proxy, 'then');
	    };
	
	    //noinspection ReservedWordAsName
	    /**
	     * @param {ValueProxy} proxy
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.catch = function _catch(proxy) {
	        return this.fromPromise(proxy, 'catch');
	    };
	
	    /**
	     * @param {ValueProxy} proxy
	     * @param {string} method
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    ValueProxy.fromPromise = function fromPromise(proxy, method) {
	        var valueProxy = new ValueProxy({
	            generation: proxy._generation + 1,
	            parents: [proxy],
	            get: function get() {
	                // If activated return current value
	                if (!this.isActive) {
	                    // If not activated force activate
	                    this.emitPromise(proxy.getValue());
	                }
	
	                return this.value;
	            },
	            subscribe: function subscribe() {
	                var _this7 = this;
	
	                this.listenTo(proxy, function (promise) {
	                    return _this7.emitPromise(promise);
	                });
	
	                // force get value to override cache
	                this.getValue();
	            }
	        });
	
	        /**
	         * @param {Promise} promise
	         */
	        valueProxy.emitPromise = function (promise) {
	            var _this8 = this;
	
	            if (promise) {
	                this._promise = Promise.resolve(this._promise).catch(function () {
	                    // fix previous
	                }).then(function () {
	                    return promise[method](function (value) {
	                        return _this8.emitValue(value);
	                    });
	                });
	            }
	        };
	
	        return valueProxy;
	    };
	
	    return ValueProxy;
	}(_Events2.Events);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Events = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _Planner = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Events = exports.Events = function () {
	    function Events() {
	        (0, _classCallCheck3.default)(this, Events);
	
	        this._generation = 0;
	        this._listeners = [];
	        this._listenings = [];
	        this._channels = {};
	    }
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.on = function on(callback) {
	        this._listeners.push(callback);
	
	        return this;
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.once = function once(callback) {
	        var _this = this;
	
	        var cb = function cb() {
	            callback.apply(undefined, arguments);
	            _this.off(cb);
	        };
	
	        return this.on(cb);
	    };
	
	    /**
	     * @param {function} [callback]
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.off = function off(callback) {
	        if (callback) {
	            this._listeners = this._listeners.filter(function (cb) {
	                return cb !== callback;
	            });
	        } else {
	            this._listeners = [];
	        }
	    };
	
	    /**
	     * @param {*} value
	     * @param {*} [value1]
	     * @param {*} [value2]
	     * @param {*} [value3]
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.emit = function emit(value, value1, value2, value3) {
	        var _this2 = this;
	
	        this._emit(function () {
	            var listeners = _this2._listeners,
	                length = listeners.length;
	
	            for (var index = 0; index < length; index++) {
	                listeners[index](value, value1, value2, value3);
	            }
	        });
	
	        return this;
	    };
	
	    /**
	     * @param {string} channel
	     * @param {*} value
	     * @param {*} [value1]
	     * @param {*} [value2]
	     * @param {*} [value3]
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.emitToChannel = function emitToChannel(channel, value, value1, value2, value3) {
	        if (this._channels[channel]) {
	            this._channels[channel].emit(value, value1, value2, value3);
	        }
	
	        return this;
	    };
	
	    /**
	     * @param {function} callback
	     * @private
	     */
	
	
	    Events.prototype._emit = function _emit(callback) {
	        if (!this._eventDebounce) {
	            this._eventDebounce = _Planner.Planner.debounce(this._generation);
	        }
	
	        this._eventDebounce(callback);
	    };
	
	    /**
	     * @param {Events} obj
	     * @param {function} callback
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.listenTo = function listenTo(obj, callback) {
	        this._listenings.push({ obj: obj, callback: callback });
	
	        obj.on(callback);
	
	        return this;
	    };
	
	    /**
	     * @param {Events} obj
	     * @param {function} callback
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.listenToOnce = function listenToOnce(obj, callback) {
	        var _this3 = this;
	
	        var cb = function cb() {
	            callback.apply(undefined, arguments);
	            _this3.stopListening(obj, cb);
	        };
	        return this.listenTo(obj, cb);
	    };
	
	    /**
	     * Stop listening's
	     *
	     * @param {{}} [listenObject]
	     * @param {function} [callback]
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.stopListening = function stopListening(listenObject, callback) {
	        this._listenings.forEach(function (_ref) {
	            var obj = _ref.obj;
	            var cb = _ref.callback;
	
	            if ((!listenObject || obj === listenObject) && (!callback || callback === cb)) {
	                obj.off(cb);
	            }
	        });
	
	        return this;
	    };
	
	    /**
	     * @param {string} name
	     *
	     * @returns {Events}
	     */
	
	
	    Events.prototype.channel = function channel(name) {
	        if (!this._channels[name]) {
	            var channel = this._channels[name] = new Events();
	            channel._generation = this._generation + 1;
	        }
	
	        return this._channels[name];
	    };
	
	    return Events;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EYXRhL0V2ZW50cy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7OztJQUVhLE0sV0FBQSxNO0FBRVQsc0JBQWM7QUFBQTs7QUFDVixhQUFLLFdBQUwsR0FBbUIsQ0FBbkI7QUFDQSxhQUFLLFVBQUwsR0FBa0IsRUFBbEI7QUFDQSxhQUFLLFdBQUwsR0FBbUIsRUFBbkI7QUFDQSxhQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDSDs7QUFFRDs7Ozs7OztxQkFLQSxFLGVBQUcsUSxFQUFVO0FBQ1QsYUFBSyxVQUFMLENBQWdCLElBQWhCLENBQXFCLFFBQXJCOztBQUVBLGVBQU8sSUFBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7cUJBS0EsSSxpQkFBSyxRLEVBQVU7QUFBQTs7QUFDWCxZQUFJLEtBQUssU0FBTCxFQUFLLEdBQWE7QUFDbEI7QUFDQSxrQkFBSyxHQUFMLENBQVMsRUFBVDtBQUNILFNBSEQ7O0FBS0EsZUFBTyxLQUFLLEVBQUwsQ0FBUSxFQUFSLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O3FCQUtBLEcsZ0JBQUksUSxFQUFVO0FBQ1YsWUFBSSxRQUFKLEVBQWM7QUFDVixpQkFBSyxVQUFMLEdBQWtCLEtBQUssVUFBTCxDQUFnQixNQUFoQixDQUF1QjtBQUFBLHVCQUFNLE9BQU8sUUFBYjtBQUFBLGFBQXZCLENBQWxCO0FBQ0gsU0FGRCxNQUVPO0FBQ0gsaUJBQUssVUFBTCxHQUFrQixFQUFsQjtBQUNIO0FBQ0osSzs7QUFFRDs7Ozs7Ozs7OztxQkFRQSxJLGlCQUFLLEssRUFBTyxNLEVBQVEsTSxFQUFRLE0sRUFBUTtBQUFBOztBQUNoQyxhQUFLLEtBQUwsQ0FBVyxZQUFNO0FBQ2IsZ0JBQUksWUFBWSxPQUFLLFVBQXJCO0FBQUEsZ0JBQ0ksU0FBUyxVQUFVLE1BRHZCOztBQUdBLGlCQUFLLElBQUksUUFBUSxDQUFqQixFQUFvQixRQUFRLE1BQTVCLEVBQW9DLE9BQXBDLEVBQTZDO0FBQ3pDLDBCQUFVLEtBQVYsRUFBaUIsS0FBakIsRUFBd0IsTUFBeEIsRUFBZ0MsTUFBaEMsRUFBd0MsTUFBeEM7QUFDSDtBQUNKLFNBUEQ7O0FBU0EsZUFBTyxJQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7Ozs7cUJBU0EsYSwwQkFBYyxPLEVBQVMsSyxFQUFPLE0sRUFBUSxNLEVBQVEsTSxFQUFRO0FBQ2xELFlBQUksS0FBSyxTQUFMLENBQWUsT0FBZixDQUFKLEVBQTZCO0FBQ3pCLGlCQUFLLFNBQUwsQ0FBZSxPQUFmLEVBQXdCLElBQXhCLENBQTZCLEtBQTdCLEVBQW9DLE1BQXBDLEVBQTRDLE1BQTVDLEVBQW9ELE1BQXBEO0FBQ0g7O0FBRUQsZUFBTyxJQUFQO0FBQ0gsSzs7QUFHRDs7Ozs7O3FCQUlBLEssa0JBQU0sUSxFQUFVO0FBQ1osWUFBSSxDQUFDLEtBQUssY0FBVixFQUEwQjtBQUN0QixpQkFBSyxjQUFMLEdBQXNCLGlCQUFRLFFBQVIsQ0FBaUIsS0FBSyxXQUF0QixDQUF0QjtBQUNIOztBQUVELGFBQUssY0FBTCxDQUFvQixRQUFwQjtBQUNILEs7O0FBRUQ7Ozs7Ozs7O3FCQU1BLFEscUJBQVMsRyxFQUFLLFEsRUFBVTtBQUNwQixhQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBc0IsRUFBQyxRQUFELEVBQU0sa0JBQU4sRUFBdEI7O0FBRUEsWUFBSSxFQUFKLENBQU8sUUFBUDs7QUFFQSxlQUFPLElBQVA7QUFDSCxLOztBQUVEOzs7Ozs7OztxQkFNQSxZLHlCQUFhLEcsRUFBSyxRLEVBQVU7QUFBQTs7QUFDeEIsWUFBSSxLQUFLLFNBQUwsRUFBSyxHQUFhO0FBQ2xCO0FBQ0EsbUJBQUssYUFBTCxDQUFtQixHQUFuQixFQUF3QixFQUF4QjtBQUNILFNBSEQ7QUFJQSxlQUFPLEtBQUssUUFBTCxDQUFjLEdBQWQsRUFBbUIsRUFBbkIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7Ozs7cUJBUUEsYSwwQkFBYyxZLEVBQWMsUSxFQUFVO0FBQ2xDLGFBQUssV0FBTCxDQUFpQixPQUFqQixDQUF5QixnQkFBeUI7QUFBQSxnQkFBdkIsR0FBdUIsUUFBdkIsR0FBdUI7QUFBQSxnQkFBUixFQUFRLFFBQWxCLFFBQWtCOztBQUM5QyxnQkFBSSxDQUFDLENBQUMsWUFBRCxJQUFpQixRQUFRLFlBQTFCLE1BQTRDLENBQUMsUUFBRCxJQUFhLGFBQWEsRUFBdEUsQ0FBSixFQUErRTtBQUMzRSxvQkFBSSxHQUFKLENBQVEsRUFBUjtBQUNIO0FBQ0osU0FKRDs7QUFNQSxlQUFPLElBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O3FCQUtBLE8sb0JBQVEsSSxFQUFNO0FBQ1YsWUFBSSxDQUFDLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBTCxFQUEyQjtBQUN2QixnQkFBSSxVQUFVLEtBQUssU0FBTCxDQUFlLElBQWYsSUFBdUIsSUFBSSxNQUFKLEVBQXJDO0FBQ0Esb0JBQVEsV0FBUixHQUFzQixLQUFLLFdBQUwsR0FBbUIsQ0FBekM7QUFDSDs7QUFFRCxlQUFPLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBUDtBQUNILEsiLCJmaWxlIjoiRXZlbnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQbGFubmVyfSBmcm9tICcuL1BsYW5uZXInO1xuXG5leHBvcnQgY2xhc3MgRXZlbnRzIHtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9nZW5lcmF0aW9uID0gMDtcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgICAgIHRoaXMuX2xpc3RlbmluZ3MgPSBbXTtcbiAgICAgICAgdGhpcy5fY2hhbm5lbHMgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqXG4gICAgICogQHJldHVybnMge0V2ZW50c31cbiAgICAgKi9cbiAgICBvbihjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnMucHVzaChjYWxsYmFjayk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtFdmVudHN9XG4gICAgICovXG4gICAgb25jZShjYWxsYmFjaykge1xuICAgICAgICBsZXQgY2IgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgICAgICB0aGlzLm9mZihjYik7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIHRoaXMub24oY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja11cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtFdmVudHN9XG4gICAgICovXG4gICAgb2ZmKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLmZpbHRlcihjYiA9PiBjYiAhPT0gY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWUxXVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlMl1cbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZTNdXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRzfVxuICAgICAqL1xuICAgIGVtaXQodmFsdWUsIHZhbHVlMSwgdmFsdWUyLCB2YWx1ZTMpIHtcbiAgICAgICAgdGhpcy5fZW1pdCgoKSA9PiB7XG4gICAgICAgICAgICBsZXQgbGlzdGVuZXJzID0gdGhpcy5fbGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgIGxlbmd0aCA9IGxpc3RlbmVycy5sZW5ndGg7XG5cbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBsaXN0ZW5lcnNbaW5kZXhdKHZhbHVlLCB2YWx1ZTEsIHZhbHVlMiwgdmFsdWUzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNoYW5uZWxcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHBhcmFtIHsqfSBbdmFsdWUxXVxuICAgICAqIEBwYXJhbSB7Kn0gW3ZhbHVlMl1cbiAgICAgKiBAcGFyYW0geyp9IFt2YWx1ZTNdXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7RXZlbnRzfVxuICAgICAqL1xuICAgIGVtaXRUb0NoYW5uZWwoY2hhbm5lbCwgdmFsdWUsIHZhbHVlMSwgdmFsdWUyLCB2YWx1ZTMpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NoYW5uZWxzW2NoYW5uZWxdKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGFubmVsc1tjaGFubmVsXS5lbWl0KHZhbHVlLCB2YWx1ZTEsIHZhbHVlMiwgdmFsdWUzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9lbWl0KGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5fZXZlbnREZWJvdW5jZSkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnREZWJvdW5jZSA9IFBsYW5uZXIuZGVib3VuY2UodGhpcy5fZ2VuZXJhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9ldmVudERlYm91bmNlKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0V2ZW50c30gb2JqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtFdmVudHN9XG4gICAgICovXG4gICAgbGlzdGVuVG8ob2JqLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9saXN0ZW5pbmdzLnB1c2goe29iaiwgY2FsbGJhY2t9KTtcblxuICAgICAgICBvYmoub24oY2FsbGJhY2spO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RXZlbnRzfSBvYmpcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqXG4gICAgICogQHJldHVybnMge0V2ZW50c31cbiAgICAgKi9cbiAgICBsaXN0ZW5Ub09uY2Uob2JqLCBjYWxsYmFjaykge1xuICAgICAgICBsZXQgY2IgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgY2FsbGJhY2soLi4uYXJncyk7XG4gICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcob2JqLCBjYik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiB0aGlzLmxpc3RlblRvKG9iaiwgY2IpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3AgbGlzdGVuaW5nJ3NcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7e319IFtsaXN0ZW5PYmplY3RdXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXVxuICAgICAqXG4gICAgICogQHJldHVybnMge0V2ZW50c31cbiAgICAgKi9cbiAgICBzdG9wTGlzdGVuaW5nKGxpc3Rlbk9iamVjdCwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fbGlzdGVuaW5ncy5mb3JFYWNoKCh7b2JqLCBjYWxsYmFjazogY2J9KSA9PiB7XG4gICAgICAgICAgICBpZiAoKCFsaXN0ZW5PYmplY3QgfHwgb2JqID09PSBsaXN0ZW5PYmplY3QpICYmICghY2FsbGJhY2sgfHwgY2FsbGJhY2sgPT09IGNiKSkge1xuICAgICAgICAgICAgICAgIG9iai5vZmYoY2IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge0V2ZW50c31cbiAgICAgKi9cbiAgICBjaGFubmVsKG5hbWUpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9jaGFubmVsc1tuYW1lXSkge1xuICAgICAgICAgICAgbGV0IGNoYW5uZWwgPSB0aGlzLl9jaGFubmVsc1tuYW1lXSA9IG5ldyBFdmVudHMoKTtcbiAgICAgICAgICAgIGNoYW5uZWwuX2dlbmVyYXRpb24gPSB0aGlzLl9nZW5lcmF0aW9uICsgMTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9jaGFubmVsc1tuYW1lXTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Planner = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Planner = exports.Planner = function () {
	    function Planner() {
	        (0, _classCallCheck3.default)(this, Planner);
	
	        this._lockEnabled = false;
	        this._flushActive = false;
	        this._lockCounter = 0;
	        this._commitQueue = [];
	        this._queue = [];
	    }
	
	    /**
	     * @returns {{commit: function(function)}}
	     */
	
	
	    Planner.prototype.atom = function atom() {
	        var _this = this,
	            _callback = undefined;
	
	        return {
	            commit: function commit(callback) {
	                var hasTask = Boolean(_callback);
	
	                _callback = callback;
	
	                if (!hasTask) {
	                    _this.commit(function () {
	                        _callback();
	                        _callback = undefined;
	                    });
	                }
	
	                return this;
	            }
	        };
	    };
	
	    /**
	     * Create commit wrapper
	     *
	     * @param {function(...[*])} callback
	     *
	     * @returns {function(...[*])}
	     */
	
	
	    Planner.prototype.commitWrapper = function commitWrapper(callback) {
	        var atom = this.atom();
	
	        return function () {
	            for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                args[_key] = arguments[_key];
	            }
	
	            atom.commit(function () {
	                return callback.apply(undefined, args);
	            });
	        };
	    };
	
	    /**
	     * @param {function} callback
	     */
	
	
	    Planner.prototype.commit = function commit(callback) {
	        var _this2 = this;
	
	        this._commitQueue.push(callback);
	
	        if (typeof requestAnimationFrame === 'function') {
	            if (!this._timer) {
	                this._timer = requestAnimationFrame(function () {
	                    return _this2.flushAsync();
	                });
	            }
	        } else {
	            this.flushAsync();
	        }
	    };
	
	    /**
	     * Flush changes
	     */
	
	
	    Planner.prototype.flushAsync = function flushAsync() {
	        var queue = this._commitQueue;
	
	        this._timer = null;
	        this._commitQueue = [];
	
	        this._invokeCallbacks(queue);
	    };
	
	    /**
	     * Flush changes
	     */
	
	
	    Planner.prototype.flush = function flush() {
	        // prevent flush during flush
	        if (this._flushActive) {
	            return;
	        }
	
	        this._flushActive = true;
	
	        while (this._queue.length) {
	            var _queue$shift = this._queue.shift();
	
	            var callbacks = _queue$shift.callbacks;
	
	
	            try {
	                this._invokeCallbacks(callbacks);
	            } catch (err) {
	                console.error(err);
	            }
	        }
	
	        this._flushActive = false;
	    };
	
	    /**
	     * @param {function[]} callbacks
	     * @private
	     */
	
	
	    Planner.prototype._invokeCallbacks = function _invokeCallbacks(callbacks) {
	        for (var i = 0; i < callbacks.length; i++) {
	            (0, callbacks[i])();
	        }
	    };
	
	    /**
	     * Create lock for events
	     *
	     * @param {function} callback
	     */
	
	
	    Planner.prototype.lock = function lock(callback) {
	        if (!this._lockEnabled) {
	            return callback();
	        }
	
	        this._lockCounter++;
	
	        try {
	            callback();
	        } catch (err) {
	            console.error(err);
	        }
	
	        this._lockCounter--;
	
	        if (!this._lockCounter) {
	            this.flush();
	        }
	    };
	
	    /**
	     * @param {number} generation
	     * @param {function} callback
	     *
	     * @returns {*}
	     */
	
	
	    Planner.prototype.plan = function plan(generation, callback) {
	        var _this3 = this;
	
	        if (!this._lockEnabled) {
	            return callback();
	        }
	
	        if (this._lockCounter || this._flushActive) {
	            var queue = this._queue,
	                length = queue.length;
	
	            for (var i = 0; i < length; i++) {
	                var level = queue[i];
	
	                if (level.generation === generation) {
	                    return level.callbacks.push(callback);
	                }
	
	                if (level.generation > generation) {
	                    return queue.splice(i, 0, {
	                        generation: generation,
	                        callbacks: [callback]
	                    });
	                }
	            }
	
	            queue.push({
	                generation: generation,
	                callbacks: [callback]
	            });
	        } else {
	            // if no lock presented start lock
	            this.lock(function () {
	                _this3.plan(generation, callback);
	            });
	        }
	    };
	
	    /**
	     * Return debounced callback
	     *
	     * @param {number} generation
	     * @returns {function(function(*))}
	     */
	
	
	    Planner.prototype.debounce = function debounce(generation) {
	        var _this4 = this;
	
	        var planned = false,
	            _callback = void 0;
	
	        return function (callback) {
	            _callback = callback;
	
	            if (!planned) {
	                planned = true;
	
	                _this4.plan(generation, function () {
	                    planned = false;
	                    _callback();
	                });
	            }
	        };
	    };
	
	    /**
	     * @param generation
	     * @returns {{commit: (function(Function))}}
	     */
	
	
	    Planner.debounce = function debounce(generation) {
	        return this.getInstance().debounce(generation);
	    };
	
	    /**
	     * @returns {Planner}
	     */
	
	
	    Planner.getInstance = function getInstance() {
	        if (!this.instance) {
	            this.instance = new Planner();
	        }
	
	        return this.instance;
	    };
	
	    /**
	     * Start debounce logic
	     */
	
	
	    Planner.enableLock = function enableLock() {
	        this.getInstance()._lockEnabled = true;
	    };
	
	    /**
	     * Start debounce logic
	     */
	
	
	    Planner.disableLock = function disableLock() {
	        this.getInstance()._lockEnabled = false;
	    };
	
	    /**
	     * @param {function} callback
	     */
	
	
	    Planner.lock = function lock(callback) {
	        this.getInstance().lock(callback);
	    };
	
	    return Planner;
	}();
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.FetchRequest = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _AbstractRequest2 = __webpack_require__(88);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FetchRequest = exports.FetchRequest = function (_AbstractRequest) {
	    (0, _inherits3.default)(FetchRequest, _AbstractRequest);
	
	    function FetchRequest() {
	        (0, _classCallCheck3.default)(this, FetchRequest);
	        return (0, _possibleConstructorReturn3.default)(this, _AbstractRequest.apply(this, arguments));
	    }
	
	    /**
	     * @param {string} url
	     * @param {{}} query
	     * @param {string} body
	     * @param {FormData} data
	     * @param {{}} headers
	     * @param {string} method
	     *
	     * @returns {Promise<{}>}
	     */
	    FetchRequest.prototype.request = function request(_ref) {
	        var url = _ref.url;
	        var query = _ref.query;
	        var body = _ref.body;
	        var data = _ref.data;
	        var _ref$headers = _ref.headers;
	        var headers = _ref$headers === undefined ? {} : _ref$headers;
	        var _ref$method = _ref.method;
	        var method = _ref$method === undefined ? 'GET' : _ref$method;
	
	        Object.assign(headers, {
	            'Accept': 'application/json',
	            'Content-Type': 'application/json'
	        });
	
	        var options = {
	            method: method,
	            body: body,
	            data: data,
	            headers: headers
	        };
	
	        return fetch(this.buildUrl(url, query), options).then(function (response) {
	            if (response.status >= 200 && response.status < 210) {
	                return response.json();
	            }
	
	            throw new Error('Response status was ' + response.status);
	        });
	    };
	
	    /**
	     * @param {string} url
	     * @param {{}} data
	     *
	     * @returns {Promise<{}>}
	     */
	
	
	    FetchRequest.prototype.post = function post(_ref2) {
	        var url = _ref2.url;
	        var data = _ref2.data;
	
	        return this.request({
	            method: 'post',
	            url: url,
	            body: JSON.stringify(data)
	        });
	    };
	
	    /**
	     * @param {string} url
	     * @param {{}} data
	     *
	     * @returns {Promise<{}>}
	     */
	
	
	    FetchRequest.prototype.put = function put(_ref3) {
	        var url = _ref3.url;
	        var data = _ref3.data;
	
	        return this.request({
	            method: 'put',
	            url: url,
	            body: JSON.stringify(data)
	        });
	    };
	
	    /**
	     * @param {string} url
	     *
	     * @returns {Promise<{}>}
	     */
	
	
	    FetchRequest.prototype.del = function del(_ref4) {
	        var url = _ref4.url;
	
	        return this.request({
	            method: 'delete',
	            url: url,
	            data: '{}'
	        });
	    };
	
	    /**
	     * @param {{}} deps
	     * @returns {FetchRequest}
	     */
	
	
	    FetchRequest.factory = function factory(deps) {
	        var _this2 = this;
	
	        if (typeof fetch === 'undefined') {
	            var polyfill = __webpack_require__(89);
	
	            return polyfill().then(function () {
	                return new _this2(deps);
	            });
	        }
	
	        return new this(deps);
	    };
	
	    return FetchRequest;
	}(_AbstractRequest2.AbstractRequest);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SZXF1ZXN0L0ZldGNoUmVxdWVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0lBRWEsWSxXQUFBLFk7Ozs7Ozs7O0FBRVQ7Ozs7Ozs7Ozs7MkJBVUEsTywwQkFBZ0U7QUFBQSxZQUF2RCxHQUF1RCxRQUF2RCxHQUF1RDtBQUFBLFlBQWxELEtBQWtELFFBQWxELEtBQWtEO0FBQUEsWUFBM0MsSUFBMkMsUUFBM0MsSUFBMkM7QUFBQSxZQUFyQyxJQUFxQyxRQUFyQyxJQUFxQztBQUFBLGdDQUEvQixPQUErQjtBQUFBLFlBQS9CLE9BQStCLGdDQUFyQixFQUFxQjtBQUFBLCtCQUFqQixNQUFpQjtBQUFBLFlBQWpCLE1BQWlCLCtCQUFSLEtBQVE7O0FBQzVELGVBQU8sTUFBUCxDQUFjLE9BQWQsRUFBdUI7QUFDbkIsc0JBQVUsa0JBRFM7QUFFbkIsNEJBQWdCO0FBRkcsU0FBdkI7O0FBS0EsWUFBSSxVQUFVO0FBQ1YsMEJBRFU7QUFFVixzQkFGVTtBQUdWLHNCQUhVO0FBSVYscUJBQVM7QUFKQyxTQUFkOztBQU9BLGVBQU8sTUFBTSxLQUFLLFFBQUwsQ0FBYyxHQUFkLEVBQW1CLEtBQW5CLENBQU4sRUFBaUMsT0FBakMsRUFDRixJQURFLENBQ0csVUFBQyxRQUFELEVBQWM7QUFDaEIsZ0JBQUksU0FBUyxNQUFULElBQW1CLEdBQW5CLElBQTBCLFNBQVMsTUFBVCxHQUFrQixHQUFoRCxFQUFxRDtBQUNqRCx1QkFBTyxTQUFTLElBQVQsRUFBUDtBQUNIOztBQUVELGtCQUFNLElBQUksS0FBSixDQUFVLHlCQUF5QixTQUFTLE1BQTVDLENBQU47QUFDSCxTQVBFLENBQVA7QUFRSCxLOztBQUVEOzs7Ozs7OzsyQkFNQSxJLHdCQUFrQjtBQUFBLFlBQVosR0FBWSxTQUFaLEdBQVk7QUFBQSxZQUFQLElBQU8sU0FBUCxJQUFPOztBQUNkLGVBQU8sS0FBSyxPQUFMLENBQWE7QUFDaEIsb0JBQVEsTUFEUTtBQUVoQixvQkFGZ0I7QUFHaEIsa0JBQU0sS0FBSyxTQUFMLENBQWUsSUFBZjtBQUhVLFNBQWIsQ0FBUDtBQUtILEs7O0FBRUQ7Ozs7Ozs7OzJCQU1BLEcsdUJBQWlCO0FBQUEsWUFBWixHQUFZLFNBQVosR0FBWTtBQUFBLFlBQVAsSUFBTyxTQUFQLElBQU87O0FBQ2IsZUFBTyxLQUFLLE9BQUwsQ0FBYTtBQUNoQixvQkFBUSxLQURRO0FBRWhCLG9CQUZnQjtBQUdoQixrQkFBTSxLQUFLLFNBQUwsQ0FBZSxJQUFmO0FBSFUsU0FBYixDQUFQO0FBS0gsSzs7QUFFRDs7Ozs7OzsyQkFLQSxHLHVCQUFXO0FBQUEsWUFBTixHQUFNLFNBQU4sR0FBTTs7QUFDUCxlQUFPLEtBQUssT0FBTCxDQUFhO0FBQ2hCLG9CQUFRLFFBRFE7QUFFaEIsb0JBRmdCO0FBR2hCLGtCQUFNO0FBSFUsU0FBYixDQUFQO0FBS0gsSzs7QUFFRDs7Ozs7O2lCQUlPLE8sb0JBQVEsSSxFQUFNO0FBQUE7O0FBQ2pCLFlBQUksT0FBTyxLQUFQLEtBQWlCLFdBQXJCLEVBQWtDO0FBQzlCLGdCQUFJLFdBQVcsUUFBUSw2QkFBUixDQUFmOztBQUVBLG1CQUFPLFdBQVcsSUFBWCxDQUFnQixZQUFNO0FBQ3pCLHVCQUFPLFdBQVMsSUFBVCxDQUFQO0FBQ0gsYUFGTSxDQUFQO0FBR0g7O0FBRUQsZUFBTyxJQUFJLElBQUosQ0FBUyxJQUFULENBQVA7QUFDSCxLIiwiZmlsZSI6IkZldGNoUmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QWJzdHJhY3RSZXF1ZXN0fSBmcm9tICcuL0Fic3RyYWN0UmVxdWVzdCc7XG5cbmV4cG9ydCBjbGFzcyBGZXRjaFJlcXVlc3QgZXh0ZW5kcyBBYnN0cmFjdFJlcXVlc3Qge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7e319IHF1ZXJ5XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGJvZHlcbiAgICAgKiBAcGFyYW0ge0Zvcm1EYXRhfSBkYXRhXG4gICAgICogQHBhcmFtIHt7fX0gaGVhZGVyc1xuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXRob2RcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHt9Pn1cbiAgICAgKi9cbiAgICByZXF1ZXN0KHt1cmwsIHF1ZXJ5LCBib2R5LCBkYXRhLCBoZWFkZXJzID0ge30sIG1ldGhvZCA9ICdHRVQnfSkge1xuICAgICAgICBPYmplY3QuYXNzaWduKGhlYWRlcnMsIHtcbiAgICAgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICBoZWFkZXJzOiBoZWFkZXJzXG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZldGNoKHRoaXMuYnVpbGRVcmwodXJsLCBxdWVyeSksIG9wdGlvbnMpXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID49IDIwMCAmJiByZXNwb25zZS5zdGF0dXMgPCAyMTApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Jlc3BvbnNlIHN0YXR1cyB3YXMgJyArIHJlc3BvbnNlLnN0YXR1cyk7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICogQHBhcmFtIHt7fX0gZGF0YVxuICAgICAqXG4gICAgICogQHJldHVybnMge1Byb21pc2U8e30+fVxuICAgICAqL1xuICAgIHBvc3Qoe3VybCwgZGF0YX0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKiBAcGFyYW0ge3t9fSBkYXRhXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7fT59XG4gICAgICovXG4gICAgcHV0KHt1cmwsIGRhdGF9KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICAgICAgbWV0aG9kOiAncHV0JyxcbiAgICAgICAgICAgIHVybCxcbiAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB1cmxcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPHt9Pn1cbiAgICAgKi9cbiAgICBkZWwoe3VybH0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVxdWVzdCh7XG4gICAgICAgICAgICBtZXRob2Q6ICdkZWxldGUnLFxuICAgICAgICAgICAgdXJsLFxuICAgICAgICAgICAgZGF0YTogJ3t9J1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBkZXBzXG4gICAgICogQHJldHVybnMge0ZldGNoUmVxdWVzdH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZmFjdG9yeShkZXBzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBsZXQgcG9seWZpbGwgPSByZXF1aXJlKCdwcm9taXNlP2dsb2JhbCF3aGF0d2ctZmV0Y2gnKTtcblxuICAgICAgICAgICAgcmV0dXJuIHBvbHlmaWxsKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzKGRlcHMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmV3IHRoaXMoZGVwcyk7XG4gICAgfVxuXG59Il19

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.AbstractRequest = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AbstractRequest = exports.AbstractRequest = function () {
	    function AbstractRequest() {
	        (0, _classCallCheck3.default)(this, AbstractRequest);
	    }
	
	    /**
	     * @param {string} url
	     * @param {{}|null} query
	     *
	     * @returns {string}
	     */
	    AbstractRequest.prototype.buildUrl = function buildUrl(url, query) {
	        if (query) {
	            (function () {
	                var result = [];
	
	                Object.keys(query).forEach(function (key) {
	                    if (query[key] != null && query[key] !== '') {
	                        result.push(encodeURIComponent(key) + '=' + encodeURIComponent(query[key]));
	                    }
	                });
	
	                if (result.length) {
	                    url += '?' + result.join('&');
	                }
	            })();
	        }
	
	        return url;
	    };
	
	    return AbstractRequest;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SZXF1ZXN0L0Fic3RyYWN0UmVxdWVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFhLGUsV0FBQSxlOzs7OztBQUVUOzs7Ozs7OEJBTUEsUSxxQkFBUyxHLEVBQUssSyxFQUFPO0FBQ2pCLFlBQUksS0FBSixFQUFXO0FBQUE7QUFDUCxvQkFBSSxTQUFTLEVBQWI7O0FBRUEsdUJBQU8sSUFBUCxDQUFZLEtBQVosRUFBbUIsT0FBbkIsQ0FBMkIsZUFBTztBQUM5Qix3QkFBSSxNQUFNLEdBQU4sS0FBYyxJQUFkLElBQXNCLE1BQU0sR0FBTixNQUFlLEVBQXpDLEVBQTZDO0FBQ3pDLCtCQUFPLElBQVAsQ0FBZSxtQkFBbUIsR0FBbkIsQ0FBZixTQUEwQyxtQkFBbUIsTUFBTSxHQUFOLENBQW5CLENBQTFDO0FBQ0g7QUFDSixpQkFKRDs7QUFNQSxvQkFBSSxPQUFPLE1BQVgsRUFBbUI7QUFDZiwyQkFBTyxNQUFNLE9BQU8sSUFBUCxDQUFZLEdBQVosQ0FBYjtBQUNIO0FBWE07QUFZVjs7QUFFRCxlQUFPLEdBQVA7QUFDSCxLIiwiZmlsZSI6IkFic3RyYWN0UmVxdWVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBBYnN0cmFjdFJlcXVlc3Qge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAqIEBwYXJhbSB7e318bnVsbH0gcXVlcnlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgYnVpbGRVcmwodXJsLCBxdWVyeSkge1xuICAgICAgICBpZiAocXVlcnkpIHtcbiAgICAgICAgICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgICAgICAgICAgT2JqZWN0LmtleXMocXVlcnkpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocXVlcnlba2V5XSAhPSBudWxsICYmIHF1ZXJ5W2tleV0gIT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudChxdWVyeVtrZXldKX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB1cmwgKz0gJz8nICsgcmVzdWx0LmpvaW4oJyYnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB1cmw7XG4gICAgfVxuXG59Il19

/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function () {
	  return new Promise(function (resolve) {
	    __webpack_require__.e/* nsure */(1, function (require) {
	      resolve(__webpack_require__(90));
	    });
	  });
	}

/***/ },
/* 90 */,
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.diConfig = undefined;
	
	var _di = __webpack_require__(2);
	
	var _BodyContainer = __webpack_require__(92);
	
	var _malanka = __webpack_require__(171);
	
	var diConfig = exports.diConfig = {
	    resolvers: [(0, _di.webpackResolver)([__webpack_require__(196), __webpack_require__(237)]), (0, _di.staticResolver)({
	        BodyContainer: _BodyContainer.BodyContainer,
	        Environment: _malanka.Environment,
	        Collection: _malanka.Collection,
	        Model: _malanka.Model
	    })],
	    dependencies: {
	        // routes
	
	        home: ['!BodyContainer', {
	            content: 'homePage'
	        }],
	
	        error: ['!BodyContainer', {
	            content: 'errorPage'
	        }],
	
	        // Pages
	
	        BodyContainer: {
	            env: 'env',
	            header: 'Header'
	        },
	
	        homePage: ['HomePage', {
	            sandbox: 'sandbox'
	        }],
	
	        errorPage: ['ErrorPage', {}],
	
	        // Components
	
	        Header: {
	            sandbox: 'sandbox'
	        },
	
	        // Data models & collections
	
	        sandbox: 'Sandbox',
	
	        // States
	
	        // Infrastructure
	
	        env: ['Environment', {
	            renderer: 'renderer'
	        }]
	    }
	};

/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.BodyContainer = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _DiComponent2 = __webpack_require__(190);
	
	var _BodyContainer = __webpack_require__(191);
	
	var _BodyContainer2 = _interopRequireDefault(_BodyContainer);
	
	var _BodyContainer3 = __webpack_require__(195);
	
	var _BodyContainer4 = _interopRequireDefault(_BodyContainer3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var BodyContainer = exports.BodyContainer = (_dec = (0, _malanka.Defaults)({
	    template: _BodyContainer2.default,
	    styles: _BodyContainer4.default,
	    tagName: 'div'
	}), _dec(_class = function (_DiComponent) {
	    (0, _inherits3.default)(BodyContainer, _DiComponent);

	    function BodyContainer() {
	        (0, _classCallCheck3.default)(this, BodyContainer);
	        return (0, _possibleConstructorReturn3.default)(this, _DiComponent.apply(this, arguments));
	    }

	    return BodyContainer;
	}(_DiComponent2.DiComponent)) || _class);

/***/ },
/* 93 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	
	exports.default = function (instance, Constructor) {
	  if (!(instance instanceof Constructor)) {
	    throw new TypeError("Cannot call a class as a function");
	  }
	};

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _typeof2 = __webpack_require__(95);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = function (self, call) {
	  if (!self) {
	    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
	  }
	
	  return call && ((typeof call === "undefined" ? "undefined" : (0, _typeof3.default)(call)) === "object" || typeof call === "function") ? call : self;
	};

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _iterator = __webpack_require__(96);
	
	var _iterator2 = _interopRequireDefault(_iterator);
	
	var _symbol = __webpack_require__(147);
	
	var _symbol2 = _interopRequireDefault(_symbol);
	
	var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) {
	  return typeof obj;
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj;
	};
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
	  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
	} : function (obj) {
	  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
	};

/***/ },
/* 96 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(97), __esModule: true };

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(98);
	__webpack_require__(142);
	module.exports = __webpack_require__(146).f('iterator');

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $at = __webpack_require__(99)(true);
	
	// 21.1.3.27 String.prototype[@@iterator]()
	__webpack_require__(102)(String, 'String', function (iterated) {
	  this._t = String(iterated); // target
	  this._i = 0; // next index
	  // 21.1.5.2.1 %StringIteratorPrototype%.next()
	}, function () {
	  var O = this._t,
	      index = this._i,
	      point;
	  if (index >= O.length) return { value: undefined, done: true };
	  point = $at(O, index);
	  this._i += point.length;
	  return { value: point, done: false };
	});

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(100),
	    defined = __webpack_require__(101);
	// true  -> String#at
	// false -> String#codePointAt
	module.exports = function (TO_STRING) {
	  return function (that, pos) {
	    var s = String(defined(that)),
	        i = toInteger(pos),
	        l = s.length,
	        a,
	        b;
	    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;
	    a = s.charCodeAt(i);
	    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff ? TO_STRING ? s.charAt(i) : a : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;
	  };
	};

/***/ },
/* 100 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.1.4 ToInteger
	var ceil = Math.ceil,
	    floor = Math.floor;
	module.exports = function (it) {
	  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);
	};

/***/ },
/* 101 */
/***/ function(module, exports) {

	"use strict";
	
	// 7.2.1 RequireObjectCoercible(argument)
	module.exports = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on  " + it);
	  return it;
	};

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var LIBRARY = __webpack_require__(103),
	    $export = __webpack_require__(104),
	    redefine = __webpack_require__(119),
	    hide = __webpack_require__(109),
	    has = __webpack_require__(120),
	    Iterators = __webpack_require__(121),
	    $iterCreate = __webpack_require__(122),
	    setToStringTag = __webpack_require__(138),
	    getPrototypeOf = __webpack_require__(140),
	    ITERATOR = __webpack_require__(139)('iterator'),
	    BUGGY = !([].keys && 'next' in [].keys()) // Safari has buggy iterators w/o `next`
	,
	    FF_ITERATOR = '@@iterator',
	    KEYS = 'keys',
	    VALUES = 'values';
	
	var returnThis = function returnThis() {
	  return this;
	};
	
	module.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {
	  $iterCreate(Constructor, NAME, next);
	  var getMethod = function getMethod(kind) {
	    if (!BUGGY && kind in proto) return proto[kind];
	    switch (kind) {
	      case KEYS:
	        return function keys() {
	          return new Constructor(this, kind);
	        };
	      case VALUES:
	        return function values() {
	          return new Constructor(this, kind);
	        };
	    }return function entries() {
	      return new Constructor(this, kind);
	    };
	  };
	  var TAG = NAME + ' Iterator',
	      DEF_VALUES = DEFAULT == VALUES,
	      VALUES_BUG = false,
	      proto = Base.prototype,
	      $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT],
	      $default = $native || getMethod(DEFAULT),
	      $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined,
	      $anyNative = NAME == 'Array' ? proto.entries || $native : $native,
	      methods,
	      key,
	      IteratorPrototype;
	  // Fix native
	  if ($anyNative) {
	    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));
	    if (IteratorPrototype !== Object.prototype) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(IteratorPrototype, TAG, true);
	      // fix for some old engines
	      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);
	    }
	  }
	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEF_VALUES && $native && $native.name !== VALUES) {
	    VALUES_BUG = true;
	    $default = function values() {
	      return $native.call(this);
	    };
	  }
	  // Define iterator
	  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {
	    hide(proto, ITERATOR, $default);
	  }
	  // Plug for library
	  Iterators[NAME] = $default;
	  Iterators[TAG] = returnThis;
	  if (DEFAULT) {
	    methods = {
	      values: DEF_VALUES ? $default : getMethod(VALUES),
	      keys: IS_SET ? $default : getMethod(KEYS),
	      entries: $entries
	    };
	    if (FORCED) for (key in methods) {
	      if (!(key in proto)) redefine(proto, key, methods[key]);
	    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);
	  }
	  return methods;
	};

/***/ },
/* 103 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = true;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(105),
	    core = __webpack_require__(106),
	    ctx = __webpack_require__(107),
	    hide = __webpack_require__(109),
	    PROTOTYPE = 'prototype';
	
	var $export = function $export(type, name, source) {
	  var IS_FORCED = type & $export.F,
	      IS_GLOBAL = type & $export.G,
	      IS_STATIC = type & $export.S,
	      IS_PROTO = type & $export.P,
	      IS_BIND = type & $export.B,
	      IS_WRAP = type & $export.W,
	      exports = IS_GLOBAL ? core : core[name] || (core[name] = {}),
	      expProto = exports[PROTOTYPE],
	      target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE],
	      key,
	      own,
	      out;
	  if (IS_GLOBAL) source = name;
	  for (key in source) {
	    // contains in native
	    own = !IS_FORCED && target && target[key] !== undefined;
	    if (own && key in exports) continue;
	    // export native or passed
	    out = own ? target[key] : source[key];
	    // prevent global pollution for namespaces
	    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]
	    // bind timers to global for call from export context
	    : IS_BIND && own ? ctx(out, global)
	    // wrap global constructors for prevent change them in library
	    : IS_WRAP && target[key] == out ? function (C) {
	      var F = function F(a, b, c) {
	        if (this instanceof C) {
	          switch (arguments.length) {
	            case 0:
	              return new C();
	            case 1:
	              return new C(a);
	            case 2:
	              return new C(a, b);
	          }return new C(a, b, c);
	        }return C.apply(this, arguments);
	      };
	      F[PROTOTYPE] = C[PROTOTYPE];
	      return F;
	      // make static versions for prototype methods
	    }(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;
	    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%
	    if (IS_PROTO) {
	      (exports.virtual || (exports.virtual = {}))[key] = out;
	      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%
	      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);
	    }
	  }
	};
	// type bitmap
	$export.F = 1; // forced
	$export.G = 2; // global
	$export.S = 4; // static
	$export.P = 8; // proto
	$export.B = 16; // bind
	$export.W = 32; // wrap
	$export.U = 64; // safe
	$export.R = 128; // real proto method for `library` 
	module.exports = $export;

/***/ },
/* 105 */
/***/ function(module, exports) {

	'use strict';
	
	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global = module.exports = typeof window != 'undefined' && window.Math == Math ? window : typeof self != 'undefined' && self.Math == Math ? self : Function('return this')();
	if (typeof __g == 'number') __g = global; // eslint-disable-line no-undef

/***/ },
/* 106 */
/***/ function(module, exports) {

	'use strict';
	
	var core = module.exports = { version: '2.4.0' };
	if (typeof __e == 'number') __e = core; // eslint-disable-line no-undef

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// optional / simple context binding
	var aFunction = __webpack_require__(108);
	module.exports = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 1:
	      return function (a) {
	        return fn.call(that, a);
	      };
	    case 2:
	      return function (a, b) {
	        return fn.call(that, a, b);
	      };
	    case 3:
	      return function (a, b, c) {
	        return fn.call(that, a, b, c);
	      };
	  }
	  return function () /* ...args */{
	    return fn.apply(that, arguments);
	  };
	};

/***/ },
/* 108 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (it) {
	  if (typeof it != 'function') throw TypeError(it + ' is not a function!');
	  return it;
	};

/***/ },
/* 109 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(110),
	    createDesc = __webpack_require__(118);
	module.exports = __webpack_require__(114) ? function (object, key, value) {
	  return dP.f(object, key, createDesc(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

/***/ },
/* 110 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var anObject = __webpack_require__(111),
	    IE8_DOM_DEFINE = __webpack_require__(113),
	    toPrimitive = __webpack_require__(117),
	    dP = Object.defineProperty;
	
	exports.f = __webpack_require__(114) ? Object.defineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (IE8_DOM_DEFINE) try {
	    return dP(O, P, Attributes);
	  } catch (e) {/* empty */}
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(112);
	module.exports = function (it) {
	  if (!isObject(it)) throw TypeError(it + ' is not an object!');
	  return it;
	};

/***/ },
/* 112 */
/***/ function(module, exports) {

	'use strict';
	
	module.exports = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

/***/ },
/* 113 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = !__webpack_require__(114) && !__webpack_require__(115)(function () {
	  return Object.defineProperty(__webpack_require__(116)('div'), 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 114 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Thank's IE8 for his funny defineProperty
	module.exports = !__webpack_require__(115)(function () {
	  return Object.defineProperty({}, 'a', { get: function get() {
	      return 7;
	    } }).a != 7;
	});

/***/ },
/* 115 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (exec) {
	  try {
	    return !!exec();
	  } catch (e) {
	    return true;
	  }
	};

/***/ },
/* 116 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var isObject = __webpack_require__(112),
	    document = __webpack_require__(105).document
	// in old IE typeof document.createElement is 'object'
	,
	    is = isObject(document) && isObject(document.createElement);
	module.exports = function (it) {
	  return is ? document.createElement(it) : {};
	};

/***/ },
/* 117 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.1 ToPrimitive(input [, PreferredType])
	var isObject = __webpack_require__(112);
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	module.exports = function (it, S) {
	  if (!isObject(it)) return it;
	  var fn, val;
	  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;
	  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

/***/ },
/* 118 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

/***/ },
/* 119 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(109);

/***/ },
/* 120 */
/***/ function(module, exports) {

	"use strict";
	
	var hasOwnProperty = {}.hasOwnProperty;
	module.exports = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

/***/ },
/* 121 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = {};

/***/ },
/* 122 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var create = __webpack_require__(123),
	    descriptor = __webpack_require__(118),
	    setToStringTag = __webpack_require__(138),
	    IteratorPrototype = {};
	
	// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()
	__webpack_require__(109)(IteratorPrototype, __webpack_require__(139)('iterator'), function () {
	  return this;
	});
	
	module.exports = function (Constructor, NAME, next) {
	  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });
	  setToStringTag(Constructor, NAME + ' Iterator');
	};

/***/ },
/* 123 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	var anObject = __webpack_require__(111),
	    dPs = __webpack_require__(124),
	    enumBugKeys = __webpack_require__(136),
	    IE_PROTO = __webpack_require__(133)('IE_PROTO'),
	    Empty = function Empty() {/* empty */},
	    PROTOTYPE = 'prototype';
	
	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var _createDict = function createDict() {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = __webpack_require__(116)('iframe'),
	      i = enumBugKeys.length,
	      lt = '<',
	      gt = '>',
	      iframeDocument;
	  iframe.style.display = 'none';
	  __webpack_require__(137).appendChild(iframe);
	  iframe.src = 'javascript:'; // eslint-disable-line no-script-url
	  // createDict = iframe.contentWindow.Object;
	  // html.removeChild(iframe);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);
	  iframeDocument.close();
	  _createDict = iframeDocument.F;
	  while (i--) {
	    delete _createDict[PROTOTYPE][enumBugKeys[i]];
	  }return _createDict();
	};
	
	module.exports = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    Empty[PROTOTYPE] = anObject(O);
	    result = new Empty();
	    Empty[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO] = O;
	  } else result = _createDict();
	  return Properties === undefined ? result : dPs(result, Properties);
	};

/***/ },
/* 124 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var dP = __webpack_require__(110),
	    anObject = __webpack_require__(111),
	    getKeys = __webpack_require__(125);
	
	module.exports = __webpack_require__(114) ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = getKeys(Properties),
	      length = keys.length,
	      i = 0,
	      P;
	  while (length > i) {
	    dP.f(O, P = keys[i++], Properties[P]);
	  }return O;
	};

/***/ },
/* 125 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.14 / 15.2.3.14 Object.keys(O)
	var $keys = __webpack_require__(126),
	    enumBugKeys = __webpack_require__(136);
	
	module.exports = Object.keys || function keys(O) {
	  return $keys(O, enumBugKeys);
	};

/***/ },
/* 126 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var has = __webpack_require__(120),
	    toIObject = __webpack_require__(127),
	    arrayIndexOf = __webpack_require__(130)(false),
	    IE_PROTO = __webpack_require__(133)('IE_PROTO');
	
	module.exports = function (object, names) {
	  var O = toIObject(object),
	      i = 0,
	      result = [],
	      key;
	  for (key in O) {
	    if (key != IE_PROTO) has(O, key) && result.push(key);
	  } // Don't enum bug & hidden keys
	  while (names.length > i) {
	    if (has(O, key = names[i++])) {
	      ~arrayIndexOf(result, key) || result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 127 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// to indexed object, toObject with fallback for non-array-like ES3 strings
	var IObject = __webpack_require__(128),
	    defined = __webpack_require__(101);
	module.exports = function (it) {
	  return IObject(defined(it));
	};

/***/ },
/* 128 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var cof = __webpack_require__(129);
	module.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {
	  return cof(it) == 'String' ? it.split('') : Object(it);
	};

/***/ },
/* 129 */
/***/ function(module, exports) {

	"use strict";
	
	var toString = {}.toString;
	
	module.exports = function (it) {
	  return toString.call(it).slice(8, -1);
	};

/***/ },
/* 130 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// false -> Array#indexOf
	// true  -> Array#includes
	var toIObject = __webpack_require__(127),
	    toLength = __webpack_require__(131),
	    toIndex = __webpack_require__(132);
	module.exports = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIObject($this),
	        length = toLength(O.length),
	        index = toIndex(fromIndex, length),
	        value;
	    // Array#includes uses SameValueZero equality algorithm
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      if (value != value) return true;
	      // Array#toIndex ignores holes, Array#includes - not
	    } else for (; length > index; index++) {
	      if (IS_INCLUDES || index in O) {
	        if (O[index] === el) return IS_INCLUDES || index || 0;
	      }
	    }return !IS_INCLUDES && -1;
	  };
	};

/***/ },
/* 131 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.15 ToLength
	var toInteger = __webpack_require__(100),
	    min = Math.min;
	module.exports = function (it) {
	  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991
	};

/***/ },
/* 132 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var toInteger = __webpack_require__(100),
	    max = Math.max,
	    min = Math.min;
	module.exports = function (index, length) {
	  index = toInteger(index);
	  return index < 0 ? max(index + length, 0) : min(index, length);
	};

/***/ },
/* 133 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var shared = __webpack_require__(134)('keys'),
	    uid = __webpack_require__(135);
	module.exports = function (key) {
	  return shared[key] || (shared[key] = uid(key));
	};

/***/ },
/* 134 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(105),
	    SHARED = '__core-js_shared__',
	    store = global[SHARED] || (global[SHARED] = {});
	module.exports = function (key) {
	  return store[key] || (store[key] = {});
	};

/***/ },
/* 135 */
/***/ function(module, exports) {

	'use strict';
	
	var id = 0,
	    px = Math.random();
	module.exports = function (key) {
	  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));
	};

/***/ },
/* 136 */
/***/ function(module, exports) {

	'use strict';
	
	// IE 8- don't enum bug keys
	module.exports = 'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'.split(',');

/***/ },
/* 137 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	module.exports = __webpack_require__(105).document && document.documentElement;

/***/ },
/* 138 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var def = __webpack_require__(110).f,
	    has = __webpack_require__(120),
	    TAG = __webpack_require__(139)('toStringTag');
	
	module.exports = function (it, tag, stat) {
	  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });
	};

/***/ },
/* 139 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var store = __webpack_require__(134)('wks'),
	    uid = __webpack_require__(135),
	    Symbol = __webpack_require__(105).Symbol,
	    USE_SYMBOL = typeof Symbol == 'function';
	
	var $exports = module.exports = function (name) {
	  return store[name] || (store[name] = USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));
	};
	
	$exports.store = store;

/***/ },
/* 140 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)
	var has = __webpack_require__(120),
	    toObject = __webpack_require__(141),
	    IE_PROTO = __webpack_require__(133)('IE_PROTO'),
	    ObjectProto = Object.prototype;
	
	module.exports = Object.getPrototypeOf || function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  }return O instanceof Object ? ObjectProto : null;
	};

/***/ },
/* 141 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.1.13 ToObject(argument)
	var defined = __webpack_require__(101);
	module.exports = function (it) {
	  return Object(defined(it));
	};

/***/ },
/* 142 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(143);
	var global = __webpack_require__(105),
	    hide = __webpack_require__(109),
	    Iterators = __webpack_require__(121),
	    TO_STRING_TAG = __webpack_require__(139)('toStringTag');
	
	for (var collections = ['NodeList', 'DOMTokenList', 'MediaList', 'StyleSheetList', 'CSSRuleList'], i = 0; i < 5; i++) {
	  var NAME = collections[i],
	      Collection = global[NAME],
	      proto = Collection && Collection.prototype;
	  if (proto && !proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);
	  Iterators[NAME] = Iterators.Array;
	}

/***/ },
/* 143 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var addToUnscopables = __webpack_require__(144),
	    step = __webpack_require__(145),
	    Iterators = __webpack_require__(121),
	    toIObject = __webpack_require__(127);
	
	// 22.1.3.4 Array.prototype.entries()
	// 22.1.3.13 Array.prototype.keys()
	// 22.1.3.29 Array.prototype.values()
	// 22.1.3.30 Array.prototype[@@iterator]()
	module.exports = __webpack_require__(102)(Array, 'Array', function (iterated, kind) {
	  this._t = toIObject(iterated); // target
	  this._i = 0; // next index
	  this._k = kind; // kind
	  // 22.1.5.2.1 %ArrayIteratorPrototype%.next()
	}, function () {
	  var O = this._t,
	      kind = this._k,
	      index = this._i++;
	  if (!O || index >= O.length) {
	    this._t = undefined;
	    return step(1);
	  }
	  if (kind == 'keys') return step(0, index);
	  if (kind == 'values') return step(0, O[index]);
	  return step(0, [index, O[index]]);
	}, 'values');
	
	// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)
	Iterators.Arguments = Iterators.Array;
	
	addToUnscopables('keys');
	addToUnscopables('values');
	addToUnscopables('entries');

/***/ },
/* 144 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function () {/* empty */};

/***/ },
/* 145 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function (done, value) {
	  return { value: value, done: !!done };
	};

/***/ },
/* 146 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.f = __webpack_require__(139);

/***/ },
/* 147 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(148), __esModule: true };

/***/ },
/* 148 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(149);
	__webpack_require__(160);
	__webpack_require__(161);
	__webpack_require__(162);
	module.exports = __webpack_require__(106).Symbol;

/***/ },
/* 149 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	// ECMAScript 6 symbols shim
	
	var global = __webpack_require__(105),
	    has = __webpack_require__(120),
	    DESCRIPTORS = __webpack_require__(114),
	    $export = __webpack_require__(104),
	    redefine = __webpack_require__(119),
	    META = __webpack_require__(150).KEY,
	    $fails = __webpack_require__(115),
	    shared = __webpack_require__(134),
	    setToStringTag = __webpack_require__(138),
	    uid = __webpack_require__(135),
	    wks = __webpack_require__(139),
	    wksExt = __webpack_require__(146),
	    wksDefine = __webpack_require__(151),
	    keyOf = __webpack_require__(152),
	    enumKeys = __webpack_require__(153),
	    isArray = __webpack_require__(156),
	    anObject = __webpack_require__(111),
	    toIObject = __webpack_require__(127),
	    toPrimitive = __webpack_require__(117),
	    createDesc = __webpack_require__(118),
	    _create = __webpack_require__(123),
	    gOPNExt = __webpack_require__(157),
	    $GOPD = __webpack_require__(159),
	    $DP = __webpack_require__(110),
	    $keys = __webpack_require__(125),
	    gOPD = $GOPD.f,
	    dP = $DP.f,
	    gOPN = gOPNExt.f,
	    $Symbol = global.Symbol,
	    $JSON = global.JSON,
	    _stringify = $JSON && $JSON.stringify,
	    PROTOTYPE = 'prototype',
	    HIDDEN = wks('_hidden'),
	    TO_PRIMITIVE = wks('toPrimitive'),
	    isEnum = {}.propertyIsEnumerable,
	    SymbolRegistry = shared('symbol-registry'),
	    AllSymbols = shared('symbols'),
	    OPSymbols = shared('op-symbols'),
	    ObjectProto = Object[PROTOTYPE],
	    USE_NATIVE = typeof $Symbol == 'function',
	    QObject = global.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;
	
	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDesc = DESCRIPTORS && $fails(function () {
	  return _create(dP({}, 'a', {
	    get: function get() {
	      return dP(this, 'a', { value: 7 }).a;
	    }
	  })).a != 7;
	}) ? function (it, key, D) {
	  var protoDesc = gOPD(ObjectProto, key);
	  if (protoDesc) delete ObjectProto[key];
	  dP(it, key, D);
	  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
	} : dP;
	
	var wrap = function wrap(tag) {
	  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
	  sym._k = tag;
	  return sym;
	};
	
	var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return it instanceof $Symbol;
	};
	
	var $defineProperty = function defineProperty(it, key, D) {
	  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
	  anObject(it);
	  key = toPrimitive(key, true);
	  anObject(D);
	  if (has(AllSymbols, key)) {
	    if (!D.enumerable) {
	      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
	      it[HIDDEN][key] = true;
	    } else {
	      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
	      D = _create(D, { enumerable: createDesc(0, false) });
	    }return setSymbolDesc(it, key, D);
	  }return dP(it, key, D);
	};
	var $defineProperties = function defineProperties(it, P) {
	  anObject(it);
	  var keys = enumKeys(P = toIObject(P)),
	      i = 0,
	      l = keys.length,
	      key;
	  while (l > i) {
	    $defineProperty(it, key = keys[i++], P[key]);
	  }return it;
	};
	var $create = function create(it, P) {
	  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
	};
	var $propertyIsEnumerable = function propertyIsEnumerable(key) {
	  var E = isEnum.call(this, key = toPrimitive(key, true));
	  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
	  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
	};
	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
	  it = toIObject(it);
	  key = toPrimitive(key, true);
	  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
	  var D = gOPD(it, key);
	  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
	  return D;
	};
	var $getOwnPropertyNames = function getOwnPropertyNames(it) {
	  var names = gOPN(toIObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) {
	    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
	  }return result;
	};
	var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
	  var IS_OP = it === ObjectProto,
	      names = gOPN(IS_OP ? OPSymbols : toIObject(it)),
	      result = [],
	      i = 0,
	      key;
	  while (names.length > i) {
	    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
	  }return result;
	};
	
	// 19.4.1.1 Symbol([description])
	if (!USE_NATIVE) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
	    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
	    var $set = function $set(value) {
	      if (this === ObjectProto) $set.call(OPSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDesc(this, tag, createDesc(1, value));
	    };
	    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
	    return wrap(tag);
	  };
	  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
	    return this._k;
	  });
	
	  $GOPD.f = $getOwnPropertyDescriptor;
	  $DP.f = $defineProperty;
	  __webpack_require__(158).f = gOPNExt.f = $getOwnPropertyNames;
	  __webpack_require__(155).f = $propertyIsEnumerable;
	  __webpack_require__(154).f = $getOwnPropertySymbols;
	
	  if (DESCRIPTORS && !__webpack_require__(103)) {
	    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
	  }
	
	  wksExt.f = function (name) {
	    return wrap(wks(name));
	  };
	}
	
	$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });
	
	for (var symbols =
	// 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
	'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'.split(','), i = 0; symbols.length > i;) {
	  wks(symbols[i++]);
	}for (var symbols = $keys(wks.store), i = 0; symbols.length > i;) {
	  wksDefine(symbols[i++]);
	}$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
	  // 19.4.2.1 Symbol.for(key)
	  'for': function _for(key) {
	    return has(SymbolRegistry, key += '') ? SymbolRegistry[key] : SymbolRegistry[key] = $Symbol(key);
	  },
	  // 19.4.2.5 Symbol.keyFor(sym)
	  keyFor: function keyFor(key) {
	    if (isSymbol(key)) return keyOf(SymbolRegistry, key);
	    throw TypeError(key + ' is not a symbol!');
	  },
	  useSetter: function useSetter() {
	    setter = true;
	  },
	  useSimple: function useSimple() {
	    setter = false;
	  }
	});
	
	$export($export.S + $export.F * !USE_NATIVE, 'Object', {
	  // 19.1.2.2 Object.create(O [, Properties])
	  create: $create,
	  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
	  defineProperty: $defineProperty,
	  // 19.1.2.3 Object.defineProperties(O, Properties)
	  defineProperties: $defineProperties,
	  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
	  // 19.1.2.7 Object.getOwnPropertyNames(O)
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // 19.1.2.8 Object.getOwnPropertySymbols(O)
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});
	
	// 24.3.2 JSON.stringify(value [, replacer [, space]])
	$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
	  var S = $Symbol();
	  // MS Edge converts symbol values to JSON as {}
	  // WebKit converts symbol values to JSON as null
	  // V8 throws on boxed symbols
	  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
	})), 'JSON', {
	  stringify: function stringify(it) {
	    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	    var args = [it],
	        i = 1,
	        replacer,
	        $replacer;
	    while (arguments.length > i) {
	      args.push(arguments[i++]);
	    }replacer = args[1];
	    if (typeof replacer == 'function') $replacer = replacer;
	    if ($replacer || !isArray(replacer)) replacer = function replacer(key, value) {
	      if ($replacer) value = $replacer.call(this, key, value);
	      if (!isSymbol(value)) return value;
	    };
	    args[1] = replacer;
	    return _stringify.apply($JSON, args);
	  }
	});
	
	// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
	$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(109)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
	// 19.4.3.5 Symbol.prototype[@@toStringTag]
	setToStringTag($Symbol, 'Symbol');
	// 20.2.1.9 Math[@@toStringTag]
	setToStringTag(Math, 'Math', true);
	// 24.3.3 JSON[@@toStringTag]
	setToStringTag(global.JSON, 'JSON', true);

/***/ },
/* 150 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var META = __webpack_require__(135)('meta'),
	    isObject = __webpack_require__(112),
	    has = __webpack_require__(120),
	    setDesc = __webpack_require__(110).f,
	    id = 0;
	var isExtensible = Object.isExtensible || function () {
	  return true;
	};
	var FREEZE = !__webpack_require__(115)(function () {
	  return isExtensible(Object.preventExtensions({}));
	});
	var setMeta = function setMeta(it) {
	  setDesc(it, META, { value: {
	      i: 'O' + ++id, // object ID
	      w: {} // weak collections IDs
	    } });
	};
	var fastKey = function fastKey(it, create) {
	  // return primitive with prefix
	  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return 'F';
	    // not necessary to add metadata
	    if (!create) return 'E';
	    // add missing metadata
	    setMeta(it);
	    // return object ID
	  }return it[META].i;
	};
	var getWeak = function getWeak(it, create) {
	  if (!has(it, META)) {
	    // can't set metadata to uncaught frozen object
	    if (!isExtensible(it)) return true;
	    // not necessary to add metadata
	    if (!create) return false;
	    // add missing metadata
	    setMeta(it);
	    // return hash weak collections IDs
	  }return it[META].w;
	};
	// add metadata on freeze-family methods calling
	var onFreeze = function onFreeze(it) {
	  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
	  return it;
	};
	var meta = module.exports = {
	  KEY: META,
	  NEED: false,
	  fastKey: fastKey,
	  getWeak: getWeak,
	  onFreeze: onFreeze
	};

/***/ },
/* 151 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var global = __webpack_require__(105),
	    core = __webpack_require__(106),
	    LIBRARY = __webpack_require__(103),
	    wksExt = __webpack_require__(146),
	    defineProperty = __webpack_require__(110).f;
	module.exports = function (name) {
	  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
	  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
	};

/***/ },
/* 152 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var getKeys = __webpack_require__(125),
	    toIObject = __webpack_require__(127);
	module.exports = function (object, el) {
	  var O = toIObject(object),
	      keys = getKeys(O),
	      length = keys.length,
	      index = 0,
	      key;
	  while (length > index) {
	    if (O[key = keys[index++]] === el) return key;
	  }
	};

/***/ },
/* 153 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// all enumerable object keys, includes symbols
	var getKeys = __webpack_require__(125),
	    gOPS = __webpack_require__(154),
	    pIE = __webpack_require__(155);
	module.exports = function (it) {
	  var result = getKeys(it),
	      getSymbols = gOPS.f;
	  if (getSymbols) {
	    var symbols = getSymbols(it),
	        isEnum = pIE.f,
	        i = 0,
	        key;
	    while (symbols.length > i) {
	      if (isEnum.call(it, key = symbols[i++])) result.push(key);
	    }
	  }return result;
	};

/***/ },
/* 154 */
/***/ function(module, exports) {

	"use strict";
	
	exports.f = Object.getOwnPropertySymbols;

/***/ },
/* 155 */
/***/ function(module, exports) {

	"use strict";
	
	exports.f = {}.propertyIsEnumerable;

/***/ },
/* 156 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 7.2.2 IsArray(argument)
	var cof = __webpack_require__(129);
	module.exports = Array.isArray || function isArray(arg) {
	  return cof(arg) == 'Array';
	};

/***/ },
/* 157 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var toIObject = __webpack_require__(127),
	    gOPN = __webpack_require__(158).f,
	    toString = {}.toString;
	
	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
	
	var getWindowNames = function getWindowNames(it) {
	  try {
	    return gOPN(it);
	  } catch (e) {
	    return windowNames.slice();
	  }
	};
	
	module.exports.f = function getOwnPropertyNames(it) {
	  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
	};

/***/ },
/* 158 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
	var $keys = __webpack_require__(126),
	    hiddenKeys = __webpack_require__(136).concat('length', 'prototype');
	
	exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return $keys(O, hiddenKeys);
	};

/***/ },
/* 159 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var pIE = __webpack_require__(155),
	    createDesc = __webpack_require__(118),
	    toIObject = __webpack_require__(127),
	    toPrimitive = __webpack_require__(117),
	    has = __webpack_require__(120),
	    IE8_DOM_DEFINE = __webpack_require__(113),
	    gOPD = Object.getOwnPropertyDescriptor;
	
	exports.f = __webpack_require__(114) ? gOPD : function getOwnPropertyDescriptor(O, P) {
	  O = toIObject(O);
	  P = toPrimitive(P, true);
	  if (IE8_DOM_DEFINE) try {
	    return gOPD(O, P);
	  } catch (e) {/* empty */}
	  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
	};

/***/ },
/* 160 */
/***/ function(module, exports) {

	"use strict";

/***/ },
/* 161 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(151)('asyncIterator');

/***/ },
/* 162 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(151)('observable');

/***/ },
/* 163 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _setPrototypeOf = __webpack_require__(164);
	
	var _setPrototypeOf2 = _interopRequireDefault(_setPrototypeOf);
	
	var _create = __webpack_require__(168);
	
	var _create2 = _interopRequireDefault(_create);
	
	var _typeof2 = __webpack_require__(95);
	
	var _typeof3 = _interopRequireDefault(_typeof2);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = function (subClass, superClass) {
	  if (typeof superClass !== "function" && superClass !== null) {
	    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : (0, _typeof3.default)(superClass)));
	  }
	
	  subClass.prototype = (0, _create2.default)(superClass && superClass.prototype, {
	    constructor: {
	      value: subClass,
	      enumerable: false,
	      writable: true,
	      configurable: true
	    }
	  });
	  if (superClass) _setPrototypeOf2.default ? (0, _setPrototypeOf2.default)(subClass, superClass) : subClass.__proto__ = superClass;
	};

/***/ },
/* 164 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(165), __esModule: true };

/***/ },
/* 165 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(166);
	module.exports = __webpack_require__(106).Object.setPrototypeOf;

/***/ },
/* 166 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// 19.1.3.19 Object.setPrototypeOf(O, proto)
	var $export = __webpack_require__(104);
	$export($export.S, 'Object', { setPrototypeOf: __webpack_require__(167).set });

/***/ },
/* 167 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var isObject = __webpack_require__(112),
	    anObject = __webpack_require__(111);
	var check = function check(O, proto) {
	  anObject(O);
	  if (!isObject(proto) && proto !== null) throw TypeError(proto + ": can't set as prototype!");
	};
	module.exports = {
	  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line
	  function (test, buggy, set) {
	    try {
	      set = __webpack_require__(107)(Function.call, __webpack_require__(159).f(Object.prototype, '__proto__').set, 2);
	      set(test, []);
	      buggy = !(test instanceof Array);
	    } catch (e) {
	      buggy = true;
	    }
	    return function setPrototypeOf(O, proto) {
	      check(O, proto);
	      if (buggy) O.__proto__ = proto;else set(O, proto);
	      return O;
	    };
	  }({}, false) : undefined),
	  check: check
	};

/***/ },
/* 168 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(169), __esModule: true };

/***/ },
/* 169 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(170);
	var $Object = __webpack_require__(106).Object;
	module.exports = function create(P, D) {
	  return $Object.create(P, D);
	};

/***/ },
/* 170 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(104);
	// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
	$export($export.S, 'Object', { create: __webpack_require__(123) });

/***/ },
/* 171 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.Mutator = __webpack_require__(172).Mutator;
	exports.Defaults = __webpack_require__(173).Defaults;
	exports.Prototype = __webpack_require__(174).Prototype;
	exports.PlannerWrite = __webpack_require__(175).PlannerWrite;
	
	exports.Planner = __webpack_require__(86).Planner;
	exports.Environment = __webpack_require__(176).Environment;
	
	exports.Events = __webpack_require__(85).Events;
	exports.ValueProxy = __webpack_require__(84).ValueProxy;
	
	exports.Model = __webpack_require__(178).Model;
	exports.Collection = __webpack_require__(179).Collection;
	exports.CollectionLens = __webpack_require__(184).CollectionLens;
	
	exports.Component = __webpack_require__(185).Component;
	exports.TextComponent = __webpack_require__(187).TextComponent;
	exports.CollectionComponent = __webpack_require__(189).CollectionComponent;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9pbmRleC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFFBQVEsT0FBUixHQUFrQixRQUFRLHNCQUFSLEVBQWdDLE9BQWxEO0FBQ0EsUUFBUSxRQUFSLEdBQW1CLFFBQVEsdUJBQVIsRUFBaUMsUUFBcEQ7QUFDQSxRQUFRLFNBQVIsR0FBb0IsUUFBUSx3QkFBUixFQUFrQyxTQUF0RDtBQUNBLFFBQVEsWUFBUixHQUF1QixRQUFRLDJCQUFSLEVBQXFDLFlBQTVEOztBQUVBLFFBQVEsT0FBUixHQUFrQixRQUFRLGdCQUFSLEVBQTBCLE9BQTVDO0FBQ0EsUUFBUSxXQUFSLEdBQXNCLFFBQVEsZUFBUixFQUF5QixXQUEvQzs7QUFFQSxRQUFRLE1BQVIsR0FBaUIsUUFBUSxlQUFSLEVBQXlCLE1BQTFDO0FBQ0EsUUFBUSxVQUFSLEdBQXFCLFFBQVEsbUJBQVIsRUFBNkIsVUFBbEQ7O0FBRUEsUUFBUSxLQUFSLEdBQWdCLFFBQVEsY0FBUixFQUF3QixLQUF4QztBQUNBLFFBQVEsVUFBUixHQUFxQixRQUFRLG1CQUFSLEVBQTZCLFVBQWxEO0FBQ0EsUUFBUSxjQUFSLEdBQXlCLFFBQVEsdUJBQVIsRUFBaUMsY0FBMUQ7O0FBRUEsUUFBUSxTQUFSLEdBQW9CLFFBQVEsd0JBQVIsRUFBa0MsU0FBdEQ7QUFDQSxRQUFRLGFBQVIsR0FBd0IsUUFBUSw0QkFBUixFQUFzQyxhQUE5RDtBQUNBLFFBQVEsbUJBQVIsR0FBOEIsUUFBUSxrQ0FBUixFQUE0QyxtQkFBMUUiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzLk11dGF0b3IgPSByZXF1aXJlKCcuL0RlY29yYXRvcnMvTXV0YXRvcicpLk11dGF0b3I7XG5leHBvcnRzLkRlZmF1bHRzID0gcmVxdWlyZSgnLi9EZWNvcmF0b3JzL0RlZmF1bHRzJykuRGVmYXVsdHM7XG5leHBvcnRzLlByb3RvdHlwZSA9IHJlcXVpcmUoJy4vRGVjb3JhdG9ycy9Qcm90b3R5cGUnKS5Qcm90b3R5cGU7XG5leHBvcnRzLlBsYW5uZXJXcml0ZSA9IHJlcXVpcmUoJy4vRGVjb3JhdG9ycy9QbGFubmVyV3JpdGUnKS5QbGFubmVyV3JpdGU7XG5cbmV4cG9ydHMuUGxhbm5lciA9IHJlcXVpcmUoJy4vRGF0YS9QbGFubmVyJykuUGxhbm5lcjtcbmV4cG9ydHMuRW52aXJvbm1lbnQgPSByZXF1aXJlKCcuL0Vudmlyb25tZW50JykuRW52aXJvbm1lbnQ7XG5cbmV4cG9ydHMuRXZlbnRzID0gcmVxdWlyZSgnLi9EYXRhL0V2ZW50cycpLkV2ZW50cztcbmV4cG9ydHMuVmFsdWVQcm94eSA9IHJlcXVpcmUoJy4vRGF0YS9WYWx1ZVByb3h5JykuVmFsdWVQcm94eTtcblxuZXhwb3J0cy5Nb2RlbCA9IHJlcXVpcmUoJy4vRGF0YS9Nb2RlbCcpLk1vZGVsO1xuZXhwb3J0cy5Db2xsZWN0aW9uID0gcmVxdWlyZSgnLi9EYXRhL0NvbGxlY3Rpb24nKS5Db2xsZWN0aW9uO1xuZXhwb3J0cy5Db2xsZWN0aW9uTGVucyA9IHJlcXVpcmUoJy4vRGF0YS9Db2xsZWN0aW9uTGVucycpLkNvbGxlY3Rpb25MZW5zO1xuXG5leHBvcnRzLkNvbXBvbmVudCA9IHJlcXVpcmUoJy4vQ29tcG9uZW50cy9Db21wb25lbnQnKS5Db21wb25lbnQ7XG5leHBvcnRzLlRleHRDb21wb25lbnQgPSByZXF1aXJlKCcuL0NvbXBvbmVudHMvVGV4dENvbXBvbmVudCcpLlRleHRDb21wb25lbnQ7XG5leHBvcnRzLkNvbGxlY3Rpb25Db21wb25lbnQgPSByZXF1aXJlKCcuL0NvbXBvbmVudHMvQ29sbGVjdGlvbkNvbXBvbmVudCcpLkNvbGxlY3Rpb25Db21wb25lbnQ7XG4iXX0=

/***/ },
/* 172 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Mutator = Mutator;
	
	var _ValueProxy = __webpack_require__(84);
	
	function Mutator(params) {
	    var _ref = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	    var before = _ref.before;
	    var after = _ref.after;
	
	    return function (Class, name, descriptor) {
	        var mutate = descriptor.value;
	
	        return {
	            get: function get() {
	                var _this = this;
	
	                var proxy = void 0;
	
	                var toProxy = function toProxy(str) {
	                    var parts = str.split('.'),
	                        proxy = _this.proxy(parts.shift());
	
	                    for (var index = 0; index < parts.length; index++) {
	                        var part = parts[index];
	
	                        proxy = proxy.proxy(part);
	                    }
	
	                    return proxy;
	                };
	
	                if (Array.isArray(params)) {
	                    proxy = _ValueProxy.ValueProxy.all(params.map(function (key) {
	                        return toProxy(key);
	                    }));
	                } else {
	                    proxy = toProxy(params);
	                }
	
	                if (before) {
	                    proxy = before.call(this, proxy);
	                }
	
	                proxy = proxy.pipe(function (value) {
	                    return mutate.call(_this, value);
	                });
	
	                if (after) {
	                    proxy = after.call(this, proxy);
	                }
	
	                Object.defineProperty(this, name, {
	                    value: proxy
	                });
	
	                return proxy;
	            }
	        };
	    };
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EZWNvcmF0b3JzL011dGF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O1FBRWdCLE8sR0FBQSxPOztBQUZoQjs7QUFFTyxTQUFTLE9BQVQsQ0FBaUIsTUFBakIsRUFBK0M7QUFBQSxxRUFBSixFQUFJOztBQUFBLFFBQXJCLE1BQXFCLFFBQXJCLE1BQXFCO0FBQUEsUUFBYixLQUFhLFFBQWIsS0FBYTs7QUFDbEQsV0FBTyxVQUFTLEtBQVQsRUFBZ0IsSUFBaEIsRUFBc0IsVUFBdEIsRUFBa0M7QUFDckMsWUFBSSxTQUFTLFdBQVcsS0FBeEI7O0FBRUEsZUFBTztBQUNILGVBREcsaUJBQ0c7QUFBQTs7QUFDRixvQkFBSSxjQUFKOztBQUVBLG9CQUFJLFVBQVUsU0FBVixPQUFVLE1BQU87QUFDakIsd0JBQUksUUFBUSxJQUFJLEtBQUosQ0FBVSxHQUFWLENBQVo7QUFBQSx3QkFDSSxRQUFRLE1BQUssS0FBTCxDQUFXLE1BQU0sS0FBTixFQUFYLENBRFo7O0FBR0EseUJBQUssSUFBSSxRQUFRLENBQWpCLEVBQW9CLFFBQVEsTUFBTSxNQUFsQyxFQUEwQyxPQUExQyxFQUFtRDtBQUMvQyw0QkFBSSxPQUFPLE1BQU0sS0FBTixDQUFYOztBQUVBLGdDQUFRLE1BQU0sS0FBTixDQUFZLElBQVosQ0FBUjtBQUNIOztBQUVELDJCQUFPLEtBQVA7QUFDSCxpQkFYRDs7QUFhQSxvQkFBSSxNQUFNLE9BQU4sQ0FBYyxNQUFkLENBQUosRUFBMkI7QUFDdkIsNEJBQVEsdUJBQVcsR0FBWCxDQUFlLE9BQU8sR0FBUCxDQUFXO0FBQUEsK0JBQU8sUUFBUSxHQUFSLENBQVA7QUFBQSxxQkFBWCxDQUFmLENBQVI7QUFDSCxpQkFGRCxNQUVPO0FBQ0gsNEJBQVEsUUFBUSxNQUFSLENBQVI7QUFDSDs7QUFFRCxvQkFBSSxNQUFKLEVBQVk7QUFDUiw0QkFBUSxPQUFPLElBQVAsQ0FBWSxJQUFaLEVBQWtCLEtBQWxCLENBQVI7QUFDSDs7QUFFRCx3QkFBUSxNQUFNLElBQU4sQ0FBVyxpQkFBUztBQUN4QiwyQkFBTyxPQUFPLElBQVAsUUFBa0IsS0FBbEIsQ0FBUDtBQUNILGlCQUZPLENBQVI7O0FBSUEsb0JBQUksS0FBSixFQUFXO0FBQ1AsNEJBQVEsTUFBTSxJQUFOLENBQVcsSUFBWCxFQUFpQixLQUFqQixDQUFSO0FBQ0g7O0FBRUQsdUJBQU8sY0FBUCxDQUFzQixJQUF0QixFQUE0QixJQUE1QixFQUFrQztBQUM5QiwyQkFBTztBQUR1QixpQkFBbEM7O0FBSUEsdUJBQU8sS0FBUDtBQUNIO0FBeENFLFNBQVA7QUEwQ0gsS0E3Q0Q7QUE4Q0giLCJmaWxlIjoiTXV0YXRvci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmFsdWVQcm94eX0gZnJvbSAnLi4vRGF0YS9WYWx1ZVByb3h5JztcblxuZXhwb3J0IGZ1bmN0aW9uIE11dGF0b3IocGFyYW1zLCB7YmVmb3JlLCBhZnRlcn0gPSB7fSkge1xuICAgIHJldHVybiBmdW5jdGlvbihDbGFzcywgbmFtZSwgZGVzY3JpcHRvcikge1xuICAgICAgICBsZXQgbXV0YXRlID0gZGVzY3JpcHRvci52YWx1ZTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIGxldCBwcm94eTtcblxuICAgICAgICAgICAgICAgIGxldCB0b1Byb3h5ID0gc3RyID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhcnRzID0gc3RyLnNwbGl0KCcuJyksXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm94eSA9IHRoaXMucHJveHkocGFydHMuc2hpZnQoKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IHBhcnRzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcnQgPSBwYXJ0c1tpbmRleF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5ID0gcHJveHkucHJveHkocGFydCk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJveHk7XG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhcmFtcykpIHtcbiAgICAgICAgICAgICAgICAgICAgcHJveHkgPSBWYWx1ZVByb3h5LmFsbChwYXJhbXMubWFwKGtleSA9PiB0b1Byb3h5KGtleSkpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwcm94eSA9IHRvUHJveHkocGFyYW1zKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBpZiAoYmVmb3JlKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3h5ID0gYmVmb3JlLmNhbGwodGhpcywgcHJveHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHByb3h5ID0gcHJveHkucGlwZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtdXRhdGUuY2FsbCh0aGlzLCB2YWx1ZSlcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGlmIChhZnRlcikge1xuICAgICAgICAgICAgICAgICAgICBwcm94eSA9IGFmdGVyLmNhbGwodGhpcywgcHJveHkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBuYW1lLCB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBwcm94eVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb3h5O1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn0iXX0=

/***/ },
/* 173 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.Defaults = Defaults;
	/**
	 * @param {{styles: {}}} options
	 * @returns {Function}
	 */
	function Defaults(options) {
	    return function (Class) {
	        Object.keys(options).forEach(function (key) {
	            Class.prototype[key] = options[key];
	
	            if (key === 'styles' && !('className' in Class.prototype)) {
	                Class.prototype.className = options[key].root;
	            } else if (key === 'events') {
	                var keys = Object.keys(options[key]);
	
	                var _loop = function _loop(index) {
	                    var eventName = keys[index],
	                        method = options[key][eventName];
	
	                    options[key][eventName] = function () {
	                        return this[method].apply(this, arguments);
	                    };
	                };
	
	                for (var index = 0; index < keys.length; index++) {
	                    _loop(index);
	                }
	            }
	        });
	    };
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EZWNvcmF0b3JzL0RlZmF1bHRzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztRQUlnQixRLEdBQUEsUTtBQUpoQjs7OztBQUlPLFNBQVMsUUFBVCxDQUFrQixPQUFsQixFQUEyQjtBQUM5QixXQUFPLFVBQVUsS0FBVixFQUFpQjtBQUNwQixlQUFPLElBQVAsQ0FBWSxPQUFaLEVBQXFCLE9BQXJCLENBQTZCLGVBQU87QUFDaEMsa0JBQU0sU0FBTixDQUFnQixHQUFoQixJQUF1QixRQUFRLEdBQVIsQ0FBdkI7O0FBRUEsZ0JBQUksUUFBUSxRQUFSLElBQW9CLEVBQUUsZUFBZSxNQUFNLFNBQXZCLENBQXhCLEVBQTJEO0FBQ3ZELHNCQUFNLFNBQU4sQ0FBZ0IsU0FBaEIsR0FBNEIsUUFBUSxHQUFSLEVBQWEsSUFBekM7QUFDSCxhQUZELE1BRU8sSUFBSSxRQUFRLFFBQVosRUFBc0I7QUFDekIsb0JBQUksT0FBTyxPQUFPLElBQVAsQ0FBWSxRQUFRLEdBQVIsQ0FBWixDQUFYOztBQUR5QiwyQ0FHaEIsS0FIZ0I7QUFJckIsd0JBQUksWUFBWSxLQUFLLEtBQUwsQ0FBaEI7QUFBQSx3QkFDSSxTQUFTLFFBQVEsR0FBUixFQUFhLFNBQWIsQ0FEYjs7QUFHQSw0QkFBUSxHQUFSLEVBQWEsU0FBYixJQUEwQixZQUFrQjtBQUN4QywrQkFBTyxLQUFLLE1BQUwsd0JBQVA7QUFDSCxxQkFGRDtBQVBxQjs7QUFHekIscUJBQUssSUFBSSxRQUFRLENBQWpCLEVBQW9CLFFBQVEsS0FBSyxNQUFqQyxFQUF5QyxPQUF6QyxFQUFrRDtBQUFBLDBCQUF6QyxLQUF5QztBQU9qRDtBQUNKO0FBQ0osU0FqQkQ7QUFrQkgsS0FuQkQ7QUFvQkgiLCJmaWxlIjoiRGVmYXVsdHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBwYXJhbSB7e3N0eWxlczoge319fSBvcHRpb25zXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBEZWZhdWx0cyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChDbGFzcykge1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBDbGFzcy5wcm90b3R5cGVba2V5XSA9IG9wdGlvbnNba2V5XTtcblxuICAgICAgICAgICAgaWYgKGtleSA9PT0gJ3N0eWxlcycgJiYgISgnY2xhc3NOYW1lJyBpbiBDbGFzcy5wcm90b3R5cGUpKSB7XG4gICAgICAgICAgICAgICAgQ2xhc3MucHJvdG90eXBlLmNsYXNzTmFtZSA9IG9wdGlvbnNba2V5XS5yb290O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdldmVudHMnKSB7XG4gICAgICAgICAgICAgICAgbGV0IGtleXMgPSBPYmplY3Qua2V5cyhvcHRpb25zW2tleV0pO1xuXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGtleXMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGxldCBldmVudE5hbWUgPSBrZXlzW2luZGV4XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZCA9IG9wdGlvbnNba2V5XVtldmVudE5hbWVdO1xuXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnNba2V5XVtldmVudE5hbWVdID0gZnVuY3Rpb24oLi4uYXJncykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbbWV0aG9kXSguLi5hcmdzKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufSJdfQ==

/***/ },
/* 174 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.Prototype = Prototype;
	function Prototype(obj) {
	    return function (Class) {
	        Object.assign(Class.prototype, obj);
	    };
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EZWNvcmF0b3JzL1Byb3RvdHlwZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7UUFBZ0IsUyxHQUFBLFM7QUFBVCxTQUFTLFNBQVQsQ0FBbUIsR0FBbkIsRUFBd0I7QUFDM0IsV0FBTyxVQUFVLEtBQVYsRUFBaUI7QUFDcEIsZUFBTyxNQUFQLENBQWMsTUFBTSxTQUFwQixFQUErQixHQUEvQjtBQUNILEtBRkQ7QUFHSCIsImZpbGUiOiJQcm90b3R5cGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gUHJvdG90eXBlKG9iaikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoQ2xhc3MpIHtcbiAgICAgICAgT2JqZWN0LmFzc2lnbihDbGFzcy5wcm90b3R5cGUsIG9iaik7XG4gICAgfVxufSJdfQ==

/***/ },
/* 175 */
/***/ function(module, exports) {

	"use strict";
	
	exports.__esModule = true;
	exports.PlannerWrite = PlannerWrite;
	function PlannerWrite() {
	    return function (proto, name, desc) {
	        return {
	            value: function value() {
	                for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	                    args[_key] = arguments[_key];
	                }
	
	                var func = desc.value.bind(this),
	                    atom = this.env.planner.atom();
	
	                var value = function value() {
	                    for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
	                        args[_key2] = arguments[_key2];
	                    }
	
	                    atom.commit(function () {
	                        return func.apply(undefined, args);
	                    });
	                };
	
	                Object.defineProperty(this, name, { value: value });
	
	                return value.apply(this, args);
	            }
	        };
	    };
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EZWNvcmF0b3JzL1BsYW5uZXJXcml0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7UUFBZ0IsWSxHQUFBLFk7QUFBVCxTQUFTLFlBQVQsR0FBd0I7QUFDM0IsV0FBTyxVQUFTLEtBQVQsRUFBZ0IsSUFBaEIsRUFBc0IsSUFBdEIsRUFBNEI7QUFDL0IsZUFBTztBQUNILGlCQURHLG1CQUNZO0FBQUEsa0RBQU4sSUFBTTtBQUFOLHdCQUFNO0FBQUE7O0FBQ1gsb0JBQUksT0FBTyxLQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLElBQWhCLENBQVg7QUFBQSxvQkFDSSxPQUFPLEtBQUssR0FBTCxDQUFTLE9BQVQsQ0FBaUIsSUFBakIsRUFEWDs7QUFHQSxvQkFBSSxRQUFRLFNBQVIsS0FBUSxHQUFhO0FBQUEsdURBQVQsSUFBUztBQUFULDRCQUFTO0FBQUE7O0FBQ3JCLHlCQUFLLE1BQUwsQ0FBWTtBQUFBLCtCQUFNLHNCQUFRLElBQVIsQ0FBTjtBQUFBLHFCQUFaO0FBQ0gsaUJBRkQ7O0FBSUEsdUJBQU8sY0FBUCxDQUFzQixJQUF0QixFQUE0QixJQUE1QixFQUFrQyxFQUFDLFlBQUQsRUFBbEM7O0FBRUEsdUJBQU8sTUFBTSxLQUFOLENBQVksSUFBWixFQUFrQixJQUFsQixDQUFQO0FBQ0g7QUFaRSxTQUFQO0FBY0gsS0FmRDtBQWdCSCIsImZpbGUiOiJQbGFubmVyV3JpdGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gUGxhbm5lcldyaXRlKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihwcm90bywgbmFtZSwgZGVzYykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWUoLi4uYXJncykge1xuICAgICAgICAgICAgICAgIGxldCBmdW5jID0gZGVzYy52YWx1ZS5iaW5kKHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICBhdG9tID0gdGhpcy5lbnYucGxhbm5lci5hdG9tKCk7XG5cbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSAoLi4uYXJncykgPT4ge1xuICAgICAgICAgICAgICAgICAgICBhdG9tLmNvbW1pdCgoKSA9PiBmdW5jKC4uLmFyZ3MpKTtcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIG5hbWUsIHt2YWx1ZX0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlLmFwcGx5KHRoaXMsIGFyZ3MpXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxufSJdfQ==

/***/ },
/* 176 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Environment = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _Planner = __webpack_require__(86);
	
	var _DomWrapper = __webpack_require__(177);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Environment = exports.Environment = function () {
	
	    /**
	     * @param {{renderer: Renderer}} options
	     */
	    function Environment() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	        (0, _classCallCheck3.default)(this, Environment);
	
	        this.isBrowser = typeof window === 'object';
	        this.isServer = !this.isBrowser;
	
	        Object.assign(this, options);
	
	        if (!this.planner) {
	            this.planner = _Planner.Planner.getInstance();
	        }
	
	        if (!this.window) {
	            this.window = new _DomWrapper.DomWrapper(this.isBrowser ? window : null);
	        }
	
	        if (!this.document) {
	            this.document = new _DomWrapper.DomWrapper(this.isBrowser ? document : null);
	        }
	
	        if (!this.body) {
	            this.body = new _DomWrapper.DomWrapper(this.isBrowser ? document.body : null);
	        }
	
	        this._promises = [];
	    }
	
	    /**
	     * @param {AbstractComponent} component
	     * @param {Element} [element]
	     */
	
	
	    Environment.prototype.render = function render(component, element) {
	        component.setEnv(this);
	        component.render(element);
	
	        return component.getElement();
	    };
	
	    /**
	     * @param {Promise} promise
	     */
	
	
	    Environment.prototype.awaitPromise = function awaitPromise(promise) {
	        this._promises.push(promise);
	    };
	
	    /**
	     * Wait for server rendering, if someone is wait rendering
	     * 
	     * @returns {Promise}
	     */
	
	
	    Environment.prototype.async = function async() {
	        var promises = this._promises;
	        this._promises = [];
	
	        return Promise.all(promises);
	    };
	
	    return Environment;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi9FbnZpcm9ubWVudC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztJQUVhLFcsV0FBQSxXOztBQUVUOzs7QUFHQSwyQkFBMEI7QUFBQSxZQUFkLE9BQWMseURBQUosRUFBSTtBQUFBOztBQUN0QixhQUFLLFNBQUwsR0FBaUIsT0FBTyxNQUFQLEtBQWtCLFFBQW5DO0FBQ0EsYUFBSyxRQUFMLEdBQWdCLENBQUMsS0FBSyxTQUF0Qjs7QUFFQSxlQUFPLE1BQVAsQ0FBYyxJQUFkLEVBQW9CLE9BQXBCOztBQUVBLFlBQUksQ0FBQyxLQUFLLE9BQVYsRUFBbUI7QUFDZixpQkFBSyxPQUFMLEdBQWUsaUJBQVEsV0FBUixFQUFmO0FBQ0g7O0FBRUQsWUFBSSxDQUFDLEtBQUssTUFBVixFQUFrQjtBQUNkLGlCQUFLLE1BQUwsR0FBYywyQkFBZSxLQUFLLFNBQUwsR0FBaUIsTUFBakIsR0FBMEIsSUFBekMsQ0FBZDtBQUNIOztBQUVELFlBQUksQ0FBQyxLQUFLLFFBQVYsRUFBb0I7QUFDaEIsaUJBQUssUUFBTCxHQUFnQiwyQkFBZSxLQUFLLFNBQUwsR0FBaUIsUUFBakIsR0FBNEIsSUFBM0MsQ0FBaEI7QUFDSDs7QUFFRCxZQUFJLENBQUMsS0FBSyxJQUFWLEVBQWdCO0FBQ1osaUJBQUssSUFBTCxHQUFZLDJCQUFlLEtBQUssU0FBTCxHQUFpQixTQUFTLElBQTFCLEdBQWlDLElBQWhELENBQVo7QUFDSDs7QUFFRCxhQUFLLFNBQUwsR0FBaUIsRUFBakI7QUFDSDs7QUFFRDs7Ozs7OzBCQUlBLE0sbUJBQU8sUyxFQUFXLE8sRUFBUztBQUN2QixrQkFBVSxNQUFWLENBQWlCLElBQWpCO0FBQ0Esa0JBQVUsTUFBVixDQUFpQixPQUFqQjs7QUFFQSxlQUFPLFVBQVUsVUFBVixFQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7MEJBR0EsWSx5QkFBYSxPLEVBQVM7QUFDbEIsYUFBSyxTQUFMLENBQWUsSUFBZixDQUFvQixPQUFwQjtBQUNILEs7O0FBRUQ7Ozs7Ozs7MEJBS0EsSyxvQkFBUTtBQUNKLFlBQUksV0FBVyxLQUFLLFNBQXBCO0FBQ0EsYUFBSyxTQUFMLEdBQWlCLEVBQWpCOztBQUVBLGVBQU8sUUFBUSxHQUFSLENBQVksUUFBWixDQUFQO0FBQ0gsSyIsImZpbGUiOiJFbnZpcm9ubWVudC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7UGxhbm5lcn0gZnJvbSAnLi9EYXRhL1BsYW5uZXInO1xuaW1wb3J0IHtEb21XcmFwcGVyfSBmcm9tICcuL0NvbXBvbmVudHMvRG9tV3JhcHBlcic7XG5cbmV4cG9ydCBjbGFzcyBFbnZpcm9ubWVudCB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3tyZW5kZXJlcjogUmVuZGVyZXJ9fSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHRoaXMuaXNCcm93c2VyID0gdHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCc7XG4gICAgICAgIHRoaXMuaXNTZXJ2ZXIgPSAhdGhpcy5pc0Jyb3dzZXI7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAoIXRoaXMucGxhbm5lcikge1xuICAgICAgICAgICAgdGhpcy5wbGFubmVyID0gUGxhbm5lci5nZXRJbnN0YW5jZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLndpbmRvdykge1xuICAgICAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgRG9tV3JhcHBlcih0aGlzLmlzQnJvd3NlciA/IHdpbmRvdyA6IG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLmRvY3VtZW50ID0gbmV3IERvbVdyYXBwZXIodGhpcy5pc0Jyb3dzZXIgPyBkb2N1bWVudCA6IG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvZHkpIHtcbiAgICAgICAgICAgIHRoaXMuYm9keSA9IG5ldyBEb21XcmFwcGVyKHRoaXMuaXNCcm93c2VyID8gZG9jdW1lbnQuYm9keSA6IG51bGwpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcHJvbWlzZXMgPSBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0Fic3RyYWN0Q29tcG9uZW50fSBjb21wb25lbnRcbiAgICAgKiBAcGFyYW0ge0VsZW1lbnR9IFtlbGVtZW50XVxuICAgICAqL1xuICAgIHJlbmRlcihjb21wb25lbnQsIGVsZW1lbnQpIHtcbiAgICAgICAgY29tcG9uZW50LnNldEVudih0aGlzKTtcbiAgICAgICAgY29tcG9uZW50LnJlbmRlcihlbGVtZW50KTtcblxuICAgICAgICByZXR1cm4gY29tcG9uZW50LmdldEVsZW1lbnQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb21pc2V9IHByb21pc2VcbiAgICAgKi9cbiAgICBhd2FpdFByb21pc2UocHJvbWlzZSkge1xuICAgICAgICB0aGlzLl9wcm9taXNlcy5wdXNoKHByb21pc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdhaXQgZm9yIHNlcnZlciByZW5kZXJpbmcsIGlmIHNvbWVvbmUgaXMgd2FpdCByZW5kZXJpbmdcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBhc3luYygpIHtcbiAgICAgICAgbGV0IHByb21pc2VzID0gdGhpcy5fcHJvbWlzZXM7XG4gICAgICAgIHRoaXMuX3Byb21pc2VzID0gW107XG5cbiAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 177 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.DomWrapper = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Events2 = __webpack_require__(85);
	
	var _ValueProxy = __webpack_require__(84);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DomWrapper = exports.DomWrapper = function (_Events) {
	    (0, _inherits3.default)(DomWrapper, _Events);
	
	    /**
	     * @param {Element} element
	     */
	    function DomWrapper(element) {
	        (0, _classCallCheck3.default)(this, DomWrapper);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _Events.call(this));
	
	        _this._element = element;
	        _this._events = {};
	        return _this;
	    }
	
	    /**
	     * @param eventName
	     * @returns {*}
	     */
	
	
	    DomWrapper.prototype.event = function event(eventName) {
	        var element = this._element;
	
	        if (!this._events[eventName]) {
	            this._events[eventName] = new _ValueProxy.ValueProxy({
	                subscribe: function subscribe() {
	                    var _this2 = this;
	
	                    if (element) {
	                        this._callback = function (event) {
	                            _this2.emitValue(event);
	                        };
	
	                        element.addEventListener(eventName, this._callback);
	                    }
	                },
	                unsubscribe: function unsubscribe() {
	                    if (element && this._callback) {
	                        element.removeEventListener(eventName, this._callback);
	                    }
	                }
	            });
	        }
	
	        return this._events[eventName];
	    };
	
	    return DomWrapper;
	}(_Events2.Events);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9Db21wb25lbnRzL0RvbVdyYXBwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztJQUVhLFUsV0FBQSxVOzs7QUFFVDs7O0FBR0Esd0JBQVksT0FBWixFQUFxQjtBQUFBOztBQUFBLG1FQUNqQixrQkFEaUI7O0FBR2pCLGNBQUssUUFBTCxHQUFnQixPQUFoQjtBQUNBLGNBQUssT0FBTCxHQUFlLEVBQWY7QUFKaUI7QUFLcEI7O0FBRUQ7Ozs7Ozt5QkFJQSxLLGtCQUFNLFMsRUFBVztBQUNiLFlBQUksVUFBVSxLQUFLLFFBQW5COztBQUVBLFlBQUksQ0FBQyxLQUFLLE9BQUwsQ0FBYSxTQUFiLENBQUwsRUFBOEI7QUFDMUIsaUJBQUssT0FBTCxDQUFhLFNBQWIsSUFBMEIsMkJBQWU7QUFDckMseUJBRHFDLHVCQUN6QjtBQUFBOztBQUNSLHdCQUFJLE9BQUosRUFBYTtBQUNULDZCQUFLLFNBQUwsR0FBaUIsVUFBQyxLQUFELEVBQVc7QUFDeEIsbUNBQUssU0FBTCxDQUFlLEtBQWY7QUFDSCx5QkFGRDs7QUFJQSxnQ0FBUSxnQkFBUixDQUF5QixTQUF6QixFQUFvQyxLQUFLLFNBQXpDO0FBQ0g7QUFDSixpQkFUb0M7QUFVckMsMkJBVnFDLHlCQVV2QjtBQUNWLHdCQUFJLFdBQVcsS0FBSyxTQUFwQixFQUErQjtBQUMzQixnQ0FBUSxtQkFBUixDQUE0QixTQUE1QixFQUF1QyxLQUFLLFNBQTVDO0FBQ0g7QUFDSjtBQWRvQyxhQUFmLENBQTFCO0FBZ0JIOztBQUVELGVBQU8sS0FBSyxPQUFMLENBQWEsU0FBYixDQUFQO0FBQ0gsSyIsImZpbGUiOiJEb21XcmFwcGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFdmVudHN9IGZyb20gJy4uL0RhdGEvRXZlbnRzJztcbmltcG9ydCB7VmFsdWVQcm94eX0gZnJvbSAnLi4vRGF0YS9WYWx1ZVByb3h5JztcblxuZXhwb3J0IGNsYXNzIERvbVdyYXBwZXIgZXh0ZW5kcyBFdmVudHMge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoZWxlbWVudCkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQgPSBlbGVtZW50O1xuICAgICAgICB0aGlzLl9ldmVudHMgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0gZXZlbnROYW1lXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZXZlbnQoZXZlbnROYW1lKSB7XG4gICAgICAgIGxldCBlbGVtZW50ID0gdGhpcy5fZWxlbWVudDtcblxuICAgICAgICBpZiAoIXRoaXMuX2V2ZW50c1tldmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLl9ldmVudHNbZXZlbnROYW1lXSA9IG5ldyBWYWx1ZVByb3h5KHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFjayA9IChldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFZhbHVlKGV2ZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudE5hbWUsIHRoaXMuX2NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ICYmIHRoaXMuX2NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCB0aGlzLl9jYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9ldmVudHNbZXZlbnROYW1lXTtcbiAgICB9XG5cbn0iXX0=

/***/ },
/* 178 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Model = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _ValueProxy = __webpack_require__(84);
	
	var _Prototype = __webpack_require__(174);
	
	var _Events2 = __webpack_require__(85);
	
	var _Planner = __webpack_require__(86);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Model = exports.Model = (_dec = (0, _Prototype.Prototype)({
	    idAttribute: 'id'
	}), _dec(_class = function (_Events) {
	    (0, _inherits3.default)(Model, _Events);
	
	    /**
	     * @param {{}} attrs
	     * @param {{[parse]: boolean}} options
	     */
	    function Model(attrs) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	        (0, _classCallCheck3.default)(this, Model);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _Events.call(this));
	
	        _this._proxies = {};
	
	        if (_this.defaults) {
	            Object.assign(_this, _this.defaults);
	        }
	
	        if (options.parse) {
	            attrs = _this.parse(attrs);
	        }
	
	        if (attrs) {
	            Object.assign(_this, attrs);
	        }
	
	        _this._options = options;
	
	        if (_this.initialize) {
	            _this.initialize(attrs, options);
	        }
	        return _this;
	    }
	
	    /**
	     * @param {string} key
	     * @param {*} value
	     * @param {boolean} trigger
	     */
	
	
	    Model.prototype.set = function set(key, value) {
	        var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	        var _ref$trigger = _ref.trigger;
	        var trigger = _ref$trigger === undefined ? true : _ref$trigger;
	
	        if (this[key] !== value) {
	            this[key] = value;
	
	            if (trigger) {
	                this.emitToChannel('change:' + key, value);
	            }
	
	            this.emit(this, key);
	        }
	    };
	
	    /**
	     * @param {{}} attrs
	     */
	
	
	    Model.prototype.setAttrs = function setAttrs(attrs, options) {
	        var _this2 = this;
	
	        _Planner.Planner.lock(function () {
	            Object.keys(attrs).forEach(function (key) {
	                return _this2.set(key, attrs[key], options);
	            });
	        });
	    };
	
	    /**
	     * @param {string} key
	     *
	     * @returns {*}
	     */
	
	
	    Model.prototype.get = function get(key) {
	        return this[key];
	    };
	
	    /**
	     * @param {string} key
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    Model.prototype.proxy = function proxy(key) {
	        if (!this._proxies[key]) {
	            var value = this.get(key);
	
	            if (value instanceof _ValueProxy.ValueProxy) {
	                this._proxies[key] = value;
	            } else {
	                this._proxies[key] = _ValueProxy.ValueProxy.fromModel(this, key);
	            }
	        }
	
	        return this._proxies[key];
	    };
	
	    /**
	     * @param {{}} options
	     */
	
	
	    Model.prototype.remove = function remove(options) {
	        var _this3 = this;
	
	        var promise = this.getRequest().del({
	            url: this._prepareUrl()
	        });
	
	        return promise.then(function () {
	            _this3.set(_this3.idAttribute, null);
	
	            _this3.channel('remove').emit(_this3);
	        });
	    };
	
	    /**
	     * @returns {Promise}
	     */
	
	
	    Model.prototype.save = function save() {
	        var _this4 = this;
	
	        var data = this.toJSON(),
	            idAttribute = this.idAttribute,
	            request = this.getRequest(),
	            promise = void 0;
	
	        if (data[idAttribute]) {
	            promise = request.put({
	                url: this._prepareUrl(),
	                data: data
	            });
	        } else {
	            promise = request.post({
	                url: this._prepareUrl(),
	                data: data
	            });
	        }
	
	        return promise.then(function (attrs) {
	            _this4.setAttrs(attrs);
	
	            return _this4;
	        });
	    };
	
	    /**
	     * @returns {string}
	     * @private
	     */
	
	
	    Model.prototype._prepareUrl = function _prepareUrl() {
	        var id = this[this.idAttribute];
	
	        if (id) {
	            return this.url + '/' + id;
	        } else {
	            return this.url;
	        }
	    };
	
	    /**
	     * @returns {AbstractRequest}
	     */
	
	
	    Model.prototype.getRequest = function getRequest() {
	        return this._options.request;
	    };
	
	    /**
	     * @param {{}} data
	     *
	     * @returns {{}}
	     */
	
	
	    Model.prototype.parse = function parse(data) {
	        return data;
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    Model.prototype.toJSON = function toJSON() {
	        var _this5 = this;
	
	        var result = {};
	
	        Object.keys(this).filter(function (key) {
	            return key[0] !== '_' || key === _this5.idAttribute;
	        }).forEach(function (key) {
	            var value = _this5[key];
	
	            if (value && value.serialize) {
	                result[key] = value.serialize();
	            } else {
	                result[key] = value;
	            }
	        });
	
	        return result;
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    Model.prototype.serialize = function serialize() {
	        return this.toJSON();
	    };
	
	    /**
	     * @param {{}} data
	     * @param {{}} dependencies
	     *
	     * @returns {Model}
	     */
	
	
	    Model.restore = function restore(data, dependencies) {
	        return this.dataFactory(data, dependencies);
	    };
	
	    /**
	     * @param {{}} options
	     * @returns {Model}
	     */
	
	
	    Model.factory = function factory(options) {
	        return this.dataFactory(null, options);
	    };
	
	    /**
	     * @param {{}|null} data
	     * @param {{}} [options]
	     *
	     * @returns {Model}
	     */
	
	
	    Model.dataFactory = function dataFactory(data, options) {
	        return new this(data, options);
	    };
	
	    return Model;
	}(_Events2.Events)) || _class);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EYXRhL01vZGVsLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQUthLEssV0FBQSxLLFdBSFosMEJBQVU7QUFDUCxpQkFBYTtBQUROLENBQVYsQzs7O0FBS0c7Ozs7QUFJQSxtQkFBWSxLQUFaLEVBQWlDO0FBQUEsWUFBZCxPQUFjLHlEQUFKLEVBQUk7QUFBQTs7QUFBQSxtRUFDN0Isa0JBRDZCOztBQUc3QixjQUFLLFFBQUwsR0FBZ0IsRUFBaEI7O0FBRUEsWUFBSSxNQUFLLFFBQVQsRUFBbUI7QUFDZixtQkFBTyxNQUFQLFFBQW9CLE1BQUssUUFBekI7QUFDSDs7QUFFRCxZQUFJLFFBQVEsS0FBWixFQUFtQjtBQUNmLG9CQUFRLE1BQUssS0FBTCxDQUFXLEtBQVgsQ0FBUjtBQUNIOztBQUVELFlBQUksS0FBSixFQUFXO0FBQ1AsbUJBQU8sTUFBUCxRQUFvQixLQUFwQjtBQUNIOztBQUVELGNBQUssUUFBTCxHQUFnQixPQUFoQjs7QUFFQSxZQUFJLE1BQUssVUFBVCxFQUFxQjtBQUNqQixrQkFBSyxVQUFMLENBQWdCLEtBQWhCLEVBQXVCLE9BQXZCO0FBQ0g7QUFyQjRCO0FBc0JoQzs7QUFFRDs7Ozs7OztvQkFLQSxHLGdCQUFJLEcsRUFBSyxLLEVBQThCO0FBQUEseUVBQUosRUFBSTs7QUFBQSxnQ0FBdEIsT0FBc0I7QUFBQSxZQUF0QixPQUFzQixnQ0FBWixJQUFZOztBQUNuQyxZQUFJLEtBQUssR0FBTCxNQUFjLEtBQWxCLEVBQXlCO0FBQ3JCLGlCQUFLLEdBQUwsSUFBWSxLQUFaOztBQUVBLGdCQUFJLE9BQUosRUFBYTtBQUNULHFCQUFLLGFBQUwsQ0FBbUIsWUFBWSxHQUEvQixFQUFvQyxLQUFwQztBQUNIOztBQUVELGlCQUFLLElBQUwsQ0FBVSxJQUFWLEVBQWdCLEdBQWhCO0FBQ0g7QUFDSixLOztBQUVEOzs7OztvQkFHQSxRLHFCQUFTLEssRUFBTyxPLEVBQVM7QUFBQTs7QUFDckIseUJBQVEsSUFBUixDQUFhLFlBQU07QUFDZixtQkFBTyxJQUFQLENBQVksS0FBWixFQUFtQixPQUFuQixDQUEyQjtBQUFBLHVCQUFPLE9BQUssR0FBTCxDQUFTLEdBQVQsRUFBYyxNQUFNLEdBQU4sQ0FBZCxFQUEwQixPQUExQixDQUFQO0FBQUEsYUFBM0I7QUFDSCxTQUZEO0FBR0gsSzs7QUFFRDs7Ozs7OztvQkFLQSxHLGdCQUFJLEcsRUFBSztBQUNMLGVBQU8sS0FBSyxHQUFMLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O29CQUtBLEssa0JBQU0sRyxFQUFLO0FBQ1AsWUFBSSxDQUFDLEtBQUssUUFBTCxDQUFjLEdBQWQsQ0FBTCxFQUF5QjtBQUNyQixnQkFBSSxRQUFRLEtBQUssR0FBTCxDQUFTLEdBQVQsQ0FBWjs7QUFFQSxnQkFBSSx1Q0FBSixFQUFpQztBQUM3QixxQkFBSyxRQUFMLENBQWMsR0FBZCxJQUFxQixLQUFyQjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLLFFBQUwsQ0FBYyxHQUFkLElBQXFCLHVCQUFXLFNBQVgsQ0FBcUIsSUFBckIsRUFBMkIsR0FBM0IsQ0FBckI7QUFDSDtBQUNKOztBQUVELGVBQU8sS0FBSyxRQUFMLENBQWMsR0FBZCxDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7b0JBR0EsTSxtQkFBTyxPLEVBQVM7QUFBQTs7QUFDWixZQUFJLFVBQVUsS0FBSyxVQUFMLEdBQWtCLEdBQWxCLENBQXNCO0FBQ2hDLGlCQUFLLEtBQUssV0FBTDtBQUQyQixTQUF0QixDQUFkOztBQUlBLGVBQU8sUUFBUSxJQUFSLENBQWEsWUFBTTtBQUN0QixtQkFBSyxHQUFMLENBQVMsT0FBSyxXQUFkLEVBQTJCLElBQTNCOztBQUVBLG1CQUFLLE9BQUwsQ0FBYSxRQUFiLEVBQXVCLElBQXZCO0FBQ0gsU0FKTSxDQUFQO0FBS0gsSzs7QUFFRDs7Ozs7b0JBR0EsSSxtQkFBTztBQUFBOztBQUNILFlBQUksT0FBTyxLQUFLLE1BQUwsRUFBWDtBQUFBLFlBQ0ksY0FBYyxLQUFLLFdBRHZCO0FBQUEsWUFFSSxVQUFVLEtBQUssVUFBTCxFQUZkO0FBQUEsWUFHSSxnQkFISjs7QUFLQSxZQUFJLEtBQUssV0FBTCxDQUFKLEVBQXVCO0FBQ25CLHNCQUFVLFFBQVEsR0FBUixDQUFZO0FBQ2xCLHFCQUFLLEtBQUssV0FBTCxFQURhO0FBRWxCLHNCQUFNO0FBRlksYUFBWixDQUFWO0FBSUgsU0FMRCxNQUtPO0FBQ0gsc0JBQVUsUUFBUSxJQUFSLENBQWE7QUFDbkIscUJBQUssS0FBSyxXQUFMLEVBRGM7QUFFbkIsc0JBQU07QUFGYSxhQUFiLENBQVY7QUFJSDs7QUFFRCxlQUFPLFFBQVEsSUFBUixDQUFhLGlCQUFTO0FBQ3pCLG1CQUFLLFFBQUwsQ0FBYyxLQUFkOztBQUVBO0FBQ0gsU0FKTSxDQUFQO0FBS0gsSzs7QUFFRDs7Ozs7O29CQUlBLFcsMEJBQWM7QUFDVixZQUFJLEtBQUssS0FBSyxLQUFLLFdBQVYsQ0FBVDs7QUFFQSxZQUFJLEVBQUosRUFBUTtBQUNKLG1CQUFVLEtBQUssR0FBZixTQUFzQixFQUF0QjtBQUNILFNBRkQsTUFFTztBQUNILG1CQUFPLEtBQUssR0FBWjtBQUNIO0FBQ0osSzs7QUFFRDs7Ozs7b0JBR0EsVSx5QkFBYTtBQUNULGVBQU8sS0FBSyxRQUFMLENBQWMsT0FBckI7QUFDSCxLOztBQUVEOzs7Ozs7O29CQUtBLEssa0JBQU0sSSxFQUFNO0FBQ1IsZUFBTyxJQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7b0JBR0EsTSxxQkFBUztBQUFBOztBQUNMLFlBQUksU0FBUyxFQUFiOztBQUVBLGVBQU8sSUFBUCxDQUFZLElBQVosRUFDSyxNQURMLENBQ1k7QUFBQSxtQkFBTyxJQUFJLENBQUosTUFBVyxHQUFYLElBQWtCLFFBQVEsT0FBSyxXQUF0QztBQUFBLFNBRFosRUFFSyxPQUZMLENBRWEsZUFBTztBQUNaLGdCQUFJLFFBQVEsT0FBSyxHQUFMLENBQVo7O0FBRUEsZ0JBQUksU0FBUyxNQUFNLFNBQW5CLEVBQThCO0FBQzFCLHVCQUFPLEdBQVAsSUFBYyxNQUFNLFNBQU4sRUFBZDtBQUNILGFBRkQsTUFFTztBQUNILHVCQUFPLEdBQVAsSUFBYyxLQUFkO0FBQ0g7QUFDSixTQVZMOztBQVlBLGVBQU8sTUFBUDtBQUNILEs7O0FBRUQ7Ozs7O29CQUdBLFMsd0JBQVk7QUFDUixlQUFPLEtBQUssTUFBTCxFQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7VUFNTyxPLG9CQUFRLEksRUFBTSxZLEVBQWM7QUFDL0IsZUFBTyxLQUFLLFdBQUwsQ0FBaUIsSUFBakIsRUFBdUIsWUFBdkIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7OztVQUlPLE8sb0JBQVEsTyxFQUFTO0FBQ3BCLGVBQU8sS0FBSyxXQUFMLENBQWlCLElBQWpCLEVBQXVCLE9BQXZCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7OztVQU1PLFcsd0JBQVksSSxFQUFNLE8sRUFBUztBQUM5QixlQUFPLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxPQUFmLENBQVA7QUFDSCxLIiwiZmlsZSI6Ik1vZGVsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtWYWx1ZVByb3h5fSBmcm9tICcuL1ZhbHVlUHJveHknO1xuaW1wb3J0IHtQcm90b3R5cGV9IGZyb20gJy4uL0RlY29yYXRvcnMvUHJvdG90eXBlJztcbmltcG9ydCB7RXZlbnRzfSBmcm9tICcuL0V2ZW50cyc7XG5pbXBvcnQge1BsYW5uZXJ9IGZyb20gJy4vUGxhbm5lcic7XG5cbkBQcm90b3R5cGUoe1xuICAgIGlkQXR0cmlidXRlOiAnaWQnXG59KVxuZXhwb3J0IGNsYXNzIE1vZGVsIGV4dGVuZHMgRXZlbnRzIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGF0dHJzXG4gICAgICogQHBhcmFtIHt7W3BhcnNlXTogYm9vbGVhbn19IG9wdGlvbnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhdHRycywgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKCk7XG5cbiAgICAgICAgdGhpcy5fcHJveGllcyA9IHt9O1xuXG4gICAgICAgIGlmICh0aGlzLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHRoaXMuZGVmYXVsdHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMucGFyc2UpIHtcbiAgICAgICAgICAgIGF0dHJzID0gdGhpcy5wYXJzZShhdHRycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYXR0cnMpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgYXR0cnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZSkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplKGF0dHJzLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAgICogQHBhcmFtIHtib29sZWFufSB0cmlnZ2VyXG4gICAgICovXG4gICAgc2V0KGtleSwgdmFsdWUsIHt0cmlnZ2VyID0gdHJ1ZX0gPSB7fSkge1xuICAgICAgICBpZiAodGhpc1trZXldICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpc1trZXldID0gdmFsdWU7XG5cbiAgICAgICAgICAgIGlmICh0cmlnZ2VyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0VG9DaGFubmVsKCdjaGFuZ2U6JyArIGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmVtaXQodGhpcywga2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGF0dHJzXG4gICAgICovXG4gICAgc2V0QXR0cnMoYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgICAgUGxhbm5lci5sb2NrKCgpID0+IHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGtleSA9PiB0aGlzLnNldChrZXksIGF0dHJzW2tleV0sIG9wdGlvbnMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpc1trZXldO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtWYWx1ZVByb3h5fVxuICAgICAqL1xuICAgIHByb3h5KGtleSkge1xuICAgICAgICBpZiAoIXRoaXMuX3Byb3hpZXNba2V5XSkge1xuICAgICAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5nZXQoa2V5KTtcblxuICAgICAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgVmFsdWVQcm94eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb3hpZXNba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wcm94aWVzW2tleV0gPSBWYWx1ZVByb3h5LmZyb21Nb2RlbCh0aGlzLCBrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb3hpZXNba2V5XTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBvcHRpb25zXG4gICAgICovXG4gICAgcmVtb3ZlKG9wdGlvbnMpIHtcbiAgICAgICAgbGV0IHByb21pc2UgPSB0aGlzLmdldFJlcXVlc3QoKS5kZWwoe1xuICAgICAgICAgICAgdXJsOiB0aGlzLl9wcmVwYXJlVXJsKClcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldCh0aGlzLmlkQXR0cmlidXRlLCBudWxsKTtcblxuICAgICAgICAgICAgdGhpcy5jaGFubmVsKCdyZW1vdmUnKS5lbWl0KHRoaXMpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBzYXZlKCkge1xuICAgICAgICBsZXQgZGF0YSA9IHRoaXMudG9KU09OKCksXG4gICAgICAgICAgICBpZEF0dHJpYnV0ZSA9IHRoaXMuaWRBdHRyaWJ1dGUsXG4gICAgICAgICAgICByZXF1ZXN0ID0gdGhpcy5nZXRSZXF1ZXN0KCksXG4gICAgICAgICAgICBwcm9taXNlO1xuXG4gICAgICAgIGlmIChkYXRhW2lkQXR0cmlidXRlXSkge1xuICAgICAgICAgICAgcHJvbWlzZSA9IHJlcXVlc3QucHV0KHtcbiAgICAgICAgICAgICAgICB1cmw6IHRoaXMuX3ByZXBhcmVVcmwoKSxcbiAgICAgICAgICAgICAgICBkYXRhOiBkYXRhXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb21pc2UgPSByZXF1ZXN0LnBvc3Qoe1xuICAgICAgICAgICAgICAgIHVybDogdGhpcy5fcHJlcGFyZVVybCgpLFxuICAgICAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2UudGhlbihhdHRycyA9PiB7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJzKGF0dHJzKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcHJlcGFyZVVybCgpIHtcbiAgICAgICAgbGV0IGlkID0gdGhpc1t0aGlzLmlkQXR0cmlidXRlXTtcblxuICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLnVybH0vJHtpZH1gO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXJsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0Fic3RyYWN0UmVxdWVzdH1cbiAgICAgKi9cbiAgICBnZXRSZXF1ZXN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fb3B0aW9ucy5yZXF1ZXN0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGRhdGFcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICBwYXJzZShkYXRhKSB7XG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICB0b0pTT04oKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSB7fTtcblxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzKVxuICAgICAgICAgICAgLmZpbHRlcihrZXkgPT4ga2V5WzBdICE9PSAnXycgfHwga2V5ID09PSB0aGlzLmlkQXR0cmlidXRlKVxuICAgICAgICAgICAgLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSB0aGlzW2tleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgJiYgdmFsdWUuc2VyaWFsaXplKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdFtrZXldID0gdmFsdWUuc2VyaWFsaXplKCk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvSlNPTigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGRhdGFcbiAgICAgKiBAcGFyYW0ge3t9fSBkZXBlbmRlbmNpZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtNb2RlbH1cbiAgICAgKi9cbiAgICBzdGF0aWMgcmVzdG9yZShkYXRhLCBkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUZhY3RvcnkoZGF0YSwgZGVwZW5kZW5jaWVzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBvcHRpb25zXG4gICAgICogQHJldHVybnMge01vZGVsfVxuICAgICAqL1xuICAgIHN0YXRpYyBmYWN0b3J5KG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YUZhY3RvcnkobnVsbCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fXxudWxsfSBkYXRhXG4gICAgICogQHBhcmFtIHt7fX0gW29wdGlvbnNdXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAgICovXG4gICAgc3RhdGljIGRhdGFGYWN0b3J5KGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKGRhdGEsIG9wdGlvbnMpO1xuICAgIH1cblxufVxuIl19

/***/ },
/* 179 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Collection = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(180);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _Model = __webpack_require__(178);
	
	var _Events2 = __webpack_require__(85);
	
	var _ValueProxy = __webpack_require__(84);
	
	var _Prototype = __webpack_require__(174);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Collection = exports.Collection = (_dec = (0, _Prototype.Prototype)({
	    Model: _Model.Model
	}), _dec(_class = function (_Events) {
	    (0, _inherits3.default)(Collection, _Events);
	
	    /**
	     * @param {{}[]} [models]
	     * @param {{}} [options]
	     */
	    function Collection(models, options) {
	        (0, _classCallCheck3.default)(this, Collection);
	
	        var _this2 = (0, _possibleConstructorReturn3.default)(this, _Events.call(this));
	
	        _this2.models = [];
	        _this2._index = {};
	
	        if (options) {
	            Object.assign(_this2, options);
	        }
	
	        if (models) {
	            _this2.mergeModels(models, { silent: true });
	        }
	
	        if (_this2.initialize) {
	            _this2.initialize(models, options);
	        }
	        return _this2;
	    }
	
	    /**
	     * @param {{data: {}, [query]: {}}} params
	     *
	     * @returns {Promise<Collection>}
	     */
	
	
	    Collection.prototype.fetch = function fetch() {
	        var _this3 = this;
	
	        var params = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        params = Object.assign({ parse: true }, params);
	
	        var options = {
	            url: params.url || this.url,
	            query: params.query || {}
	        };
	
	        if (!params.force) {
	            if (this.isQueriesSame(options.query)) {
	                return Promise.resolve(this);
	            }
	        }
	
	        return this._promise = this.getRequest().request(options).then(function (response) {
	            return _this3.processResponse(response, params);
	        }).then(function () {
	            _this3._lastQuery = options.query;
	
	            return _this3;
	        });
	    };
	
	    /**
	     * @param {[]} response
	     * @param {{}} params
	     *
	     * @returns {*}
	     */
	
	
	    Collection.prototype.processResponse = function processResponse(response, params) {
	        if (params.parse) {
	            response = this.parse(response, params);
	        }
	
	        return this.mergeModels(response, params);
	    };
	
	    /**
	     * @param {{}[]} models
	     * @param {{}} [params]
	     */
	
	
	    Collection.prototype.mergeModels = function mergeModels(models) {
	        var _this4 = this;
	
	        var params = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	        var Model = this.Model,
	            silent = params.silent,
	            reset = params.reset,
	            remove = reset || params.remove,
	            idAttribute = Model.prototype.idAttribute,
	            addChannel = this.channel('add'),
	            currentModels = this.models.slice(),
	            newModels = [],
	            toAdd = [];
	
	        for (var index = 0; index < models.length; index++) {
	            var attrs = models[index],
	                isModel = models[index] instanceof Model,
	                id = attrs[idAttribute],
	                previous = id && this._index[id];
	
	            // Merge
	            if (previous) {
	                var _index = currentModels.indexOf(previous);
	                currentModels.splice(_index, 1);
	
	                if (!isModel) {
	                    previous.setAttrs(attrs);
	                }
	
	                newModels.push(previous);
	            } else {
	                var model = isModel ? attrs : Model.dataFactory(attrs, {
	                    request: this.getRequest(),
	                    parse: params.parse
	                });
	
	                this._index[model[idAttribute]] = model;
	                newModels.push(model);
	                toAdd.push(model);
	
	                this.listenModel(model);
	            }
	        }
	
	        if (remove) {
	            this.models = newModels;
	
	            for (var _index2 = 0; _index2 < currentModels.length; _index2++) {
	                this.remove(currentModels[_index2], { silent: silent || reset });
	            }
	        } else {
	            this.models = currentModels.concat(newModels);
	        }
	
	        if (this.comparator && newModels.length) {
	            if (this.comparator.length === 2) {
	                this.models.sort(this.comparator);
	            } else {
	                this.models.sort(function (a, b) {
	                    return _this4.comparator(a) - _this4.comparator(b);
	                });
	            }
	        }
	
	        if (!silent && !reset) {
	            for (var _index3 = 0; _index3 < toAdd.length; _index3++) {
	                addChannel.emit(toAdd[_index3]);
	            }
	
	            this.channel('update').emit(this);
	        }
	
	        if (reset) {
	            this.channel('reset').emit(this);
	        }
	
	        this.emit(this.models);
	
	        return toAdd;
	    };
	
	    /**
	     * @param {Model|{}} model
	     * @param {{}} options
	     */
	
	
	    Collection.prototype.remove = function remove(model) {
	        var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];
	
	        var index = this.models.indexOf(model),
	            idAttribute = this.Model.prototype.idAttribute;
	
	        if (index > -1) {
	            this.models.splice(index, 1);
	        }
	
	        this._index[model[idAttribute]] = undefined;
	        this.stopListening(model);
	
	        if (!options.reset) {
	            this.channel('remove').emit(model);
	        }
	    };
	
	    /**
	     * @param {{}} attrs
	     * @param {{}} [options]
	     */
	
	
	    Collection.prototype.add = function add(attrs, options) {
	        var models = this.mergeModels([attrs], options);
	
	        return models[0];
	    };
	
	    /**
	     * @param {{}} attrs
	     * @param {{}} [options]
	     */
	
	
	    Collection.prototype.create = function create(attrs, options) {
	        return this.add(attrs, options).save(options);
	    };
	
	    /**
	     * @param {Model} model
	     */
	
	
	    Collection.prototype.listenModel = function listenModel(model) {
	        var _this5 = this;
	
	        this.listenTo(model, function (model, key) {
	            _this5.channel('change:' + key).emit(model);
	        });
	
	        this.listenTo(model.channel('remove'), function (model) {
	            _this5.remove(model);
	        });
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {[]}
	     */
	
	
	    Collection.prototype.map = function map(callback) {
	        return this.models.map(callback);
	    };
	
	    /**
	     * @param {function} callback
	     */
	
	
	    Collection.prototype.forEach = function forEach(callback) {
	        this.models.forEach(callback);
	    };
	
	    /**
	     * @param {function} callback
	     * 
	     * @returns {Model}
	     */
	
	
	    Collection.prototype.find = function find(callback) {
	        return this.models.find(callback);
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {number}
	     */
	
	
	    Collection.prototype.findIndex = function findIndex(callback) {
	        return this.models.findIndex(callback);
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {[]}
	     */
	
	
	    Collection.prototype.filter = function filter(callback) {
	        return this.models.filter(callback);
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {boolean}
	     */
	
	
	    Collection.prototype.every = function every(callback) {
	        return this.models.every(callback);
	    };
	
	    /**
	     * @param {function} callback
	     *
	     * @returns {boolean}
	     */
	
	
	    Collection.prototype.some = function some(callback) {
	        return this.models.some(callback);
	    };
	
	    /**
	     * @param {Model} model
	     *
	     * @returns {boolean}
	     */
	
	
	    Collection.prototype.includes = function includes(model) {
	        return this.models.includes(model);
	    };
	
	    /**
	     * @param {number} n
	     *
	     * @returns {Model|Model[]}
	     */
	
	
	    Collection.prototype.first = function first() {
	        var n = arguments.length <= 0 || arguments[0] === undefined ? 1 : arguments[0];
	
	        return n === 1 ? this.models[0] : this.models.slice(0, n);
	    };
	
	    /**
	     * @param {string}name
	     *
	     * @return {*[]}
	     */
	
	
	    Collection.prototype.pluck = function pluck(name) {
	        return this.models.map(function (model) {
	            return model[name];
	        });
	    };
	
	    /**
	     * @param {Model} model
	     *
	     * @returns {number}
	     */
	
	
	    Collection.prototype.indexOf = function indexOf(model) {
	        return this.models.indexOf(model);
	    };
	
	    /**
	     * @returns {number}
	     */
	
	
	    /**
	     * @param {{}} query
	     * @returns {boolean}
	     */
	    Collection.prototype.isQueriesSame = function isQueriesSame(query) {
	        return JSON.stringify(query) === JSON.stringify(this._lastQuery);
	    };
	
	    /**
	     * @param {{}} data
	     * @param {{}} params
	     *
	     * @returns {*}
	     */
	
	
	    Collection.prototype.parse = function parse(data, params) {
	        return data;
	    };
	
	    /**
	     * @returns {AbstractRequest}
	     */
	
	
	    Collection.prototype.getRequest = function getRequest() {
	        return this.request;
	    };
	
	    /**
	     * @returns {Model[]}
	     */
	
	
	    Collection.prototype.getValue = function getValue() {
	        return this.models;
	    };
	
	    /**
	     * @param {string} name
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    Collection.prototype.proxy = function proxy(name) {
	        if (name === 'length') {
	            return this.lengthProxy();
	        }
	
	        return this[name];
	    };
	
	    /**
	     * @returns {ValueProxy<number>}
	     */
	
	
	    Collection.prototype.lengthProxy = function lengthProxy() {
	        var _this6 = this;
	
	        if (!this._lengthProxy) {
	            (function () {
	                var _this = _this6;
	
	                _this6._lengthProxy = new _ValueProxy.ValueProxy({
	                    get: function get() {
	                        return _this.length;
	                    },
	                    subscribe: function subscribe() {
	                        var _this7 = this;
	
	                        this.listenTo(_this, function () {
	                            return _this7.emitValue(_this.length);
	                        });
	                    }
	                });
	            })();
	        }
	
	        return this._lengthProxy;
	    };
	
	    /**
	     * Wait for complete last promise
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    Collection.prototype.async = function async() {
	        return this._promise;
	    };
	
	    /**
	     * Default destroy
	     */
	
	
	    Collection.prototype.destroy = function destroy() {
	        this.stopListening();
	        this.off();
	        this.models = [];
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    Collection.prototype.serialize = function serialize() {
	        var models = this.models.map(function (model) {
	            return model.serialize();
	        });
	
	        return {
	            query: this._lastQuery,
	            models: models
	        };
	    };
	
	    /**
	     * @param {{}[]} models
	     * @param {{}} query
	     * @param {{}} dependencies
	     *
	     * @returns {Model}
	     */
	
	
	    Collection.restore = function restore(_ref, dependencies) {
	        var models = _ref.models;
	        var query = _ref.query;
	
	        var Model = this.prototype.Model,
	            modelsInstances = models.map(function (model) {
	            return Model.restore(model, dependencies);
	        }),
	            instance = this.dataFactory(modelsInstances, dependencies);
	
	        instance._lastQuery = query;
	
	        return instance;
	    };
	
	    /**
	     * @param {{}} options
	     * @returns {Model}
	     */
	
	
	    Collection.factory = function factory(options) {
	        return this.dataFactory(null, options);
	    };
	
	    /**
	     * @param {{}|null} data
	     * @param {{}} [options]
	     *
	     * @returns {Model}
	     */
	
	
	    Collection.dataFactory = function dataFactory(data, options) {
	        return new this(data, options);
	    };
	
	    (0, _createClass3.default)(Collection, [{
	        key: 'length',
	        get: function get() {
	            return this.models.length;
	        }
	    }]);
	    return Collection;
	}(_Events2.Events)) || _class);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EYXRhL0NvbGxlY3Rpb24uanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztJQUthLFUsV0FBQSxVLFdBSFosMEJBQVU7QUFDUDtBQURPLENBQVYsQzs7O0FBS0c7Ozs7QUFJQSx3QkFBWSxNQUFaLEVBQW9CLE9BQXBCLEVBQTZCO0FBQUE7O0FBQUEsb0VBQ3pCLGtCQUR5Qjs7QUFHekIsZUFBSyxNQUFMLEdBQWMsRUFBZDtBQUNBLGVBQUssTUFBTCxHQUFjLEVBQWQ7O0FBRUEsWUFBSSxPQUFKLEVBQWE7QUFDVCxtQkFBTyxNQUFQLFNBQW9CLE9BQXBCO0FBQ0g7O0FBRUQsWUFBSSxNQUFKLEVBQVk7QUFDUixtQkFBSyxXQUFMLENBQWlCLE1BQWpCLEVBQXlCLEVBQUMsUUFBUSxJQUFULEVBQXpCO0FBQ0g7O0FBRUQsWUFBSSxPQUFLLFVBQVQsRUFBcUI7QUFDakIsbUJBQUssVUFBTCxDQUFnQixNQUFoQixFQUF3QixPQUF4QjtBQUNIO0FBaEJ3QjtBQWlCNUI7O0FBRUQ7Ozs7Ozs7eUJBS0EsSyxvQkFBbUI7QUFBQTs7QUFBQSxZQUFiLE1BQWEseURBQUosRUFBSTs7QUFDZixpQkFBUyxPQUFPLE1BQVAsQ0FBYyxFQUFDLE9BQU8sSUFBUixFQUFkLEVBQTZCLE1BQTdCLENBQVQ7O0FBRUEsWUFBSSxVQUFVO0FBQ1YsaUJBQUssT0FBTyxHQUFQLElBQWMsS0FBSyxHQURkO0FBRVYsbUJBQU8sT0FBTyxLQUFQLElBQWdCO0FBRmIsU0FBZDs7QUFLQSxZQUFJLENBQUMsT0FBTyxLQUFaLEVBQW1CO0FBQ2YsZ0JBQUksS0FBSyxhQUFMLENBQW1CLFFBQVEsS0FBM0IsQ0FBSixFQUF1QztBQUNuQyx1QkFBTyxRQUFRLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBUDtBQUNIO0FBQ0o7O0FBRUQsZUFBTyxLQUFLLFFBQUwsR0FBZ0IsS0FBSyxVQUFMLEdBQWtCLE9BQWxCLENBQTBCLE9BQTFCLEVBQ2xCLElBRGtCLENBQ2I7QUFBQSxtQkFBWSxPQUFLLGVBQUwsQ0FBcUIsUUFBckIsRUFBK0IsTUFBL0IsQ0FBWjtBQUFBLFNBRGEsRUFFbEIsSUFGa0IsQ0FFYixZQUFNO0FBQ1IsbUJBQUssVUFBTCxHQUFrQixRQUFRLEtBQTFCOztBQUVBO0FBQ0gsU0FOa0IsQ0FBdkI7QUFPSCxLOztBQUVEOzs7Ozs7Ozt5QkFNQSxlLDRCQUFnQixRLEVBQVUsTSxFQUFRO0FBQzlCLFlBQUksT0FBTyxLQUFYLEVBQWtCO0FBQ2QsdUJBQVcsS0FBSyxLQUFMLENBQVcsUUFBWCxFQUFxQixNQUFyQixDQUFYO0FBQ0g7O0FBRUQsZUFBTyxLQUFLLFdBQUwsQ0FBaUIsUUFBakIsRUFBMkIsTUFBM0IsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozt5QkFJQSxXLHdCQUFZLE0sRUFBcUI7QUFBQTs7QUFBQSxZQUFiLE1BQWEseURBQUosRUFBSTs7QUFDN0IsWUFBSSxRQUFRLEtBQUssS0FBakI7QUFBQSxZQUNJLFNBQVMsT0FBTyxNQURwQjtBQUFBLFlBRUksUUFBUSxPQUFPLEtBRm5CO0FBQUEsWUFHSSxTQUFTLFNBQVMsT0FBTyxNQUg3QjtBQUFBLFlBSUksY0FBYyxNQUFNLFNBQU4sQ0FBZ0IsV0FKbEM7QUFBQSxZQUtJLGFBQWEsS0FBSyxPQUFMLENBQWEsS0FBYixDQUxqQjtBQUFBLFlBTUksZ0JBQWdCLEtBQUssTUFBTCxDQUFZLEtBQVosRUFOcEI7QUFBQSxZQU9JLFlBQVksRUFQaEI7QUFBQSxZQVFJLFFBQVEsRUFSWjs7QUFVQSxhQUFLLElBQUksUUFBUSxDQUFqQixFQUFvQixRQUFRLE9BQU8sTUFBbkMsRUFBMkMsT0FBM0MsRUFBb0Q7QUFDaEQsZ0JBQUksUUFBUSxPQUFPLEtBQVAsQ0FBWjtBQUFBLGdCQUNJLFVBQVUsT0FBTyxLQUFQLGFBQXlCLEtBRHZDO0FBQUEsZ0JBRUksS0FBSyxNQUFNLFdBQU4sQ0FGVDtBQUFBLGdCQUdJLFdBQVcsTUFBTSxLQUFLLE1BQUwsQ0FBWSxFQUFaLENBSHJCOztBQUtBO0FBQ0EsZ0JBQUksUUFBSixFQUFjO0FBQ1Ysb0JBQUksU0FBUSxjQUFjLE9BQWQsQ0FBc0IsUUFBdEIsQ0FBWjtBQUNBLDhCQUFjLE1BQWQsQ0FBcUIsTUFBckIsRUFBNEIsQ0FBNUI7O0FBRUEsb0JBQUksQ0FBQyxPQUFMLEVBQWM7QUFDViw2QkFBUyxRQUFULENBQWtCLEtBQWxCO0FBQ0g7O0FBRUQsMEJBQVUsSUFBVixDQUFlLFFBQWY7QUFDSCxhQVRELE1BU087QUFDSCxvQkFBSSxRQUFRLFVBQVUsS0FBVixHQUFrQixNQUFNLFdBQU4sQ0FBa0IsS0FBbEIsRUFBeUI7QUFDbkQsNkJBQVMsS0FBSyxVQUFMLEVBRDBDO0FBRW5ELDJCQUFPLE9BQU87QUFGcUMsaUJBQXpCLENBQTlCOztBQUtBLHFCQUFLLE1BQUwsQ0FBWSxNQUFNLFdBQU4sQ0FBWixJQUFrQyxLQUFsQztBQUNBLDBCQUFVLElBQVYsQ0FBZSxLQUFmO0FBQ0Esc0JBQU0sSUFBTixDQUFXLEtBQVg7O0FBRUEscUJBQUssV0FBTCxDQUFpQixLQUFqQjtBQUNIO0FBQ0o7O0FBRUQsWUFBSSxNQUFKLEVBQVk7QUFDUixpQkFBSyxNQUFMLEdBQWMsU0FBZDs7QUFFQSxpQkFBSyxJQUFJLFVBQVEsQ0FBakIsRUFBb0IsVUFBUSxjQUFjLE1BQTFDLEVBQWtELFNBQWxELEVBQTJEO0FBQ3ZELHFCQUFLLE1BQUwsQ0FBWSxjQUFjLE9BQWQsQ0FBWixFQUFrQyxFQUFDLFFBQVEsVUFBVSxLQUFuQixFQUFsQztBQUNIO0FBQ0osU0FORCxNQU1PO0FBQ0gsaUJBQUssTUFBTCxHQUFjLGNBQWMsTUFBZCxDQUFxQixTQUFyQixDQUFkO0FBQ0g7O0FBRUQsWUFBSSxLQUFLLFVBQUwsSUFBbUIsVUFBVSxNQUFqQyxFQUF5QztBQUNyQyxnQkFBSSxLQUFLLFVBQUwsQ0FBZ0IsTUFBaEIsS0FBMkIsQ0FBL0IsRUFBa0M7QUFDOUIscUJBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsS0FBSyxVQUF0QjtBQUNILGFBRkQsTUFFTztBQUNILHFCQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCLFVBQUMsQ0FBRCxFQUFJLENBQUosRUFBVTtBQUN2QiwyQkFBTyxPQUFLLFVBQUwsQ0FBZ0IsQ0FBaEIsSUFBcUIsT0FBSyxVQUFMLENBQWdCLENBQWhCLENBQTVCO0FBQ0gsaUJBRkQ7QUFHSDtBQUNKOztBQUVELFlBQUksQ0FBQyxNQUFELElBQVcsQ0FBQyxLQUFoQixFQUF1QjtBQUNuQixpQkFBSyxJQUFJLFVBQVEsQ0FBakIsRUFBb0IsVUFBUSxNQUFNLE1BQWxDLEVBQTBDLFNBQTFDLEVBQW1EO0FBQy9DLDJCQUFXLElBQVgsQ0FBZ0IsTUFBTSxPQUFOLENBQWhCO0FBQ0g7O0FBRUQsaUJBQUssT0FBTCxDQUFhLFFBQWIsRUFBdUIsSUFBdkIsQ0FBNEIsSUFBNUI7QUFDSDs7QUFFRCxZQUFJLEtBQUosRUFBVztBQUNQLGlCQUFLLE9BQUwsQ0FBYSxPQUFiLEVBQXNCLElBQXRCLENBQTJCLElBQTNCO0FBQ0g7O0FBRUQsYUFBSyxJQUFMLENBQVUsS0FBSyxNQUFmOztBQUVBLGVBQU8sS0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozt5QkFJQSxNLG1CQUFPLEssRUFBcUI7QUFBQSxZQUFkLE9BQWMseURBQUosRUFBSTs7QUFDeEIsWUFBSSxRQUFRLEtBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsS0FBcEIsQ0FBWjtBQUFBLFlBQ0ksY0FBYyxLQUFLLEtBQUwsQ0FBVyxTQUFYLENBQXFCLFdBRHZDOztBQUdBLFlBQUksUUFBUSxDQUFDLENBQWIsRUFBZ0I7QUFDWixpQkFBSyxNQUFMLENBQVksTUFBWixDQUFtQixLQUFuQixFQUEwQixDQUExQjtBQUNIOztBQUVELGFBQUssTUFBTCxDQUFZLE1BQU0sV0FBTixDQUFaLElBQWtDLFNBQWxDO0FBQ0EsYUFBSyxhQUFMLENBQW1CLEtBQW5COztBQUVBLFlBQUksQ0FBQyxRQUFRLEtBQWIsRUFBb0I7QUFDaEIsaUJBQUssT0FBTCxDQUFhLFFBQWIsRUFBdUIsSUFBdkIsQ0FBNEIsS0FBNUI7QUFDSDtBQUNKLEs7O0FBRUQ7Ozs7Ozt5QkFJQSxHLGdCQUFJLEssRUFBTyxPLEVBQVM7QUFDaEIsWUFBSSxTQUFTLEtBQUssV0FBTCxDQUFpQixDQUFDLEtBQUQsQ0FBakIsRUFBMEIsT0FBMUIsQ0FBYjs7QUFFQSxlQUFPLE9BQU8sQ0FBUCxDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7O3lCQUlBLE0sbUJBQU8sSyxFQUFPLE8sRUFBUztBQUNuQixlQUFPLEtBQUssR0FBTCxDQUFTLEtBQVQsRUFBZ0IsT0FBaEIsRUFBeUIsSUFBekIsQ0FBOEIsT0FBOUIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7O3lCQUdBLFcsd0JBQVksSyxFQUFPO0FBQUE7O0FBQ2YsYUFBSyxRQUFMLENBQWMsS0FBZCxFQUFxQixVQUFDLEtBQUQsRUFBUSxHQUFSLEVBQWdCO0FBQ2pDLG1CQUFLLE9BQUwsQ0FBYSxZQUFZLEdBQXpCLEVBQThCLElBQTlCLENBQW1DLEtBQW5DO0FBQ0gsU0FGRDs7QUFJQSxhQUFLLFFBQUwsQ0FBYyxNQUFNLE9BQU4sQ0FBYyxRQUFkLENBQWQsRUFBdUMsaUJBQVM7QUFDNUMsbUJBQUssTUFBTCxDQUFZLEtBQVo7QUFDSCxTQUZEO0FBR0gsSzs7QUFFRDs7Ozs7Ozt5QkFLQSxHLGdCQUFJLFEsRUFBVTtBQUNWLGVBQU8sS0FBSyxNQUFMLENBQVksR0FBWixDQUFnQixRQUFoQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7eUJBR0EsTyxvQkFBUSxRLEVBQVU7QUFDZCxhQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CLFFBQXBCO0FBQ0gsSzs7QUFFRDs7Ozs7Ozt5QkFLQSxJLGlCQUFLLFEsRUFBVTtBQUNYLGVBQU8sS0FBSyxNQUFMLENBQVksSUFBWixDQUFpQixRQUFqQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozt5QkFLQSxTLHNCQUFVLFEsRUFBVTtBQUNoQixlQUFPLEtBQUssTUFBTCxDQUFZLFNBQVosQ0FBc0IsUUFBdEIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7eUJBS0EsTSxtQkFBTyxRLEVBQVU7QUFDYixlQUFPLEtBQUssTUFBTCxDQUFZLE1BQVosQ0FBbUIsUUFBbkIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7eUJBS0EsSyxrQkFBTSxRLEVBQVU7QUFDWixlQUFPLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBa0IsUUFBbEIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7eUJBS0EsSSxpQkFBSyxRLEVBQVU7QUFDWCxlQUFPLEtBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsUUFBakIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7eUJBS0EsUSxxQkFBUyxLLEVBQU87QUFDWixlQUFPLEtBQUssTUFBTCxDQUFZLFFBQVosQ0FBcUIsS0FBckIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7eUJBS0EsSyxvQkFBYTtBQUFBLFlBQVAsQ0FBTyx5REFBSCxDQUFHOztBQUNULGVBQU8sTUFBTSxDQUFOLEdBQVUsS0FBSyxNQUFMLENBQVksQ0FBWixDQUFWLEdBQTJCLEtBQUssTUFBTCxDQUFZLEtBQVosQ0FBa0IsQ0FBbEIsRUFBcUIsQ0FBckIsQ0FBbEM7QUFDSCxLOztBQUVEOzs7Ozs7O3lCQUtBLEssa0JBQU0sSSxFQUFNO0FBQ1IsZUFBTyxLQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCO0FBQUEsbUJBQVMsTUFBTSxJQUFOLENBQVQ7QUFBQSxTQUFoQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozt5QkFLQSxPLG9CQUFRLEssRUFBTztBQUNYLGVBQU8sS0FBSyxNQUFMLENBQVksT0FBWixDQUFvQixLQUFwQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7QUFPQTs7Ozt5QkFJQSxhLDBCQUFjLEssRUFBTztBQUNqQixlQUFPLEtBQUssU0FBTCxDQUFlLEtBQWYsTUFBMEIsS0FBSyxTQUFMLENBQWUsS0FBSyxVQUFwQixDQUFqQztBQUNILEs7O0FBRUQ7Ozs7Ozs7O3lCQU1BLEssa0JBQU0sSSxFQUFNLE0sRUFBUTtBQUNoQixlQUFPLElBQVA7QUFDSCxLOztBQUVEOzs7Ozt5QkFHQSxVLHlCQUFhO0FBQ1QsZUFBTyxLQUFLLE9BQVo7QUFDSCxLOztBQUVEOzs7Ozt5QkFHQSxRLHVCQUFXO0FBQ1AsZUFBTyxLQUFLLE1BQVo7QUFDSCxLOztBQUVEOzs7Ozs7O3lCQUtBLEssa0JBQU0sSSxFQUFNO0FBQ1IsWUFBSSxTQUFTLFFBQWIsRUFBdUI7QUFDbkIsbUJBQU8sS0FBSyxXQUFMLEVBQVA7QUFDSDs7QUFFRCxlQUFPLEtBQUssSUFBTCxDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7eUJBR0EsVywwQkFBYztBQUFBOztBQUNWLFlBQUksQ0FBQyxLQUFLLFlBQVYsRUFBd0I7QUFBQTtBQUNwQixvQkFBSSxjQUFKOztBQUVBLHVCQUFLLFlBQUwsR0FBb0IsMkJBQWU7QUFDL0IsdUJBRCtCLGlCQUN6QjtBQUNGLCtCQUFPLE1BQU0sTUFBYjtBQUNILHFCQUg4QjtBQUkvQiw2QkFKK0IsdUJBSW5CO0FBQUE7O0FBQ1IsNkJBQUssUUFBTCxDQUFjLEtBQWQsRUFBcUI7QUFBQSxtQ0FBTSxPQUFLLFNBQUwsQ0FBZSxNQUFNLE1BQXJCLENBQU47QUFBQSx5QkFBckI7QUFDSDtBQU44QixpQkFBZixDQUFwQjtBQUhvQjtBQVd2Qjs7QUFFRCxlQUFPLEtBQUssWUFBWjtBQUNILEs7O0FBRUQ7Ozs7Ozs7eUJBS0EsSyxvQkFBUTtBQUNKLGVBQU8sS0FBSyxRQUFaO0FBQ0gsSzs7QUFFRDs7Ozs7eUJBR0EsTyxzQkFBVTtBQUNOLGFBQUssYUFBTDtBQUNBLGFBQUssR0FBTDtBQUNBLGFBQUssTUFBTCxHQUFjLEVBQWQ7QUFDSCxLOztBQUVEOzs7Ozt5QkFHQSxTLHdCQUFZO0FBQ1IsWUFBSSxTQUFTLEtBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0I7QUFBQSxtQkFBUyxNQUFNLFNBQU4sRUFBVDtBQUFBLFNBQWhCLENBQWI7O0FBRUEsZUFBTztBQUNILG1CQUFPLEtBQUssVUFEVDtBQUVIO0FBRkcsU0FBUDtBQUlILEs7O0FBRUQ7Ozs7Ozs7OztlQU9PLE8sMEJBQXlCLFksRUFBYztBQUFBLFlBQTlCLE1BQThCLFFBQTlCLE1BQThCO0FBQUEsWUFBdEIsS0FBc0IsUUFBdEIsS0FBc0I7O0FBQzFDLFlBQUksUUFBUSxLQUFLLFNBQUwsQ0FBZSxLQUEzQjtBQUFBLFlBQ0ksa0JBQWtCLE9BQU8sR0FBUCxDQUFXO0FBQUEsbUJBQVMsTUFBTSxPQUFOLENBQWMsS0FBZCxFQUFxQixZQUFyQixDQUFUO0FBQUEsU0FBWCxDQUR0QjtBQUFBLFlBRUksV0FBVyxLQUFLLFdBQUwsQ0FBaUIsZUFBakIsRUFBa0MsWUFBbEMsQ0FGZjs7QUFJQSxpQkFBUyxVQUFULEdBQXNCLEtBQXRCOztBQUVBLGVBQU8sUUFBUDtBQUNILEs7O0FBRUQ7Ozs7OztlQUlPLE8sb0JBQVEsTyxFQUFTO0FBQ3BCLGVBQU8sS0FBSyxXQUFMLENBQWlCLElBQWpCLEVBQXVCLE9BQXZCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7OztlQU1PLFcsd0JBQVksSSxFQUFNLE8sRUFBUztBQUM5QixlQUFPLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxPQUFmLENBQVA7QUFDSCxLOzs7OzRCQXBJWTtBQUNULG1CQUFPLEtBQUssTUFBTCxDQUFZLE1BQW5CO0FBQ0giLCJmaWxlIjoiQ29sbGVjdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7TW9kZWx9IGZyb20gJy4vTW9kZWwnO1xuaW1wb3J0IHtFdmVudHN9IGZyb20gJy4vRXZlbnRzJztcbmltcG9ydCB7VmFsdWVQcm94eX0gZnJvbSAnLi9WYWx1ZVByb3h5JztcbmltcG9ydCB7UHJvdG90eXBlfSBmcm9tICcuLi9EZWNvcmF0b3JzL1Byb3RvdHlwZSc7XG5cbkBQcm90b3R5cGUoe1xuICAgIE1vZGVsXG59KVxuZXhwb3J0IGNsYXNzIENvbGxlY3Rpb24gZXh0ZW5kcyBFdmVudHMge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fVtdfSBbbW9kZWxzXVxuICAgICAqIEBwYXJhbSB7e319IFtvcHRpb25zXVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1vZGVscywgb3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubW9kZWxzID0gW107XG4gICAgICAgIHRoaXMuX2luZGV4ID0ge307XG5cbiAgICAgICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgb3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9kZWxzKSB7XG4gICAgICAgICAgICB0aGlzLm1lcmdlTW9kZWxzKG1vZGVscywge3NpbGVudDogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaW5pdGlhbGl6ZSkge1xuICAgICAgICAgICAgdGhpcy5pbml0aWFsaXplKG1vZGVscywgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3tkYXRhOiB7fSwgW3F1ZXJ5XToge319fSBwYXJhbXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPENvbGxlY3Rpb24+fVxuICAgICAqL1xuICAgIGZldGNoKHBhcmFtcyA9IHt9KSB7XG4gICAgICAgIHBhcmFtcyA9IE9iamVjdC5hc3NpZ24oe3BhcnNlOiB0cnVlfSwgcGFyYW1zKTtcblxuICAgICAgICBsZXQgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIHVybDogcGFyYW1zLnVybCB8fCB0aGlzLnVybCxcbiAgICAgICAgICAgIHF1ZXJ5OiBwYXJhbXMucXVlcnkgfHwge31cbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoIXBhcmFtcy5mb3JjZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNRdWVyaWVzU2FtZShvcHRpb25zLnF1ZXJ5KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZSA9IHRoaXMuZ2V0UmVxdWVzdCgpLnJlcXVlc3Qob3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHRoaXMucHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCBwYXJhbXMpKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RRdWVyeSA9IG9wdGlvbnMucXVlcnk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1tdfSByZXNwb25zZVxuICAgICAqIEBwYXJhbSB7e319IHBhcmFtc1xuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgcHJvY2Vzc1Jlc3BvbnNlKHJlc3BvbnNlLCBwYXJhbXMpIHtcbiAgICAgICAgaWYgKHBhcmFtcy5wYXJzZSkge1xuICAgICAgICAgICAgcmVzcG9uc2UgPSB0aGlzLnBhcnNlKHJlc3BvbnNlLCBwYXJhbXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMubWVyZ2VNb2RlbHMocmVzcG9uc2UsIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fVtdfSBtb2RlbHNcbiAgICAgKiBAcGFyYW0ge3t9fSBbcGFyYW1zXVxuICAgICAqL1xuICAgIG1lcmdlTW9kZWxzKG1vZGVscywgcGFyYW1zID0ge30pIHtcbiAgICAgICAgbGV0IE1vZGVsID0gdGhpcy5Nb2RlbCxcbiAgICAgICAgICAgIHNpbGVudCA9IHBhcmFtcy5zaWxlbnQsXG4gICAgICAgICAgICByZXNldCA9IHBhcmFtcy5yZXNldCxcbiAgICAgICAgICAgIHJlbW92ZSA9IHJlc2V0IHx8IHBhcmFtcy5yZW1vdmUsXG4gICAgICAgICAgICBpZEF0dHJpYnV0ZSA9IE1vZGVsLnByb3RvdHlwZS5pZEF0dHJpYnV0ZSxcbiAgICAgICAgICAgIGFkZENoYW5uZWwgPSB0aGlzLmNoYW5uZWwoJ2FkZCcpLFxuICAgICAgICAgICAgY3VycmVudE1vZGVscyA9IHRoaXMubW9kZWxzLnNsaWNlKCksXG4gICAgICAgICAgICBuZXdNb2RlbHMgPSBbXSxcbiAgICAgICAgICAgIHRvQWRkID0gW107XG5cbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IG1vZGVscy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBhdHRycyA9IG1vZGVsc1tpbmRleF0sXG4gICAgICAgICAgICAgICAgaXNNb2RlbCA9IG1vZGVsc1tpbmRleF0gaW5zdGFuY2VvZiBNb2RlbCxcbiAgICAgICAgICAgICAgICBpZCA9IGF0dHJzW2lkQXR0cmlidXRlXSxcbiAgICAgICAgICAgICAgICBwcmV2aW91cyA9IGlkICYmIHRoaXMuX2luZGV4W2lkXTtcblxuICAgICAgICAgICAgLy8gTWVyZ2VcbiAgICAgICAgICAgIGlmIChwcmV2aW91cykge1xuICAgICAgICAgICAgICAgIGxldCBpbmRleCA9IGN1cnJlbnRNb2RlbHMuaW5kZXhPZihwcmV2aW91cyk7XG4gICAgICAgICAgICAgICAgY3VycmVudE1vZGVscy5zcGxpY2UoaW5kZXgsIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFpc01vZGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzLnNldEF0dHJzKGF0dHJzKTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBuZXdNb2RlbHMucHVzaChwcmV2aW91cyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxldCBtb2RlbCA9IGlzTW9kZWwgPyBhdHRycyA6IE1vZGVsLmRhdGFGYWN0b3J5KGF0dHJzLCB7XG4gICAgICAgICAgICAgICAgICAgIHJlcXVlc3Q6IHRoaXMuZ2V0UmVxdWVzdCgpLFxuICAgICAgICAgICAgICAgICAgICBwYXJzZTogcGFyYW1zLnBhcnNlXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRleFttb2RlbFtpZEF0dHJpYnV0ZV1dID0gbW9kZWw7XG4gICAgICAgICAgICAgICAgbmV3TW9kZWxzLnB1c2gobW9kZWwpO1xuICAgICAgICAgICAgICAgIHRvQWRkLnB1c2gobW9kZWwpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Nb2RlbChtb2RlbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocmVtb3ZlKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVscyA9IG5ld01vZGVscztcblxuICAgICAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGN1cnJlbnRNb2RlbHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoY3VycmVudE1vZGVsc1tpbmRleF0sIHtzaWxlbnQ6IHNpbGVudCB8fCByZXNldH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5tb2RlbHMgPSBjdXJyZW50TW9kZWxzLmNvbmNhdChuZXdNb2RlbHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29tcGFyYXRvciAmJiBuZXdNb2RlbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb21wYXJhdG9yLmxlbmd0aCA9PT0gMikge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZWxzLnNvcnQodGhpcy5jb21wYXJhdG9yKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbHMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJhdG9yKGEpIC0gdGhpcy5jb21wYXJhdG9yKGIpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzaWxlbnQgJiYgIXJlc2V0KSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpbmRleCA9IDA7IGluZGV4IDwgdG9BZGQubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgYWRkQ2hhbm5lbC5lbWl0KHRvQWRkW2luZGV4XSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbCgndXBkYXRlJykuZW1pdCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZXNldCkge1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsKCdyZXNldCcpLmVtaXQodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmVtaXQodGhpcy5tb2RlbHMpO1xuXG4gICAgICAgIHJldHVybiB0b0FkZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge01vZGVsfHt9fSBtb2RlbFxuICAgICAqIEBwYXJhbSB7e319IG9wdGlvbnNcbiAgICAgKi9cbiAgICByZW1vdmUobW9kZWwsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBsZXQgaW5kZXggPSB0aGlzLm1vZGVscy5pbmRleE9mKG1vZGVsKSxcbiAgICAgICAgICAgIGlkQXR0cmlidXRlID0gdGhpcy5Nb2RlbC5wcm90b3R5cGUuaWRBdHRyaWJ1dGU7XG5cbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZWxzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9pbmRleFttb2RlbFtpZEF0dHJpYnV0ZV1dID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcobW9kZWwpO1xuXG4gICAgICAgIGlmICghb3B0aW9ucy5yZXNldCkge1xuICAgICAgICAgICAgdGhpcy5jaGFubmVsKCdyZW1vdmUnKS5lbWl0KG1vZGVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGF0dHJzXG4gICAgICogQHBhcmFtIHt7fX0gW29wdGlvbnNdXG4gICAgICovXG4gICAgYWRkKGF0dHJzLCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBtb2RlbHMgPSB0aGlzLm1lcmdlTW9kZWxzKFthdHRyc10sIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBtb2RlbHNbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fX0gYXR0cnNcbiAgICAgKiBAcGFyYW0ge3t9fSBbb3B0aW9uc11cbiAgICAgKi9cbiAgICBjcmVhdGUoYXR0cnMsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGF0dHJzLCBvcHRpb25zKS5zYXZlKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsXG4gICAgICovXG4gICAgbGlzdGVuTW9kZWwobW9kZWwpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyhtb2RlbCwgKG1vZGVsLCBrZXkpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbCgnY2hhbmdlOicgKyBrZXkpLmVtaXQobW9kZWwpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmxpc3RlblRvKG1vZGVsLmNoYW5uZWwoJ3JlbW92ZScpLCBtb2RlbCA9PiB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZShtb2RlbCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7W119XG4gICAgICovXG4gICAgbWFwKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVscy5tYXAoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICovXG4gICAgZm9yRWFjaChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLm1vZGVscy5mb3JFYWNoKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqIFxuICAgICAqIEByZXR1cm5zIHtNb2RlbH1cbiAgICAgKi9cbiAgICBmaW5kKGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVscy5maW5kKGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBmaW5kSW5kZXgoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxzLmZpbmRJbmRleChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtbXX1cbiAgICAgKi9cbiAgICBmaWx0ZXIoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxzLmZpbHRlcihjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGV2ZXJ5KGNhbGxiYWNrKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVscy5ldmVyeShjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2FsbGJhY2tcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIHNvbWUoY2FsbGJhY2spIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxzLnNvbWUoY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TW9kZWx9IG1vZGVsXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpbmNsdWRlcyhtb2RlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHMuaW5jbHVkZXMobW9kZWwpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TW9kZWx8TW9kZWxbXX1cbiAgICAgKi9cbiAgICBmaXJzdChuID0gMSkge1xuICAgICAgICByZXR1cm4gbiA9PT0gMSA/IHRoaXMubW9kZWxzWzBdIDogdGhpcy5tb2RlbHMuc2xpY2UoMCwgbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9bmFtZVxuICAgICAqXG4gICAgICogQHJldHVybiB7KltdfVxuICAgICAqL1xuICAgIHBsdWNrKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZWxzLm1hcChtb2RlbCA9PiBtb2RlbFtuYW1lXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtNb2RlbH0gbW9kZWxcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9XG4gICAgICovXG4gICAgaW5kZXhPZihtb2RlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHMuaW5kZXhPZihtb2RlbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge251bWJlcn1cbiAgICAgKi9cbiAgICBnZXQgbGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlbHMubGVuZ3RoO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IHF1ZXJ5XG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgaXNRdWVyaWVzU2FtZShxdWVyeSkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkocXVlcnkpID09PSBKU09OLnN0cmluZ2lmeSh0aGlzLl9sYXN0UXVlcnkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGRhdGFcbiAgICAgKiBAcGFyYW0ge3t9fSBwYXJhbXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHBhcnNlKGRhdGEsIHBhcmFtcykge1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7QWJzdHJhY3RSZXF1ZXN0fVxuICAgICAqL1xuICAgIGdldFJlcXVlc3QoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlcXVlc3Q7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge01vZGVsW119XG4gICAgICovXG4gICAgZ2V0VmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGVscztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1ZhbHVlUHJveHl9XG4gICAgICovXG4gICAgcHJveHkobmFtZSkge1xuICAgICAgICBpZiAobmFtZSA9PT0gJ2xlbmd0aCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aFByb3h5KCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7VmFsdWVQcm94eTxudW1iZXI+fVxuICAgICAqL1xuICAgIGxlbmd0aFByb3h5KCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xlbmd0aFByb3h5KSB7XG4gICAgICAgICAgICBsZXQgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgICAgICB0aGlzLl9sZW5ndGhQcm94eSA9IG5ldyBWYWx1ZVByb3h5KHtcbiAgICAgICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oX3RoaXMsICgpID0+IHRoaXMuZW1pdFZhbHVlKF90aGlzLmxlbmd0aCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5fbGVuZ3RoUHJveHk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2FpdCBmb3IgY29tcGxldGUgbGFzdCBwcm9taXNlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VmFsdWVQcm94eX1cbiAgICAgKi9cbiAgICBhc3luYygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Byb21pc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmYXVsdCBkZXN0cm95XG4gICAgICovXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XG4gICAgICAgIHRoaXMub2ZmKCk7XG4gICAgICAgIHRoaXMubW9kZWxzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3t9fVxuICAgICAqL1xuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgbGV0IG1vZGVscyA9IHRoaXMubW9kZWxzLm1hcChtb2RlbCA9PiBtb2RlbC5zZXJpYWxpemUoKSk7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHF1ZXJ5OiB0aGlzLl9sYXN0UXVlcnksXG4gICAgICAgICAgICBtb2RlbHNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9W119IG1vZGVsc1xuICAgICAqIEBwYXJhbSB7e319IHF1ZXJ5XG4gICAgICogQHBhcmFtIHt7fX0gZGVwZW5kZW5jaWVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAgICovXG4gICAgc3RhdGljIHJlc3RvcmUoe21vZGVscywgcXVlcnl9LCBkZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgbGV0IE1vZGVsID0gdGhpcy5wcm90b3R5cGUuTW9kZWwsXG4gICAgICAgICAgICBtb2RlbHNJbnN0YW5jZXMgPSBtb2RlbHMubWFwKG1vZGVsID0+IE1vZGVsLnJlc3RvcmUobW9kZWwsIGRlcGVuZGVuY2llcykpLFxuICAgICAgICAgICAgaW5zdGFuY2UgPSB0aGlzLmRhdGFGYWN0b3J5KG1vZGVsc0luc3RhbmNlcywgZGVwZW5kZW5jaWVzKTtcblxuICAgICAgICBpbnN0YW5jZS5fbGFzdFF1ZXJ5ID0gcXVlcnk7XG5cbiAgICAgICAgcmV0dXJuIGluc3RhbmNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7TW9kZWx9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkob3B0aW9ucykge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhRmFjdG9yeShudWxsLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fG51bGx9IGRhdGFcbiAgICAgKiBAcGFyYW0ge3t9fSBbb3B0aW9uc11cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtNb2RlbH1cbiAgICAgKi9cbiAgICBzdGF0aWMgZGF0YUZhY3RvcnkoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMoZGF0YSwgb3B0aW9ucyk7XG4gICAgfVxuXG59XG4iXX0=

/***/ },
/* 180 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	
	var _defineProperty = __webpack_require__(181);
	
	var _defineProperty2 = _interopRequireDefault(_defineProperty);
	
	function _interopRequireDefault(obj) {
	  return obj && obj.__esModule ? obj : { default: obj };
	}
	
	exports.default = function () {
	  function defineProperties(target, props) {
	    for (var i = 0; i < props.length; i++) {
	      var descriptor = props[i];
	      descriptor.enumerable = descriptor.enumerable || false;
	      descriptor.configurable = true;
	      if ("value" in descriptor) descriptor.writable = true;
	      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
	    }
	  }
	
	  return function (Constructor, protoProps, staticProps) {
	    if (protoProps) defineProperties(Constructor.prototype, protoProps);
	    if (staticProps) defineProperties(Constructor, staticProps);
	    return Constructor;
	  };
	}();

/***/ },
/* 181 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	module.exports = { "default": __webpack_require__(182), __esModule: true };

/***/ },
/* 182 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	__webpack_require__(183);
	var $Object = __webpack_require__(18).Object;
	module.exports = function defineProperty(it, key, desc) {
	  return $Object.defineProperty(it, key, desc);
	};

/***/ },
/* 183 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	var $export = __webpack_require__(16);
	// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
	$export($export.S + $export.F * !__webpack_require__(26), 'Object', { defineProperty: __webpack_require__(22).f });

/***/ },
/* 184 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.CollectionLens = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Collection2 = __webpack_require__(179);
	
	var _ValueProxy = __webpack_require__(84);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CollectionLens = exports.CollectionLens = function (_Collection) {
	    (0, _inherits3.default)(CollectionLens, _Collection);
	
	    function CollectionLens(baseCollection, filter) {
	        (0, _classCallCheck3.default)(this, CollectionLens);
	
	        var _this2 = (0, _possibleConstructorReturn3.default)(this, _Collection.call(this, null, {}));
	
	        _this2._baseCollection = baseCollection;
	        _this2._filter = filter;
	
	        _this2.comparator = baseCollection.comparator.bind(baseCollection);
	        return _this2;
	    }
	
	    CollectionLens.prototype.subscribe = function subscribe() {
	        var _this3 = this;
	
	        this.listenTo(this._baseCollection.channel('add'), function (model) {
	            return _this3._add(model);
	        });
	        this.listenTo(this._baseCollection.channel('remove'), function (model) {
	            return _this3._remove(model);
	        });
	
	        this._baseCollection.forEach(function (model) {
	            return _this3._add(model);
	        });
	    };
	
	    CollectionLens.prototype.constructValueProxy = function constructValueProxy() {
	        var _this = this;
	
	        return new _ValueProxy.ValueProxy({
	            get: function get() {
	                return _this;
	            },
	            subscribe: function subscribe() {
	                _this.subscribe();
	            },
	            unsubscribe: function unsubscribe() {
	                _this.stopListening();
	            }
	        });
	    };
	
	    CollectionLens.prototype._add = function _add(model) {
	        var _this4 = this;
	
	        var proxy = this._getProxy(model);
	
	        this.listenTo(proxy, function (accept) {
	            if (accept) {
	                _this4.add(model);
	            } else {
	                _this4.remove(model);
	            }
	        });
	
	        if (proxy.getValue()) {
	            this.add(model);
	        }
	    };
	
	    CollectionLens.prototype._remove = function _remove(model) {
	        this.remove(model);
	    };
	
	    CollectionLens.prototype._getProxy = function _getProxy(model) {
	        return this._filter.call(this._baseCollection, model);
	    };
	
	    CollectionLens.lens = function lens() {
	        return function (proto, name, desc) {
	            var filter = desc.value;
	
	            return {
	                get: function get() {
	                    var collection = new CollectionLens(this, filter),
	                        proxy = collection.constructValueProxy();
	
	                    Object.defineProperty(this, name, { value: proxy });
	
	                    return proxy;
	                }
	            };
	        };
	    };
	
	    return CollectionLens;
	}(_Collection2.Collection);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9EYXRhL0NvbGxlY3Rpb25MZW5zLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7SUFFYSxjLFdBQUEsYzs7O0FBRVQsNEJBQVksY0FBWixFQUE0QixNQUE1QixFQUFvQztBQUFBOztBQUFBLG9FQUNoQyx1QkFBTSxJQUFOLEVBQVksRUFBWixDQURnQzs7QUFHaEMsZUFBSyxlQUFMLEdBQXVCLGNBQXZCO0FBQ0EsZUFBSyxPQUFMLEdBQWUsTUFBZjs7QUFFQSxlQUFLLFVBQUwsR0FBa0IsZUFBZSxVQUFmLENBQTBCLElBQTFCLENBQStCLGNBQS9CLENBQWxCO0FBTmdDO0FBT25DOzs2QkFFRCxTLHdCQUFZO0FBQUE7O0FBQ1IsYUFBSyxRQUFMLENBQWMsS0FBSyxlQUFMLENBQXFCLE9BQXJCLENBQTZCLEtBQTdCLENBQWQsRUFBbUQ7QUFBQSxtQkFBUyxPQUFLLElBQUwsQ0FBVSxLQUFWLENBQVQ7QUFBQSxTQUFuRDtBQUNBLGFBQUssUUFBTCxDQUFjLEtBQUssZUFBTCxDQUFxQixPQUFyQixDQUE2QixRQUE3QixDQUFkLEVBQXNEO0FBQUEsbUJBQVMsT0FBSyxPQUFMLENBQWEsS0FBYixDQUFUO0FBQUEsU0FBdEQ7O0FBRUEsYUFBSyxlQUFMLENBQXFCLE9BQXJCLENBQTZCO0FBQUEsbUJBQVMsT0FBSyxJQUFMLENBQVUsS0FBVixDQUFUO0FBQUEsU0FBN0I7QUFDSCxLOzs2QkFFRCxtQixrQ0FBc0I7QUFDbEIsWUFBSSxRQUFRLElBQVo7O0FBRUEsZUFBTywyQkFBZTtBQUNsQixlQURrQixpQkFDWjtBQUNGLHVCQUFPLEtBQVA7QUFDSCxhQUhpQjtBQUlsQixxQkFKa0IsdUJBSU47QUFDUixzQkFBTSxTQUFOO0FBQ0gsYUFOaUI7QUFPbEIsdUJBUGtCLHlCQU9KO0FBQ1Ysc0JBQU0sYUFBTjtBQUNIO0FBVGlCLFNBQWYsQ0FBUDtBQVdILEs7OzZCQUVELEksaUJBQUssSyxFQUFPO0FBQUE7O0FBQ1IsWUFBSSxRQUFRLEtBQUssU0FBTCxDQUFlLEtBQWYsQ0FBWjs7QUFFQSxhQUFLLFFBQUwsQ0FBYyxLQUFkLEVBQXFCLGtCQUFVO0FBQzNCLGdCQUFJLE1BQUosRUFBWTtBQUNKLHVCQUFLLEdBQUwsQ0FBUyxLQUFUO0FBQ1AsYUFGRCxNQUVPO0FBQ0gsdUJBQUssTUFBTCxDQUFZLEtBQVo7QUFDSDtBQUNKLFNBTkQ7O0FBUUEsWUFBSSxNQUFNLFFBQU4sRUFBSixFQUFzQjtBQUNsQixpQkFBSyxHQUFMLENBQVMsS0FBVDtBQUNIO0FBQ0osSzs7NkJBRUQsTyxvQkFBUSxLLEVBQU87QUFDWCxhQUFLLE1BQUwsQ0FBWSxLQUFaO0FBQ0gsSzs7NkJBRUQsUyxzQkFBVSxLLEVBQU87QUFDYixlQUFPLEtBQUssT0FBTCxDQUFhLElBQWIsQ0FBa0IsS0FBSyxlQUF2QixFQUF3QyxLQUF4QyxDQUFQO0FBQ0gsSzs7bUJBRU0sSSxtQkFBTztBQUNWLGVBQU8sVUFBQyxLQUFELEVBQVEsSUFBUixFQUFjLElBQWQsRUFBdUI7QUFDMUIsZ0JBQUksU0FBUyxLQUFLLEtBQWxCOztBQUVBLG1CQUFPO0FBQ0gsbUJBREcsaUJBQ0c7QUFDRix3QkFBSSxhQUFhLElBQUksY0FBSixDQUFtQixJQUFuQixFQUF5QixNQUF6QixDQUFqQjtBQUFBLHdCQUNJLFFBQVEsV0FBVyxtQkFBWCxFQURaOztBQUdBLDJCQUFPLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsSUFBNUIsRUFBa0MsRUFBQyxPQUFPLEtBQVIsRUFBbEM7O0FBRUEsMkJBQU8sS0FBUDtBQUNIO0FBUkUsYUFBUDtBQVVILFNBYkQ7QUFjSCxLIiwiZmlsZSI6IkNvbGxlY3Rpb25MZW5zLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb2xsZWN0aW9ufSBmcm9tICcuL0NvbGxlY3Rpb24nO1xuaW1wb3J0IHtWYWx1ZVByb3h5fSBmcm9tICcuL1ZhbHVlUHJveHknO1xuXG5leHBvcnQgY2xhc3MgQ29sbGVjdGlvbkxlbnMgZXh0ZW5kcyBDb2xsZWN0aW9uIHtcblxuICAgIGNvbnN0cnVjdG9yKGJhc2VDb2xsZWN0aW9uLCBmaWx0ZXIpIHtcbiAgICAgICAgc3VwZXIobnVsbCwge30pO1xuXG4gICAgICAgIHRoaXMuX2Jhc2VDb2xsZWN0aW9uID0gYmFzZUNvbGxlY3Rpb247XG4gICAgICAgIHRoaXMuX2ZpbHRlciA9IGZpbHRlcjtcblxuICAgICAgICB0aGlzLmNvbXBhcmF0b3IgPSBiYXNlQ29sbGVjdGlvbi5jb21wYXJhdG9yLmJpbmQoYmFzZUNvbGxlY3Rpb24pO1xuICAgIH1cblxuICAgIHN1YnNjcmliZSgpIHtcbiAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLl9iYXNlQ29sbGVjdGlvbi5jaGFubmVsKCdhZGQnKSwgbW9kZWwgPT4gdGhpcy5fYWRkKG1vZGVsKSk7XG4gICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5fYmFzZUNvbGxlY3Rpb24uY2hhbm5lbCgncmVtb3ZlJyksIG1vZGVsID0+IHRoaXMuX3JlbW92ZShtb2RlbCkpO1xuXG4gICAgICAgIHRoaXMuX2Jhc2VDb2xsZWN0aW9uLmZvckVhY2gobW9kZWwgPT4gdGhpcy5fYWRkKG1vZGVsKSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0VmFsdWVQcm94eSgpIHtcbiAgICAgICAgbGV0IF90aGlzID0gdGhpcztcblxuICAgICAgICByZXR1cm4gbmV3IFZhbHVlUHJveHkoe1xuICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcztcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3RvcExpc3RlbmluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfYWRkKG1vZGVsKSB7XG4gICAgICAgIGxldCBwcm94eSA9IHRoaXMuX2dldFByb3h5KG1vZGVsKTtcblxuICAgICAgICB0aGlzLmxpc3RlblRvKHByb3h5LCBhY2NlcHQgPT4ge1xuICAgICAgICAgICAgaWYgKGFjY2VwdCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChtb2RlbCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKG1vZGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHByb3h5LmdldFZhbHVlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkKG1vZGVsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZW1vdmUobW9kZWwpIHtcbiAgICAgICAgdGhpcy5yZW1vdmUobW9kZWwpO1xuICAgIH1cblxuICAgIF9nZXRQcm94eShtb2RlbCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZmlsdGVyLmNhbGwodGhpcy5fYmFzZUNvbGxlY3Rpb24sIG1vZGVsKTtcbiAgICB9XG5cbiAgICBzdGF0aWMgbGVucygpIHtcbiAgICAgICAgcmV0dXJuIChwcm90bywgbmFtZSwgZGVzYykgPT4ge1xuICAgICAgICAgICAgbGV0IGZpbHRlciA9IGRlc2MudmFsdWU7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZ2V0KCkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29sbGVjdGlvbiA9IG5ldyBDb2xsZWN0aW9uTGVucyh0aGlzLCBmaWx0ZXIpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJveHkgPSBjb2xsZWN0aW9uLmNvbnN0cnVjdFZhbHVlUHJveHkoKTtcblxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgbmFtZSwge3ZhbHVlOiBwcm94eX0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm94eTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgIH1cblxufSJdfQ==

/***/ },
/* 185 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Component = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _createClass2 = __webpack_require__(180);
	
	var _createClass3 = _interopRequireDefault(_createClass2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _utils = __webpack_require__(186);
	
	var _ValueProxy = __webpack_require__(84);
	
	var _Prototype = __webpack_require__(174);
	
	var _Model = __webpack_require__(178);
	
	var _TextComponent = __webpack_require__(187);
	
	var _AbstractComponent2 = __webpack_require__(188);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Component = exports.Component = (_dec = (0, _Prototype.Prototype)({
	    tagName: 'div',
	    styles: {}
	}), _dec(_class = function (_AbstractComponent) {
	    (0, _inherits3.default)(Component, _AbstractComponent);
	
	    /**
	     * @param {{[env]: Environment}} options
	     */
	    function Component() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	        (0, _classCallCheck3.default)(this, Component);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _AbstractComponent.call(this, options));
	
	        var events = _this.events,
	            attributes = _this.attributes;
	
	        Object.assign(_this, options);
	
	        if (events || options.events) {
	            _this.events = Object.assign({}, events, options.events);
	        }
	
	        if (attributes || options.attributes) {
	            _this.attributes = Object.assign({}, attributes, options.attributes);
	        } else {
	            _this.attributes = {};
	        }
	
	        _this._className = (0, _utils.result)(_this, 'class') || (0, _utils.result)(_this, 'className');
	
	        _this._listenAttributes = {};
	
	        if (_this.element) {
	            _this._isRendered = true;
	        }
	
	        if (_this.initialize) {
	            _this.initialize(options);
	        }
	        return _this;
	    }
	
	    /**
	     * Render component
	     *
	     * @params {Element} element restore
	     */
	
	
	    Component.prototype.render = function render() {
	        var element = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	        var className = this._className,
	            attributes = this.attributes,
	            tagName = this.tagName;
	
	        if (!this.isRendered()) {
	            if (element) {
	                this.element = element;
	            } else {
	                this.element = this.getRenderer().createElement(tagName);
	            }
	        }
	
	        if (className !== undefined) {
	            attributes['class'] = className;
	        }
	
	        this.setAttributes(attributes, element);
	        this.renderContent(element);
	
	        if (!this.isRendered()) {
	            this.listenEvents();
	        }
	
	        if (this.onRender) {
	            this.onRender();
	        }
	
	        this._isRendered = true;
	    };
	
	    /**
	     * @returns {Component[]}
	     */
	
	
	    Component.prototype.renderContent = function renderContent() {
	        var element = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	        var content = this.prepareContent(),
	            renderer = this.getRenderer();
	
	        var components = [],
	            currentComponents = this.components.slice(),
	            newComponents = content,
	            elements = element ? [].slice.call(element.childNodes) : [];
	
	        if (element) {
	            // Browser generate tbody for table
	            // if we have only it - ignore
	            if (element.tagName && element.tagName.toLowerCase() === 'table' && elements.length === 1) {
	                elements = [].slice.call(elements[0].childNodes);
	            }
	
	            if (newComponents.length !== elements.length) {
	                // if we have empty element, just render
	                if (elements.length) {
	                    console.warn('Restore Components count %d, but we have %d nodes', newComponents.length, elements.length);
	
	                    // clean component and render
	                    renderer.clear(this.element);
	                }
	
	                element = null;
	                elements = [];
	            }
	        }
	
	        for (var index = 0; index < newComponents.length; index++) {
	            var component = this.prepareComponent(newComponents[index]),
	                currentIndex = currentComponents.indexOf(component);
	
	            if (component) {
	                if (currentIndex !== -1) {
	                    currentComponents.splice(currentIndex, 1);
	                }
	
	                if (!component.isRendered()) {
	                    this.getEnv().render(component, element && elements.shift());
	                }
	
	                components.push(component);
	            }
	        }
	
	        for (var _index = 0; _index < currentComponents.length; _index++) {
	            currentComponents[_index].destroy();
	        }
	
	        this.components = components;
	
	        if (!element) {
	            for (var _index2 = 0; _index2 < components.length; _index2++) {
	                renderer.append(this.element, components[_index2].getElement());
	            }
	        }
	
	        return components;
	    };
	
	    /**
	     * @returns {*[]}
	     */
	
	
	    Component.prototype.prepareContent = function prepareContent() {
	        var content = this.content,
	            template = this.template;
	
	        if (typeof content === 'function') {
	            content = content(this);
	        }
	
	        if (template) {
	            content = template(this);
	        }
	
	        if (content == null) {
	            content = [];
	        }
	
	        if (!Array.isArray(content)) {
	            content = [content];
	        }
	
	        return content;
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {Component|ValueProxy|string|number|boolean|array} component
	     *
	     * @returns {AbstractComponent}
	     */
	
	
	    Component.prototype.prepareComponent = function prepareComponent(component) {
	        if (component instanceof _ValueProxy.ValueProxy || typeof component !== 'object') {
	            component = new _TextComponent.TextComponent({
	                content: component
	            });
	        }
	
	        return component;
	    };
	
	    /**
	     * @param {{}} attributes
	     * @param {Element} element
	     */
	
	
	    Component.prototype.setAttributes = function setAttributes(attributes) {
	        var _this2 = this;
	
	        var element = arguments.length <= 1 || arguments[1] === undefined ? null : arguments[1];
	
	        var options = { update: !element };
	
	        Object.keys(attributes).forEach(function (key) {
	            _this2.setAttribute(key, attributes[key], options);
	        });
	    };
	
	    /**
	     * @param {string} key
	     * @param {string|ValueProxy} attribute
	     * @param {boolean} update
	     */
	
	
	    Component.prototype.setAttribute = function setAttribute(key, attribute) {
	        var _this3 = this;
	
	        var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	        var _ref$update = _ref.update;
	        var update = _ref$update === undefined ? true : _ref$update;
	
	        var renderer = this.getRenderer();
	
	        if (attribute != null) {
	            if (attribute instanceof _ValueProxy.ValueProxy) {
	                if (this._listenAttributes[key]) {
	                    this._listenAttributes[key]();
	                }
	
	                var callback = this.getPlanner().commitWrapper(function (value) {
	                    if (_this3.isRendered()) {
	                        renderer.setAttribute(_this3.element, key, value);
	                    }
	                });
	
	                this.listenTo(attribute, callback);
	
	                this._listenAttributes[key] = function () {
	                    attribute.off(callback);
	                };
	            }
	
	            if (update) {
	                renderer.setAttribute(this.element, key, attribute);
	            }
	        }
	    };
	
	    /**
	     * Listen DOM events
	     */
	
	
	    Component.prototype.listenEvents = function listenEvents() {
	        var _this4 = this;
	
	        if (this.events) {
	            (function () {
	                var renderer = _this4.getRenderer();
	
	                Object.keys(_this4.events).forEach(function (event) {
	                    renderer.addEventListener(_this4.element, event, _this4.events[event].bind(_this4));
	                });
	            })();
	        }
	    };
	
	    /**
	     * @param {string} key
	     *
	     * @returns {ValueProxy}
	     */
	
	
	    Component.prototype.proxy = function proxy(key) {
	        return this[key];
	    };
	
	    /**
	     * @param {string} name
	     * @param {*} args
	     */
	
	
	    Component.prototype.emitEvent = function emitEvent(name) {
	        if (this.events && this.events[name]) {
	            var _events;
	
	            for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
	                args[_key - 1] = arguments[_key];
	            }
	
	            (_events = this.events)[name].apply(_events, args);
	        }
	    };
	
	    /**
	     * Destroy component
	     */
	
	
	    Component.prototype.destroy = function destroy() {
	        _AbstractComponent.prototype.destroy.call(this);
	        this.components.forEach(function (component) {
	            return component.destroy();
	        });
	    };
	
	    /**
	     * @returns {Model}
	     */
	
	
	    (0, _createClass3.default)(Component, [{
	        key: 'state',
	        get: function get() {
	            if (!this._state) {
	                this._state = new _Model.Model(this.stateDefaults);
	            }
	
	            return this._state;
	        }
	
	        /**
	         * @param {Model} state
	         */
	        ,
	        set: function set(state) {
	            this._state = state;
	        }
	    }]);
	    return Component;
	}(_AbstractComponent2.AbstractComponent)) || _class);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 186 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.escape = escape;
	exports.escapeAttribute = escapeAttribute;
	exports.result = result;
	var hasOwn = Object.hasOwnProperty;
	
	/**
	 * @param {string|*} value
	 * @returns {string}
	 */
	function escape(value) {
	    return String(value).replace(/</g, '&lt;').replace(/>/g, '&gt;');
	}
	
	/**
	 * @param {string|*} value
	 * @returns {string}
	 */
	function escapeAttribute(value) {
	    return escape(value).replace(/"/g, '&#34;');
	}
	
	/**
	 * @param {object} obj
	 * @param {string} key
	 *
	 * @returns {*}
	 */
	function result(obj, key) {
	    var value = void 0;
	
	    if (hasOwn.call(obj.options, key)) {
	        value = obj.options[key];
	    } else {
	        value = obj[key];
	    }
	
	    if (typeof value === 'function') {
	        return value.call(obj);
	    } else {
	        return value;
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2xpYi91dGlscy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7UUFNZ0IsTSxHQUFBLE07UUFVQSxlLEdBQUEsZTtRQVVBLE0sR0FBQSxNO0FBMUJoQixJQUFJLFNBQVMsT0FBTyxjQUFwQjs7QUFFQTs7OztBQUlPLFNBQVMsTUFBVCxDQUFnQixLQUFoQixFQUF1QjtBQUMxQixXQUFPLE9BQU8sS0FBUCxFQUNGLE9BREUsQ0FDTSxJQUROLEVBQ1ksTUFEWixFQUVGLE9BRkUsQ0FFTSxJQUZOLEVBRVksTUFGWixDQUFQO0FBR0g7O0FBRUQ7Ozs7QUFJTyxTQUFTLGVBQVQsQ0FBeUIsS0FBekIsRUFBZ0M7QUFDbkMsV0FBTyxPQUFPLEtBQVAsRUFBYyxPQUFkLENBQXNCLElBQXRCLEVBQTRCLE9BQTVCLENBQVA7QUFDSDs7QUFFRDs7Ozs7O0FBTU8sU0FBUyxNQUFULENBQWdCLEdBQWhCLEVBQXFCLEdBQXJCLEVBQTBCO0FBQzdCLFFBQUksY0FBSjs7QUFFQSxRQUFJLE9BQU8sSUFBUCxDQUFZLElBQUksT0FBaEIsRUFBeUIsR0FBekIsQ0FBSixFQUFtQztBQUMvQixnQkFBUSxJQUFJLE9BQUosQ0FBWSxHQUFaLENBQVI7QUFDSCxLQUZELE1BRU87QUFDSCxnQkFBUSxJQUFJLEdBQUosQ0FBUjtBQUNIOztBQUVELFFBQUksT0FBTyxLQUFQLEtBQWlCLFVBQXJCLEVBQWlDO0FBQzdCLGVBQU8sTUFBTSxJQUFOLENBQVcsR0FBWCxDQUFQO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsZUFBTyxLQUFQO0FBQ0g7QUFDSiIsImZpbGUiOiJ1dGlscy5qcyIsInNvdXJjZXNDb250ZW50IjpbImxldCBoYXNPd24gPSBPYmplY3QuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8Kn0gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGUodmFsdWUpIHtcbiAgICByZXR1cm4gU3RyaW5nKHZhbHVlKVxuICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXG4gICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7Jyk7XG59XG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd8Kn0gdmFsdWVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlc2NhcGVBdHRyaWJ1dGUodmFsdWUpIHtcbiAgICByZXR1cm4gZXNjYXBlKHZhbHVlKS5yZXBsYWNlKC9cIi9nLCAnJiMzNDsnKTtcbn1cblxuLyoqXG4gKiBAcGFyYW0ge29iamVjdH0gb2JqXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gKlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXN1bHQob2JqLCBrZXkpIHtcbiAgICBsZXQgdmFsdWU7XG5cbiAgICBpZiAoaGFzT3duLmNhbGwob2JqLm9wdGlvbnMsIGtleSkpIHtcbiAgICAgICAgdmFsdWUgPSBvYmoub3B0aW9uc1trZXldO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2tleV07XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gdmFsdWUuY2FsbChvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG59Il19

/***/ },
/* 187 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TextComponent = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _desc, _value, _class;
	
	var _AbstractComponent2 = __webpack_require__(188);
	
	var _ValueProxy = __webpack_require__(84);
	
	var _PlannerWrite = __webpack_require__(175);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	    var desc = {};
	    Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	    });
	    desc.enumerable = !!desc.enumerable;
	    desc.configurable = !!desc.configurable;
	
	    if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	    }
	
	    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	    }, desc);
	
	    if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	    }
	
	    if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	    }
	
	    return desc;
	}
	
	var TextComponent = exports.TextComponent = (_dec = (0, _PlannerWrite.PlannerWrite)(), (_class = function (_AbstractComponent) {
	    (0, _inherits3.default)(TextComponent, _AbstractComponent);
	
	    /**
	     * @param {{[env]: Environment}} options
	     */
	    function TextComponent() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	        (0, _classCallCheck3.default)(this, TextComponent);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _AbstractComponent.call(this, options));
	
	        Object.assign(_this, options);
	        return _this;
	    }
	
	    /**
	     * @param {Element} element
	     */
	
	
	    TextComponent.prototype.render = function render() {
	        var _this2 = this;
	
	        var element = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	        if (!this.isRendered()) {
	            if (this.content instanceof _ValueProxy.ValueProxy) {
	                this.listenTo(this.content, function (value) {
	                    return _this2.setContent(value);
	                });
	            }
	
	            if (element) {
	                this.element = element;
	            } else {
	                this.element = this.getRenderer().createTextNode();
	                this._setContent(this.content);
	            }
	        }
	
	        this._isRendered = true;
	    };
	
	    /**
	     * Set content of node
	     *
	     * @param {string} content
	     */
	
	
	    TextComponent.prototype.setContent = function setContent(content) {
	        if (this.isRendered()) {
	            this._setContent(content);
	        }
	    };
	
	    /**
	     * Set content of node
	     *
	     * @param {string} content
	     */
	
	
	    TextComponent.prototype._setContent = function _setContent(content) {
	        this.getRenderer().setContent(this.element, String(content));
	    };
	
	    return TextComponent;
	}(_AbstractComponent2.AbstractComponent), (_applyDecoratedDescriptor(_class.prototype, 'setContent', [_dec], Object.getOwnPropertyDescriptor(_class.prototype, 'setContent'), _class.prototype)), _class));
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9Db21wb25lbnRzL1RleHRDb21wb25lbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFFYSxhLFdBQUEsYSxXQW9DUixpQzs7O0FBbENEOzs7QUFHQSw2QkFBMEI7QUFBQSxZQUFkLE9BQWMseURBQUosRUFBSTtBQUFBOztBQUFBLG1FQUN0Qiw4QkFBTSxPQUFOLENBRHNCOztBQUd0QixlQUFPLE1BQVAsUUFBb0IsT0FBcEI7QUFIc0I7QUFJekI7O0FBRUQ7Ozs7OzRCQUdBLE0scUJBQXVCO0FBQUE7O0FBQUEsWUFBaEIsT0FBZ0IseURBQU4sSUFBTTs7QUFDbkIsWUFBSSxDQUFDLEtBQUssVUFBTCxFQUFMLEVBQXdCO0FBQ3BCLGdCQUFJLEtBQUssT0FBTCxrQ0FBSixFQUF3QztBQUNwQyxxQkFBSyxRQUFMLENBQWMsS0FBSyxPQUFuQixFQUE0QixVQUFDLEtBQUQ7QUFBQSwyQkFBVyxPQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsQ0FBWDtBQUFBLGlCQUE1QjtBQUNIOztBQUVELGdCQUFJLE9BQUosRUFBYTtBQUNULHFCQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0gsYUFGRCxNQUVPO0FBQ0gscUJBQUssT0FBTCxHQUFlLEtBQUssV0FBTCxHQUFtQixjQUFuQixFQUFmO0FBQ0EscUJBQUssV0FBTCxDQUFpQixLQUFLLE9BQXRCO0FBQ0g7QUFDSjs7QUFFRCxhQUFLLFdBQUwsR0FBbUIsSUFBbkI7QUFDSCxLOztBQUVEOzs7Ozs7OzRCQU1BLFUsdUJBQVcsTyxFQUFTO0FBQ2hCLFlBQUksS0FBSyxVQUFMLEVBQUosRUFBdUI7QUFDbkIsaUJBQUssV0FBTCxDQUFpQixPQUFqQjtBQUNIO0FBQ0osSzs7QUFFRDs7Ozs7Ozs0QkFLQSxXLHdCQUFZLE8sRUFBUztBQUNqQixhQUFLLFdBQUwsR0FBbUIsVUFBbkIsQ0FBOEIsS0FBSyxPQUFuQyxFQUE0QyxPQUFPLE9BQVAsQ0FBNUM7QUFDSCxLIiwiZmlsZSI6IlRleHRDb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0Fic3RyYWN0Q29tcG9uZW50fSBmcm9tICcuL0Fic3RyYWN0Q29tcG9uZW50JztcbmltcG9ydCB7VmFsdWVQcm94eX0gZnJvbSAnLi4vRGF0YS9WYWx1ZVByb3h5JztcbmltcG9ydCB7UGxhbm5lcldyaXRlfSBmcm9tICcuLi9EZWNvcmF0b3JzL1BsYW5uZXJXcml0ZSc7XG5cbmV4cG9ydCBjbGFzcyBUZXh0Q29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RDb21wb25lbnQge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7W2Vudl06IEVudmlyb25tZW50fX0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcihvcHRpb25zKTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudFxuICAgICAqL1xuICAgIHJlbmRlcihlbGVtZW50ID0gbnVsbCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNSZW5kZXJlZCgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jb250ZW50IGluc3RhbmNlb2YgVmFsdWVQcm94eSkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5jb250ZW50LCAodmFsdWUpID0+IHRoaXMuc2V0Q29udGVudCh2YWx1ZSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudCA9IHRoaXMuZ2V0UmVuZGVyZXIoKS5jcmVhdGVUZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldENvbnRlbnQodGhpcy5jb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2lzUmVuZGVyZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBjb250ZW50IG9mIG5vZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAgICovXG4gICAgQFBsYW5uZXJXcml0ZSgpXG4gICAgc2V0Q29udGVudChjb250ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLmlzUmVuZGVyZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBjb250ZW50IG9mIG5vZGVcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb250ZW50XG4gICAgICovXG4gICAgX3NldENvbnRlbnQoY29udGVudCkge1xuICAgICAgICB0aGlzLmdldFJlbmRlcmVyKCkuc2V0Q29udGVudCh0aGlzLmVsZW1lbnQsIFN0cmluZyhjb250ZW50KSk7XG4gICAgfVxuXG59Il19

/***/ },
/* 188 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.AbstractComponent = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Events2 = __webpack_require__(85);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var AbstractComponent = exports.AbstractComponent = function (_Events) {
	    (0, _inherits3.default)(AbstractComponent, _Events);
	
	    /**
	     * @param {{}} options
	     */
	    function AbstractComponent() {
	        var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	        (0, _classCallCheck3.default)(this, AbstractComponent);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _Events.call(this));
	
	        _this.components = [];
	        _this.options = options;
	        return _this;
	    }
	
	    /**
	     * @param {Environment} env
	     */
	
	
	    AbstractComponent.prototype.setEnv = function setEnv(env) {
	        this.env = env;
	    };
	
	    /**
	     * @returns {Environment}
	     */
	
	
	    AbstractComponent.prototype.getEnv = function getEnv() {
	        return this.env;
	    };
	
	    /**
	     * @returns {Renderer}
	     */
	
	
	    AbstractComponent.prototype.getRenderer = function getRenderer() {
	        return this.getEnv().renderer;
	    };
	
	    /**
	     * @returns {Planner}
	     */
	
	
	    AbstractComponent.prototype.getPlanner = function getPlanner() {
	        return this.getEnv().planner;
	    };
	
	    /**
	     * @returns {*}
	     */
	
	
	    AbstractComponent.prototype.getElement = function getElement() {
	        if (this.element === undefined) {
	            throw new Error('Component is not rendered');
	        }
	
	        return this.element;
	    };
	
	    /**
	     * @returns {boolean}
	     */
	
	
	    AbstractComponent.prototype.isRendered = function isRendered() {
	        return this._isRendered && this.element !== undefined;
	    };
	
	    /**
	     * Destroy component
	     */
	
	
	    AbstractComponent.prototype.destroy = function destroy() {
	        this._isRendered = false;
	        this.stopListening();
	
	        if (this.element) {
	            this.getRenderer().removeChild(null, this.element);
	            this.element = undefined;
	        }
	    };
	
	    return AbstractComponent;
	}(_Events2.Events);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9Db21wb25lbnRzL0Fic3RyYWN0Q29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSxpQixXQUFBLGlCOzs7QUFFVDs7O0FBR0EsaUNBQTBCO0FBQUEsWUFBZCxPQUFjLHlEQUFKLEVBQUk7QUFBQTs7QUFBQSxtRUFDdEIsa0JBRHNCOztBQUd0QixjQUFLLFVBQUwsR0FBa0IsRUFBbEI7QUFDQSxjQUFLLE9BQUwsR0FBZSxPQUFmO0FBSnNCO0FBS3pCOztBQUVEOzs7OztnQ0FHQSxNLG1CQUFPLEcsRUFBSztBQUNSLGFBQUssR0FBTCxHQUFXLEdBQVg7QUFDSCxLOztBQUVEOzs7OztnQ0FHQSxNLHFCQUFTO0FBQ0wsZUFBTyxLQUFLLEdBQVo7QUFDSCxLOztBQUVEOzs7OztnQ0FHQSxXLDBCQUFjO0FBQ1YsZUFBTyxLQUFLLE1BQUwsR0FBYyxRQUFyQjtBQUNILEs7O0FBRUQ7Ozs7O2dDQUdBLFUseUJBQWE7QUFDVCxlQUFPLEtBQUssTUFBTCxHQUFjLE9BQXJCO0FBQ0gsSzs7QUFFRDs7Ozs7Z0NBR0EsVSx5QkFBYTtBQUNULFlBQUksS0FBSyxPQUFMLEtBQWlCLFNBQXJCLEVBQWdDO0FBQzVCLGtCQUFNLElBQUksS0FBSixDQUFVLDJCQUFWLENBQU47QUFDSDs7QUFFRCxlQUFPLEtBQUssT0FBWjtBQUNILEs7O0FBRUQ7Ozs7O2dDQUdBLFUseUJBQWE7QUFDVCxlQUFPLEtBQUssV0FBTCxJQUFvQixLQUFLLE9BQUwsS0FBaUIsU0FBNUM7QUFDSCxLOztBQUVEOzs7OztnQ0FHQSxPLHNCQUFVO0FBQ04sYUFBSyxXQUFMLEdBQW1CLEtBQW5CO0FBQ0EsYUFBSyxhQUFMOztBQUVBLFlBQUksS0FBSyxPQUFULEVBQWtCO0FBQ2QsaUJBQUssV0FBTCxHQUFtQixXQUFuQixDQUErQixJQUEvQixFQUFxQyxLQUFLLE9BQTFDO0FBQ0EsaUJBQUssT0FBTCxHQUFlLFNBQWY7QUFDSDtBQUNKLEsiLCJmaWxlIjoiQWJzdHJhY3RDb21wb25lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0V2ZW50c30gZnJvbSAnLi4vRGF0YS9FdmVudHMnO1xuXG5leHBvcnQgY2xhc3MgQWJzdHJhY3RDb21wb25lbnQgZXh0ZW5kcyBFdmVudHMge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fX0gb3B0aW9uc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5jb21wb25lbnRzID0gW107XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuICAgIFxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7RW52aXJvbm1lbnR9IGVudlxuICAgICAqL1xuICAgIHNldEVudihlbnYpIHtcbiAgICAgICAgdGhpcy5lbnYgPSBlbnY7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge0Vudmlyb25tZW50fVxuICAgICAqL1xuICAgIGdldEVudigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW52O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtSZW5kZXJlcn1cbiAgICAgKi9cbiAgICBnZXRSZW5kZXJlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW52KCkucmVuZGVyZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge1BsYW5uZXJ9XG4gICAgICovXG4gICAgZ2V0UGxhbm5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RW52KCkucGxhbm5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBnZXRFbGVtZW50KCkge1xuICAgICAgICBpZiAodGhpcy5lbGVtZW50ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ29tcG9uZW50IGlzIG5vdCByZW5kZXJlZCcpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1JlbmRlcmVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNSZW5kZXJlZCAmJiB0aGlzLmVsZW1lbnQgIT09IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IGNvbXBvbmVudFxuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIHRoaXMuX2lzUmVuZGVyZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5nZXRSZW5kZXJlcigpLnJlbW92ZUNoaWxkKG51bGwsIHRoaXMuZWxlbWVudCk7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 189 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.CollectionComponent = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _Component2 = __webpack_require__(185);
	
	var _Collection = __webpack_require__(179);
	
	var _ValueProxy = __webpack_require__(84);
	
	var _Defaults = __webpack_require__(173);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var CollectionComponent = exports.CollectionComponent = (_dec = (0, _Defaults.Defaults)({
	    modelName: 'model'
	}), _dec(_class = function (_Component) {
	    (0, _inherits3.default)(CollectionComponent, _Component);
	
	    function CollectionComponent(options) {
	        (0, _classCallCheck3.default)(this, CollectionComponent);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _Component.call(this, options));
	
	        _this._children = new WeakMap();
	        _this._originalCollection = _this.collection;
	        return _this;
	    }
	
	    /**
	     * @param {Element|null} [element]
	     *
	     * @returns {*}
	     */
	
	
	    CollectionComponent.prototype.render = function render() {
	        var _this2 = this;
	
	        var element = arguments.length <= 0 || arguments[0] === undefined ? null : arguments[0];
	
	        // first render, we need check type
	        if (!this.isRendered()) {
	            var value;
	
	            var _ret = function () {
	                var collection = _this2.collection;
	
	                if (collection instanceof _ValueProxy.ValueProxy) {
	                    var _ret2 = function () {
	                        var _element = void 0;
	
	                        _this2.listenTo(collection, function (value) {
	                            if (value instanceof _Collection.Collection && collection !== value) {
	                                _this2.stopListening(collection);
	                                _this2._listenCollection(collection);
	                            }
	
	                            _this2.render(_element);
	                            _element = null;
	                        });
	
	                        value = collection.getValue();
	
	
	                        if (value instanceof _Collection.Collection) {
	                            _this2.collection = value;
	                            _this2._listenCollection(value);
	                        } else {
	                            _this2.prepareContent = _this2._prepareValueProxyContent;
	
	                            // we wait something awesome, schedule restore
	                            if (element && !value.length && collection.getNestedPromises().length) {
	                                _this2.element = _element = element;
	                                _this2._isRendered = true;
	
	                                return {
	                                    v: {
	                                        v: void 0
	                                    }
	                                };
	                            }
	                        }
	                    }();
	
	                    if (typeof _ret2 === "object") return _ret2.v;
	                } else if (collection instanceof _Collection.Collection) {
	                    _this2._listenCollection(collection);
	
	                    _this2.prepareContent = _this2._prepareArrayContent;
	                } else if (Array.isArray(collection)) {
	                    _this2.prepareContent = _this2._prepareArrayContent;
	                } else {
	                    return {
	                        v: console.error('Cannot render collection. Unsupported type', collection)
	                    };
	                }
	            }();
	
	            if (typeof _ret === "object") return _ret.v;
	        }
	
	        return _Component.prototype.render.call(this, element);
	    };
	
	    /**
	     * @param {Collection} collection
	     * @private
	     */
	
	
	    CollectionComponent.prototype._listenCollection = function _listenCollection(collection) {
	        var _this3 = this;
	
	        collection.channel('add').on(function (model) {
	            return _this3.addChild(model);
	        });
	        collection.channel('remove').on(function (model) {
	            return _this3.removeChild(model);
	        });
	        collection.channel('reset').on(function () {
	            return _this3.render();
	        });
	
	        this.prepareContent = this._prepareArrayContent;
	    };
	
	    /**
	     * @returns {Component[]}
	     *
	     * @private
	     */
	
	
	    CollectionComponent.prototype._prepareArrayContent = function _prepareArrayContent() {
	        var _this4 = this;
	
	        return this._defaultPrepare(this.collection.map(function (model) {
	            return _this4.prepareChild(model);
	        }));
	    };
	
	    /**
	     * @returns {Component[]}
	     *
	     * @private
	     */
	
	
	    CollectionComponent.prototype._prepareValueProxyContent = function _prepareValueProxyContent() {
	        var _this5 = this;
	
	        return this._defaultPrepare(this.collection.getValue().map(function (model) {
	            return _this5.prepareChild(model);
	        }));
	    };
	
	    /**
	     * @params {Component[]} content
	     *
	     * @returns {Component[]}
	     *
	     * @private
	     */
	
	
	    CollectionComponent.prototype._defaultPrepare = function _defaultPrepare(content) {
	        if (this.emptyTemplate && !content.length) {
	            content = this.emptyTemplate(this) || [];
	
	            if (!Array.isArray(content)) {
	                content = [content];
	            }
	
	            this._isEmpty = true;
	        } else {
	            if (this.template) {
	                this.childComponents = content;
	
	                content = _Component.prototype.prepareContent.call(this);
	            }
	
	            this._isEmpty = false;
	        }
	
	        return content;
	    };
	
	    /**
	     * @param {*} model
	     *
	     * @returns {Component}
	     */
	
	
	    CollectionComponent.prototype.prepareChild = function prepareChild(model) {
	        var template = this.childTemplate,
	            ChildComponent = this.ChildComponent,
	            component = typeof model === 'object' ? this._children.get(model) : null;
	
	        if (component) {
	            return component;
	        }
	
	        var options = Object.assign({}, this.componentOptions());
	
	        if (ChildComponent) {
	            var _Object$assign;
	
	            component = new ChildComponent(Object.assign(options, (_Object$assign = {}, _Object$assign[this.modelName] = model, _Object$assign)));
	        } else {
	            component = template(model);
	
	            if (!(component instanceof _Component2.Component)) {
	                component = new _Component2.Component(Object.assign(options, {
	                    content: component
	                }));
	            }
	        }
	
	        if (typeof model === 'object') {
	            this._children.set(model, component);
	        }
	
	        return component;
	    };
	
	    /**
	     * @param {*} model
	     */
	
	
	    CollectionComponent.prototype.addChild = function addChild(model) {
	        if (this.isRendered()) {
	            if (this._isEmpty) {
	                return this.render();
	            }
	
	            var component = this.prepareChild(model),
	                index = this.collection.indexOf(model);
	
	            this.components.push(component);
	
	            if (!component.isRendered()) {
	                this.getEnv().render(component);
	            }
	
	            if (index > -1 || index !== this.collection.length) {
	                this.getRenderer().appendAt(this.element, component.getElement(), index);
	            } else {
	                this.getRenderer().append(this.element, component.getElement());
	            }
	        }
	    };
	
	    /**
	     * @param {*} model
	     */
	
	
	    CollectionComponent.prototype.removeChild = function removeChild(model) {
	        if (this.isRendered()) {
	            var component = this._children.get(model),
	                index = this.components.indexOf(component);
	
	            if (component && index > -1) {
	                this.components.splice(index, 1);
	
	                if (component.isRendered()) {
	                    this.getRenderer().removeChild(this.element, component.getElement());
	                    component.destroy();
	                }
	            }
	
	            if (!this.collection.length) {
	                this.render();
	            }
	        }
	    };
	
	    /**
	     * @param {Element} element
	     * @returns {Component}
	     */
	
	
	    CollectionComponent.prototype.getComponentForElement = function getComponentForElement(element) {
	        return this.components.find(function (component) {
	            return component.getElement() === element;
	        });
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    CollectionComponent.prototype.componentOptions = function componentOptions() {
	        return {};
	    };
	
	    CollectionComponent.prototype.destroy = function destroy() {
	        _Component.prototype.destroy.call(this);
	
	        this.collection = this._originalCollection;
	    };
	
	    return CollectionComponent;
	}(_Component2.Component)) || _class);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 190 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.DiComponent = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _malanka = __webpack_require__(171);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DiComponent = exports.DiComponent = function (_Component) {
	    (0, _inherits3.default)(DiComponent, _Component);
	
	    function DiComponent() {
	        (0, _classCallCheck3.default)(this, DiComponent);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }
	
	    DiComponent.prototype.updateDependencies = function updateDependencies(deps) {
	        if (!this.isRendered()) {
	            return;
	        }
	
	        var keys = Object.keys(deps);
	
	        for (var index = 0; index < keys.length; index++) {
	            var key = keys[index];
	
	            if (key !== 'event' && this[key] !== deps[key]) {
	                Object.assign(this, deps);
	                this.render();
	                return;
	            }
	        }
	    };
	
	    return DiComponent;
	}(_malanka.Component);

/***/ },
/* 191 */
/***/ function(module, exports, __webpack_require__) {

	var _if = __webpack_require__(192).default,Component = __webpack_require__(185).Component,__mergeStrings = __webpack_require__(194).mergeStrings;
	
	module.exports = function(context){return __mergeStrings([context.header," ",context.content," ",_if.call(context,context.env.isServer,{"hash":{},"content":function(){return new Component({"tagName":"script","attributes":{"type":"text/javascript","src":"/assets/bundle.js"}})},"inverse":function(){return new Component({"tagName":"span"})}})], context)}

/***/ },
/* 192 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = ifHelper;
	
	var _ValueProxy = __webpack_require__(84);
	
	var _IfComponent = __webpack_require__(193);
	
	function ifHelper(param, options) {
	    var _this = this;
	
	    var isProxy = param instanceof _ValueProxy.ValueProxy;
	
	    var getComponent = function getComponent(value) {
	        if (value && options.content) {
	            return options.content.call(_this);
	        } else if (options.inverse) {
	            return options.inverse.call(_this);
	        }
	
	        return '';
	    };
	
	    if (isProxy) {
	        var contentProxy = param.pipe(Boolean).pipe(getComponent);
	
	        if (options.isString) {
	            return contentProxy;
	        } else {
	            return new _IfComponent.IfComponent(Object.assign({}, options.hash, {
	                contentProxy: contentProxy
	            }));
	        }
	    }
	
	    return getComponent(param);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SdW50aW1lL2lmSGVscGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztrQkFHd0IsUTs7QUFIeEI7O0FBQ0E7O0FBRWUsU0FBUyxRQUFULENBQWtCLEtBQWxCLEVBQXlCLE9BQXpCLEVBQWtDO0FBQUE7O0FBQzdDLFFBQUksVUFBVyx1Q0FBZjs7QUFFQSxRQUFJLGVBQWUsU0FBZixZQUFlLENBQUMsS0FBRCxFQUFXO0FBQzFCLFlBQUksU0FBUyxRQUFRLE9BQXJCLEVBQThCO0FBQzFCLG1CQUFPLFFBQVEsT0FBUixDQUFnQixJQUFoQixPQUFQO0FBQ0gsU0FGRCxNQUVPLElBQUksUUFBUSxPQUFaLEVBQXFCO0FBQ3hCLG1CQUFPLFFBQVEsT0FBUixDQUFnQixJQUFoQixPQUFQO0FBQ0g7O0FBRUQsZUFBTyxFQUFQO0FBQ0gsS0FSRDs7QUFVQSxRQUFJLE9BQUosRUFBYTtBQUNULFlBQUksZUFBZSxNQUFNLElBQU4sQ0FBVyxPQUFYLEVBQW9CLElBQXBCLENBQXlCLFlBQXpCLENBQW5COztBQUVBLFlBQUksUUFBUSxRQUFaLEVBQXNCO0FBQ2xCLG1CQUFPLFlBQVA7QUFDSCxTQUZELE1BRU87QUFDSCxtQkFBTyw2QkFBZ0IsT0FBTyxNQUFQLENBQWMsRUFBZCxFQUFrQixRQUFRLElBQTFCLEVBQWdDO0FBQ25ELDhCQUFjO0FBRHFDLGFBQWhDLENBQWhCLENBQVA7QUFHSDtBQUNKOztBQUVELFdBQU8sYUFBYSxLQUFiLENBQVA7QUFDSCIsImZpbGUiOiJpZkhlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VmFsdWVQcm94eX0gZnJvbSAnLi4vRGF0YS9WYWx1ZVByb3h5JztcbmltcG9ydCB7SWZDb21wb25lbnR9IGZyb20gJy4uL0NvbXBvbmVudHMvSWZDb21wb25lbnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpZkhlbHBlcihwYXJhbSwgb3B0aW9ucykge1xuICAgIGxldCBpc1Byb3h5ID0gKHBhcmFtIGluc3RhbmNlb2YgVmFsdWVQcm94eSk7XG5cbiAgICBsZXQgZ2V0Q29tcG9uZW50ID0gKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmICh2YWx1ZSAmJiBvcHRpb25zLmNvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmNvbnRlbnQuY2FsbCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmludmVyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmludmVyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAnJztcbiAgICB9O1xuXG4gICAgaWYgKGlzUHJveHkpIHtcbiAgICAgICAgdmFyIGNvbnRlbnRQcm94eSA9IHBhcmFtLnBpcGUoQm9vbGVhbikucGlwZShnZXRDb21wb25lbnQpO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmlzU3RyaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGVudFByb3h5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBJZkNvbXBvbmVudChPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLmhhc2gsIHtcbiAgICAgICAgICAgICAgICBjb250ZW50UHJveHk6IGNvbnRlbnRQcm94eVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGdldENvbXBvbmVudChwYXJhbSk7XG59Il19

/***/ },
/* 193 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.IfComponent = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _Component2 = __webpack_require__(185);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var IfComponent = exports.IfComponent = function (_Component) {
	    (0, _inherits3.default)(IfComponent, _Component);
	
	    function IfComponent() {
	        (0, _classCallCheck3.default)(this, IfComponent);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }
	
	    IfComponent.prototype.render = function render(element) {
	        var _this2 = this;
	
	        if (!this.isRendered()) {
	            this.listenTo(this.contentProxy, function () {
	                return _this2.render();
	            });
	        }
	
	        this.content = this.contentProxy.getValue();
	
	        _Component.prototype.render.call(this, element);
	    };
	
	    return IfComponent;
	}(_Component2.Component);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9Db21wb25lbnRzL0lmQ29tcG9uZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSxXLFdBQUEsVzs7Ozs7Ozs7MEJBRVQsTSxtQkFBTyxPLEVBQVM7QUFBQTs7QUFDWixZQUFJLENBQUMsS0FBSyxVQUFMLEVBQUwsRUFBd0I7QUFDcEIsaUJBQUssUUFBTCxDQUFjLEtBQUssWUFBbkIsRUFBaUM7QUFBQSx1QkFBTSxPQUFLLE1BQUwsRUFBTjtBQUFBLGFBQWpDO0FBQ0g7O0FBRUQsYUFBSyxPQUFMLEdBQWUsS0FBSyxZQUFMLENBQWtCLFFBQWxCLEVBQWY7O0FBRUEsNkJBQU0sTUFBTixZQUFhLE9BQWI7QUFDSCxLIiwiZmlsZSI6IklmQ29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnR9IGZyb20gJy4vQ29tcG9uZW50JztcblxuZXhwb3J0IGNsYXNzIElmQ29tcG9uZW50IGV4dGVuZHMgQ29tcG9uZW50IHtcblxuICAgIHJlbmRlcihlbGVtZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1JlbmRlcmVkKCkpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5jb250ZW50UHJveHksICgpID0+IHRoaXMucmVuZGVyKCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5jb250ZW50UHJveHkuZ2V0VmFsdWUoKTtcblxuICAgICAgICBzdXBlci5yZW5kZXIoZWxlbWVudClcbiAgICB9XG5cbn0iXX0=

/***/ },
/* 194 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.toProxy = toProxy;
	exports.mergeStrings = mergeStrings;
	exports.join = join;
	
	var _ValueProxy = __webpack_require__(84);
	
	/**
	 * @param {[]} parts
	 * @returns {ValueProxy|string}
	 */
	function toProxy(parts) {
	    var watchers = parts.filter(function (node) {
	        return node instanceof _ValueProxy.ValueProxy;
	    });
	
	    if (!watchers.length) {
	        return parts.join('');
	    }
	
	    return _ValueProxy.ValueProxy.all(watchers).pipe(function (args) {
	        var index = 0;
	
	        return parts.map(function (value) {
	            if (value instanceof _ValueProxy.ValueProxy) {
	                return args[index++];
	            } else {
	                return value;
	            }
	        }).join('');
	    });
	}
	
	/**
	 * @param {{}[]} arr
	 *
	 * @returns {[]}
	 */
	function mergeStrings(arr) {
	    var result = [],
	        buffer = [];
	
	    if (!Array.isArray(arr)) {
	        return arr;
	    }
	
	    var pushBuffer = function pushBuffer(value) {
	        if (buffer.length && typeof value !== 'object' && typeof buffer[buffer.length - 1] === 'string') {
	            buffer.push(String(buffer.pop()) + value);
	        } else {
	            buffer.push(value);
	        }
	    };
	
	    var flushBuffer = function flushBuffer() {
	        if (buffer.length === 1) {
	            if (!(typeof buffer[0] === 'string' && buffer[0].trim() === '')) {
	                result.push(buffer[0]);
	            }
	        } else if (buffer.length > 1) {
	            result.push(toProxy(buffer));
	        }
	
	        buffer = [];
	    };
	
	    var push = function push(value) {
	        // skip null values
	        if (value == null) {
	            return;
	        }
	
	        // strings, booleans, numbers and ValueProxies
	        if (typeof value !== 'object' || value instanceof _ValueProxy.ValueProxy) {
	            pushBuffer(value);
	        } else if (Array.isArray(value)) {
	            mergeStrings(value).forEach(push);
	        } else {
	            flushBuffer();
	            result.push(value);
	        }
	    };
	
	    arr.forEach(push);
	
	    flushBuffer();
	
	    return result;
	}
	
	/**
	 * @param {[]} arr
	 * @returns {ValueProxy|string}
	 */
	function join(arr) {
	    if (arr.length === 1) {
	        return arr[0];
	    } else if (arr.length === 0) {
	        return '';
	    }
	
	    return toProxy(arr);
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SdW50aW1lL3J1bnRpbWUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O1FBTWdCLE8sR0FBQSxPO1FBMkJBLFksR0FBQSxZO1FBdURBLEksR0FBQSxJOztBQXhGaEI7O0FBRUE7Ozs7QUFJTyxTQUFTLE9BQVQsQ0FBaUIsS0FBakIsRUFBd0I7QUFDM0IsUUFBSSxXQUFXLE1BQU0sTUFBTixDQUFhO0FBQUEsZUFBUSxzQ0FBUjtBQUFBLEtBQWIsQ0FBZjs7QUFFQSxRQUFJLENBQUMsU0FBUyxNQUFkLEVBQXNCO0FBQ2xCLGVBQU8sTUFBTSxJQUFOLENBQVcsRUFBWCxDQUFQO0FBQ0g7O0FBRUQsV0FBTyx1QkFBVyxHQUFYLENBQWUsUUFBZixFQUF5QixJQUF6QixDQUE4QixVQUFDLElBQUQsRUFBVTtBQUMzQyxZQUFJLFFBQVEsQ0FBWjs7QUFFQSxlQUFPLE1BQ0YsR0FERSxDQUNFLGlCQUFTO0FBQ1YsZ0JBQUksdUNBQUosRUFBaUM7QUFDN0IsdUJBQU8sS0FBSyxPQUFMLENBQVA7QUFDSCxhQUZELE1BRU87QUFDSCx1QkFBTyxLQUFQO0FBQ0g7QUFDSixTQVBFLEVBUUYsSUFSRSxDQVFHLEVBUkgsQ0FBUDtBQVNILEtBWk0sQ0FBUDtBQWFIOztBQUVEOzs7OztBQUtPLFNBQVMsWUFBVCxDQUFzQixHQUF0QixFQUEyQjtBQUM5QixRQUFJLFNBQVMsRUFBYjtBQUFBLFFBQWlCLFNBQVMsRUFBMUI7O0FBRUEsUUFBSSxDQUFDLE1BQU0sT0FBTixDQUFjLEdBQWQsQ0FBTCxFQUF5QjtBQUNyQixlQUFPLEdBQVA7QUFDSDs7QUFFRCxRQUFJLGFBQWEsU0FBYixVQUFhLFFBQVM7QUFDdEIsWUFBSSxPQUFPLE1BQVAsSUFBaUIsT0FBTyxLQUFQLEtBQWlCLFFBQWxDLElBQThDLE9BQU8sT0FBTyxPQUFPLE1BQVAsR0FBZ0IsQ0FBdkIsQ0FBUCxLQUFxQyxRQUF2RixFQUFpRztBQUM3RixtQkFBTyxJQUFQLENBQVksT0FBTyxPQUFPLEdBQVAsRUFBUCxJQUF1QixLQUFuQztBQUNILFNBRkQsTUFFTztBQUNILG1CQUFPLElBQVAsQ0FBWSxLQUFaO0FBQ0g7QUFDSixLQU5EOztBQVFBLFFBQUksY0FBYyxTQUFkLFdBQWMsR0FBTTtBQUNwQixZQUFJLE9BQU8sTUFBUCxLQUFrQixDQUF0QixFQUF5QjtBQUNyQixnQkFBSSxFQUFFLE9BQU8sT0FBTyxDQUFQLENBQVAsS0FBcUIsUUFBckIsSUFBaUMsT0FBTyxDQUFQLEVBQVUsSUFBVixPQUFxQixFQUF4RCxDQUFKLEVBQWlFO0FBQzdELHVCQUFPLElBQVAsQ0FBWSxPQUFPLENBQVAsQ0FBWjtBQUNIO0FBQ0osU0FKRCxNQUlPLElBQUksT0FBTyxNQUFQLEdBQWdCLENBQXBCLEVBQXVCO0FBQzFCLG1CQUFPLElBQVAsQ0FBWSxRQUFRLE1BQVIsQ0FBWjtBQUNIOztBQUVELGlCQUFTLEVBQVQ7QUFDSCxLQVZEOztBQVlBLFFBQUksT0FBTyxTQUFQLElBQU8sQ0FBQyxLQUFELEVBQVc7QUFDbEI7QUFDQSxZQUFJLFNBQVMsSUFBYixFQUFtQjtBQUNmO0FBQ0g7O0FBRUQ7QUFDQSxZQUFJLE9BQU8sS0FBUCxLQUFpQixRQUFqQixJQUE2Qix1Q0FBakMsRUFBOEQ7QUFDMUQsdUJBQVcsS0FBWDtBQUNILFNBRkQsTUFFTyxJQUFJLE1BQU0sT0FBTixDQUFjLEtBQWQsQ0FBSixFQUEwQjtBQUM3Qix5QkFBYSxLQUFiLEVBQW9CLE9BQXBCLENBQTRCLElBQTVCO0FBQ0gsU0FGTSxNQUVBO0FBQ0g7QUFDQSxtQkFBTyxJQUFQLENBQVksS0FBWjtBQUNIO0FBQ0osS0FmRDs7QUFpQkEsUUFBSSxPQUFKLENBQVksSUFBWjs7QUFFQTs7QUFFQSxXQUFPLE1BQVA7QUFDSDs7QUFFRDs7OztBQUlPLFNBQVMsSUFBVCxDQUFjLEdBQWQsRUFBbUI7QUFDdEIsUUFBSSxJQUFJLE1BQUosS0FBZSxDQUFuQixFQUFzQjtBQUNsQixlQUFPLElBQUksQ0FBSixDQUFQO0FBQ0gsS0FGRCxNQUVPLElBQUksSUFBSSxNQUFKLEtBQWUsQ0FBbkIsRUFBc0I7QUFDekIsZUFBTyxFQUFQO0FBQ0g7O0FBRUQsV0FBTyxRQUFRLEdBQVIsQ0FBUDtBQUNIIiwiZmlsZSI6InJ1bnRpbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1ZhbHVlUHJveHl9IGZyb20gJy4uL0RhdGEvVmFsdWVQcm94eSc7XG5cbi8qKlxuICogQHBhcmFtIHtbXX0gcGFydHNcbiAqIEByZXR1cm5zIHtWYWx1ZVByb3h5fHN0cmluZ31cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvUHJveHkocGFydHMpIHtcbiAgICBsZXQgd2F0Y2hlcnMgPSBwYXJ0cy5maWx0ZXIobm9kZSA9PiBub2RlIGluc3RhbmNlb2YgVmFsdWVQcm94eSk7XG5cbiAgICBpZiAoIXdhdGNoZXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gcGFydHMuam9pbignJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFZhbHVlUHJveHkuYWxsKHdhdGNoZXJzKS5waXBlKChhcmdzKSA9PiB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG5cbiAgICAgICAgcmV0dXJuIHBhcnRzXG4gICAgICAgICAgICAubWFwKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBWYWx1ZVByb3h5KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdzW2luZGV4KytdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmpvaW4oJycpO1xuICAgIH0pO1xufVxuXG4vKipcbiAqIEBwYXJhbSB7e31bXX0gYXJyXG4gKlxuICogQHJldHVybnMge1tdfVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VTdHJpbmdzKGFycikge1xuICAgIGxldCByZXN1bHQgPSBbXSwgYnVmZmVyID0gW107XG5cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyKSkge1xuICAgICAgICByZXR1cm4gYXJyO1xuICAgIH1cblxuICAgIGxldCBwdXNoQnVmZmVyID0gdmFsdWUgPT4ge1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnICYmIHR5cGVvZiBidWZmZXJbYnVmZmVyLmxlbmd0aCAtIDFdID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgYnVmZmVyLnB1c2goU3RyaW5nKGJ1ZmZlci5wb3AoKSkgKyB2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBidWZmZXIucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbGV0IGZsdXNoQnVmZmVyID0gKCkgPT4ge1xuICAgICAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgaWYgKCEodHlwZW9mIGJ1ZmZlclswXSA9PT0gJ3N0cmluZycgJiYgYnVmZmVyWzBdLnRyaW0oKSA9PT0gJycpKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goYnVmZmVyWzBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChidWZmZXIubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2godG9Qcm94eShidWZmZXIpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJ1ZmZlciA9IFtdO1xuICAgIH07XG5cbiAgICBsZXQgcHVzaCA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAvLyBza2lwIG51bGwgdmFsdWVzXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBzdHJpbmdzLCBib29sZWFucywgbnVtYmVycyBhbmQgVmFsdWVQcm94aWVzXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnIHx8IHZhbHVlIGluc3RhbmNlb2YgVmFsdWVQcm94eSkge1xuICAgICAgICAgICAgcHVzaEJ1ZmZlcih2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIG1lcmdlU3RyaW5ncyh2YWx1ZSkuZm9yRWFjaChwdXNoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZsdXNoQnVmZmVyKCk7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGFyci5mb3JFYWNoKHB1c2gpO1xuXG4gICAgZmx1c2hCdWZmZXIoKTtcblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogQHBhcmFtIHtbXX0gYXJyXG4gKiBAcmV0dXJucyB7VmFsdWVQcm94eXxzdHJpbmd9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBqb2luKGFycikge1xuICAgIGlmIChhcnIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiBhcnJbMF07XG4gICAgfSBlbHNlIGlmIChhcnIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdG9Qcm94eShhcnIpO1xufSJdfQ==

/***/ },
/* 195 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"BodyContainer__root___2K7TO Base__font_normal___zZSzf"};

/***/ },
/* 196 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./Sandbox.js": 197
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 196;


/***/ },
/* 197 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Sandbox = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _dec2, _class, _desc, _value, _class2;
	
	var _malanka = __webpack_require__(171);
	
	var _TemplateCompiler = __webpack_require__(198);
	
	var _TemplateCSSModulesPlugin = __webpack_require__(224);
	
	var _TemplateTrimSpacesPlugin = __webpack_require__(226);
	
	var _TemplateFlattenPlugin = __webpack_require__(227);
	
	var _jsBeautify = __webpack_require__(228);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	    var desc = {};
	    Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	    });
	    desc.enumerable = !!desc.enumerable;
	    desc.configurable = !!desc.configurable;
	
	    if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	    }
	
	    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	    }, desc);
	
	    if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	    }
	
	    if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	    }
	
	    return desc;
	}
	
	var Sandbox = exports.Sandbox = (_dec = (0, _malanka.Prototype)({
	    code: '<div>Hello world!</div>',
	    css: true,
	    trim: true
	}), _dec2 = (0, _malanka.Mutator)(['code', 'css', 'trim']), _dec(_class = (_class2 = function (_Model) {
	    (0, _inherits3.default)(Sandbox, _Model);
	
	    function Sandbox() {
	        (0, _classCallCheck3.default)(this, Sandbox);
	        return (0, _possibleConstructorReturn3.default)(this, _Model.apply(this, arguments));
	    }
	
	    Sandbox.prototype.compiledCode = function compiledCode(_ref) {
	        var code = _ref[0];
	        var css = _ref[1];
	        var trim = _ref[2];
	
	        var plugins = [];
	
	        if (css) {
	            plugins.push(new _TemplateCSSModulesPlugin.TemplateCSSModulesPlugin());
	        }
	
	        if (trim) {
	            plugins.push(new _TemplateTrimSpacesPlugin.TemplateTrimSpacesPlugin());
	        }
	
	        plugins.push(new _TemplateFlattenPlugin.TemplateFlattenPlugin());
	
	        var compiler = new _TemplateCompiler.TemplateCompiler({
	            components: {
	                Component: 'malanka',
	                ValueProxy: 'malanka'
	            },
	            runtimePath: 'malanka/es5/Runtime/runtime',
	            helpers: {
	                each: 'malanka/es5/Runtime/eachHelper',
	                if: 'malanka/es5/Runtime/ifHelper'
	            },
	            plugins: plugins
	        });
	
	        return (0, _jsBeautify.js)(compiler.compileString(code));
	    };
	
	    return Sandbox;
	}(_malanka.Model), (_applyDecoratedDescriptor(_class2.prototype, 'compiledCode', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'compiledCode'), _class2.prototype)), _class2)) || _class);

/***/ },
/* 198 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateCompiler = exports.DEFAULTS = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _TemplateParser = __webpack_require__(199);
	
	var _TemplateTransformer = __webpack_require__(200);
	
	var _TemplateEnvironment = __webpack_require__(202);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var DEFAULTS = exports.DEFAULTS = {
	    helpers: {},
	    components: {}
	};
	
	var TemplateCompiler = exports.TemplateCompiler = function () {
	
	    /**
	     * @param {{}} components
	     * @param {{}} helpers
	     * @param {{}[]} plugins
	     * @param {{}} define
	     * @param {string} runtimePath
	     */
	    function TemplateCompiler() {
	        var _ref = arguments.length <= 0 || arguments[0] === undefined ? DEFAULTS : arguments[0];
	
	        var _ref$components = _ref.components;
	        var components = _ref$components === undefined ? DEFAULTS.components : _ref$components;
	        var _ref$helpers = _ref.helpers;
	        var helpers = _ref$helpers === undefined ? DEFAULTS.helpers : _ref$helpers;
	        var _ref$plugins = _ref.plugins;
	        var plugins = _ref$plugins === undefined ? [] : _ref$plugins;
	        var _ref$define = _ref.define;
	        var define = _ref$define === undefined ? {} : _ref$define;
	        var runtimePath = _ref.runtimePath;
	        (0, _classCallCheck3.default)(this, TemplateCompiler);
	
	        this.imports = {};
	        this.counter = 0;
	
	        this.define = define;
	        this.helpers = helpers;
	        this.plugins = plugins;
	        this.components = components;
	        this.runtimePath = runtimePath;
	    }
	
	    /**
	     * @param {string} template
	     * @returns {string}
	     */
	
	
	    TemplateCompiler.prototype.compileString = function compileString(template) {
	        var AST = (0, _TemplateParser.parse)(template),
	            env = new _TemplateEnvironment.TemplateEnvironment({
	            define: this.define,
	            helpers: this.helpers,
	            components: this.components,
	            runtimePath: this.runtimePath
	        }),
	            content = env.factoryContent(AST),
	            transformer = new _TemplateTransformer.TemplateTransformer(this);
	
	        return env.compile(transformer.transform(content));
	    };
	
	    return TemplateCompiler;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9UZW1wbGF0ZS9UZW1wbGF0ZUNvbXBpbGVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0FBRU8sSUFBTSw4QkFBVztBQUNwQixhQUFTLEVBRFc7QUFFcEIsZ0JBQVk7QUFGUSxDQUFqQjs7SUFLTSxnQixXQUFBLGdCOztBQUVUOzs7Ozs7O0FBT0EsZ0NBTWM7QUFBQSx5RUFBVixRQUFVOztBQUFBLG1DQUxWLFVBS1U7QUFBQSxZQUxWLFVBS1UsbUNBTEcsU0FBUyxVQUtaO0FBQUEsZ0NBSlYsT0FJVTtBQUFBLFlBSlYsT0FJVSxnQ0FKQSxTQUFTLE9BSVQ7QUFBQSxnQ0FIVixPQUdVO0FBQUEsWUFIVixPQUdVLGdDQUhBLEVBR0E7QUFBQSwrQkFGVixNQUVVO0FBQUEsWUFGVixNQUVVLCtCQUZELEVBRUM7QUFBQSxZQURWLFdBQ1UsUUFEVixXQUNVO0FBQUE7O0FBQ1YsYUFBSyxPQUFMLEdBQWUsRUFBZjtBQUNBLGFBQUssT0FBTCxHQUFlLENBQWY7O0FBRUEsYUFBSyxNQUFMLEdBQWMsTUFBZDtBQUNBLGFBQUssT0FBTCxHQUFlLE9BQWY7QUFDQSxhQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsYUFBSyxVQUFMLEdBQWtCLFVBQWxCO0FBQ0EsYUFBSyxXQUFMLEdBQW1CLFdBQW5CO0FBQ0g7O0FBRUQ7Ozs7OzsrQkFJQSxhLDBCQUFjLFEsRUFBVTtBQUNwQixZQUFJLE1BQU0sMkJBQU0sUUFBTixDQUFWO0FBQUEsWUFDSSxNQUFNLDZDQUF3QjtBQUMxQixvQkFBUSxLQUFLLE1BRGE7QUFFMUIscUJBQVMsS0FBSyxPQUZZO0FBRzFCLHdCQUFZLEtBQUssVUFIUztBQUkxQix5QkFBYSxLQUFLO0FBSlEsU0FBeEIsQ0FEVjtBQUFBLFlBT0ksVUFBVSxJQUFJLGNBQUosQ0FBbUIsR0FBbkIsQ0FQZDtBQUFBLFlBUUksY0FBYyw2Q0FBd0IsSUFBeEIsQ0FSbEI7O0FBVUEsZUFBTyxJQUFJLE9BQUosQ0FBWSxZQUFZLFNBQVosQ0FBc0IsT0FBdEIsQ0FBWixDQUFQO0FBQ0gsSyIsImZpbGUiOiJUZW1wbGF0ZUNvbXBpbGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtwYXJzZX0gZnJvbSAnLi9UZW1wbGF0ZVBhcnNlcic7XG5pbXBvcnQge1RlbXBsYXRlVHJhbnNmb3JtZXJ9IGZyb20gJy4vVGVtcGxhdGVUcmFuc2Zvcm1lcic7XG5pbXBvcnQge1RlbXBsYXRlRW52aXJvbm1lbnR9IGZyb20gJy4vVGVtcGxhdGVFbnZpcm9ubWVudCc7XG5cbmV4cG9ydCBjb25zdCBERUZBVUxUUyA9IHtcbiAgICBoZWxwZXJzOiB7fSxcbiAgICBjb21wb25lbnRzOiB7fVxufTtcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlQ29tcGlsZXIge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fX0gY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSB7e319IGhlbHBlcnNcbiAgICAgKiBAcGFyYW0ge3t9W119IHBsdWdpbnNcbiAgICAgKiBAcGFyYW0ge3t9fSBkZWZpbmVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcnVudGltZVBhdGhcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih7XG4gICAgICAgIGNvbXBvbmVudHMgPSBERUZBVUxUUy5jb21wb25lbnRzLFxuICAgICAgICBoZWxwZXJzID0gREVGQVVMVFMuaGVscGVycyxcbiAgICAgICAgcGx1Z2lucyA9IFtdLFxuICAgICAgICBkZWZpbmUgPSB7fSxcbiAgICAgICAgcnVudGltZVBhdGhcbiAgICB9ID0gREVGQVVMVFMpIHtcbiAgICAgICAgdGhpcy5pbXBvcnRzID0ge307XG4gICAgICAgIHRoaXMuY291bnRlciA9IDA7XG5cbiAgICAgICAgdGhpcy5kZWZpbmUgPSBkZWZpbmU7XG4gICAgICAgIHRoaXMuaGVscGVycyA9IGhlbHBlcnM7XG4gICAgICAgIHRoaXMucGx1Z2lucyA9IHBsdWdpbnM7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgICAgIHRoaXMucnVudGltZVBhdGggPSBydW50aW1lUGF0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGVtcGxhdGVcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbXBpbGVTdHJpbmcodGVtcGxhdGUpIHtcbiAgICAgICAgdmFyIEFTVCA9IHBhcnNlKHRlbXBsYXRlKSxcbiAgICAgICAgICAgIGVudiA9IG5ldyBUZW1wbGF0ZUVudmlyb25tZW50KHtcbiAgICAgICAgICAgICAgICBkZWZpbmU6IHRoaXMuZGVmaW5lLFxuICAgICAgICAgICAgICAgIGhlbHBlcnM6IHRoaXMuaGVscGVycyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnRzOiB0aGlzLmNvbXBvbmVudHMsXG4gICAgICAgICAgICAgICAgcnVudGltZVBhdGg6IHRoaXMucnVudGltZVBhdGhcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgY29udGVudCA9IGVudi5mYWN0b3J5Q29udGVudChBU1QpLFxuICAgICAgICAgICAgdHJhbnNmb3JtZXIgPSBuZXcgVGVtcGxhdGVUcmFuc2Zvcm1lcih0aGlzKTtcblxuICAgICAgICByZXR1cm4gZW52LmNvbXBpbGUodHJhbnNmb3JtZXIudHJhbnNmb3JtKGNvbnRlbnQpKTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 199 */
/***/ function(module, exports) {

	"use strict";
	
	module.exports = function () {
	  "use strict";
	
	  /*
	   * Generated by PEG.js 0.9.0.
	   *
	   * http://pegjs.org/
	   */
	
	  function peg$subclass(child, parent) {
	    function ctor() {
	      this.constructor = child;
	    }
	    ctor.prototype = parent.prototype;
	    child.prototype = new ctor();
	  }
	
	  function peg$SyntaxError(message, expected, found, location) {
	    this.message = message;
	    this.expected = expected;
	    this.found = found;
	    this.location = location;
	    this.name = "SyntaxError";
	
	    if (typeof Error.captureStackTrace === "function") {
	      Error.captureStackTrace(this, peg$SyntaxError);
	    }
	  }
	
	  peg$subclass(peg$SyntaxError, Error);
	
	  function peg$parse(input) {
	    var options = arguments.length > 1 ? arguments[1] : {},
	        parser = this,
	        peg$FAILED = {},
	        peg$startRuleFunctions = { Content: peg$parseContent },
	        peg$startRuleFunction = peg$parseContent,
	        peg$c0 = function peg$c0(start, content, end) {
	      return start.name === end;
	    },
	        peg$c1 = function peg$c1(start, content, end) {
	      start.content = content;
	      return start;
	    },
	        peg$c2 = "<",
	        peg$c3 = { type: "literal", value: "<", description: "\"<\"" },
	        peg$c4 = "/>",
	        peg$c5 = { type: "literal", value: "/>", description: "\"/>\"" },
	        peg$c6 = function peg$c6(name, attributes) {
	      return {
	        type: 'Component',
	        name: name,
	        attributes: attributes
	      };
	    },
	        peg$c7 = ">",
	        peg$c8 = { type: "literal", value: ">", description: "\">\"" },
	        peg$c9 = "</",
	        peg$c10 = { type: "literal", value: "</", description: "\"</\"" },
	        peg$c11 = function peg$c11(name) {
	      return name;
	    },
	        peg$c12 = /^[a-zA-Z0-9]/,
	        peg$c13 = { type: "class", value: "[a-zA-Z0-9]", description: "[a-zA-Z0-9]" },
	        peg$c14 = function peg$c14() {
	      return text();
	    },
	        peg$c15 = "<!--",
	        peg$c16 = { type: "literal", value: "<!--", description: "\"<!--\"" },
	        peg$c17 = "-->",
	        peg$c18 = { type: "literal", value: "-->", description: "\"-->\"" },
	        peg$c19 = { type: "any", description: "any character" },
	        peg$c20 = function peg$c20(c) {
	      return c;
	    },
	        peg$c21 = function peg$c21(c) {
	      return {
	        type: 'Comment',
	        content: c.join('')
	      };
	    },
	        peg$c22 = function peg$c22(attributes) {
	      return attributes;
	    },
	        peg$c23 = function peg$c23(attr) {
	      return attr;
	    },
	        peg$c24 = "=",
	        peg$c25 = { type: "literal", value: "=", description: "\"=\"" },
	        peg$c26 = function peg$c26(name, value) {
	      return {
	        name: name,
	        value: value
	      };
	    },
	        peg$c27 = function peg$c27(name) {
	      return {
	        name: name,
	        value: { type: 'Primitive', value: true }
	      };
	    },
	        peg$c28 = "#",
	        peg$c29 = { type: "literal", value: "#", description: "\"#\"" },
	        peg$c30 = /^[a-zA-Z0-9\-]/,
	        peg$c31 = { type: "class", value: "[a-zA-Z0-9\\-]", description: "[a-zA-Z0-9\\-]" },
	        peg$c32 = "{",
	        peg$c33 = { type: "literal", value: "{", description: "\"{\"" },
	        peg$c34 = /^[^<{`]/,
	        peg$c35 = { type: "class", value: "[^<{`]", description: "[^<{`]" },
	        peg$c36 = function peg$c36() {
	      return {
	        type: 'Text',
	        content: text()
	      };
	    },
	        peg$c37 = "\"",
	        peg$c38 = { type: "literal", value: "\"", description: "\"\\\"\"" },
	        peg$c39 = function peg$c39(content) {
	      return content;
	    },
	        peg$c40 = function peg$c40(data) {
	      return data.join('');
	    },
	        peg$c41 = /^[^"\\#{]/,
	        peg$c42 = { type: "class", value: "[^\"\\\\#{]", description: "[^\"\\\\#{]" },
	        peg$c43 = "\\0",
	        peg$c44 = { type: "literal", value: "\\0", description: "\"\\\\0\"" },
	        peg$c45 = function peg$c45() {
	      return '\0';
	    },
	        peg$c46 = function peg$c46() {
	      error('Octal escape sequence is not supported');
	    },
	        peg$c47 = "\\b",
	        peg$c48 = { type: "literal", value: "\\b", description: "\"\\\\b\"" },
	        peg$c49 = function peg$c49() {
	      return '\b';
	    },
	        peg$c50 = "\\t",
	        peg$c51 = { type: "literal", value: "\\t", description: "\"\\\\t\"" },
	        peg$c52 = function peg$c52() {
	      return '\t';
	    },
	        peg$c53 = "\\n",
	        peg$c54 = { type: "literal", value: "\\n", description: "\"\\\\n\"" },
	        peg$c55 = function peg$c55() {
	      return '\n';
	    },
	        peg$c56 = "\\v",
	        peg$c57 = { type: "literal", value: "\\v", description: "\"\\\\v\"" },
	        peg$c58 = function peg$c58() {
	      return '\v';
	    },
	        peg$c59 = "\\f",
	        peg$c60 = { type: "literal", value: "\\f", description: "\"\\\\f\"" },
	        peg$c61 = function peg$c61() {
	      return '\f';
	    },
	        peg$c62 = "\\r",
	        peg$c63 = { type: "literal", value: "\\r", description: "\"\\\\r\"" },
	        peg$c64 = function peg$c64() {
	      return '\r';
	    },
	        peg$c65 = "\\",
	        peg$c66 = { type: "literal", value: "\\", description: "\"\\\\\"" },
	        peg$c67 = function peg$c67(c) {
	      return c;
	    },
	        peg$c68 = function peg$c68() {
	      return '#';
	    },
	        peg$c69 = "```",
	        peg$c70 = { type: "literal", value: "```", description: "\"```\"" },
	        peg$c71 = function peg$c71() {
	      return ['`'];
	    },
	        peg$c72 = "\\`",
	        peg$c73 = { type: "literal", value: "\\`", description: "\"\\\\`\"" },
	        peg$c74 = "`",
	        peg$c75 = { type: "literal", value: "`", description: "\"`\"" },
	        peg$c76 = function peg$c76(text) {
	      return {
	        type: 'EscapedString',
	        content: text.join('')
	      };
	    },
	        peg$c77 = function peg$c77(name) {
	      return {
	        type: 'Path',
	        path: name
	      };
	    },
	        peg$c78 = "else",
	        peg$c79 = { type: "literal", value: "else", description: "\"else\"" },
	        peg$c80 = /^[@_a-zA-Z_0-9.]/,
	        peg$c81 = { type: "class", value: "[@_a-zA-Z_0-9.]", description: "[@_a-zA-Z_0-9.]" },
	        peg$c82 = function peg$c82(value) {
	      return value;
	    },
	        peg$c83 = function peg$c83(path) {
	      return path;
	    },
	        peg$c84 = function peg$c84(helper) {
	      return helper;
	    },
	        peg$c85 = function peg$c85(string) {
	      return string;
	    },
	        peg$c86 = function peg$c86(hash) {
	      return hash;
	    },
	        peg$c87 = function peg$c87(arr) {
	      return arr;
	    },
	        peg$c88 = "{{",
	        peg$c89 = { type: "literal", value: "{{", description: "\"{{\"" },
	        peg$c90 = "}}",
	        peg$c91 = { type: "literal", value: "}}", description: "\"}}\"" },
	        peg$c92 = function peg$c92(body) {
	      return body;
	    },
	        peg$c93 = function peg$c93(path, params, hash) {
	      return {
	        type: 'Expression',
	        path: path,
	        params: params,
	        hash: hash
	      };
	    },
	        peg$c94 = "?",
	        peg$c95 = { type: "literal", value: "?", description: "\"?\"" },
	        peg$c96 = ":",
	        peg$c97 = { type: "literal", value: ":", description: "\":\"" },
	        peg$c98 = function peg$c98(path, content, inverse) {
	      return inverse;
	    },
	        peg$c99 = function peg$c99(path, content, inverse) {
	      return {
	        type: 'BlockExpression',
	        path: 'if',
	        params: [path],
	        hash: null,
	        content: [content],
	        inverse: inverse ? [inverse] : null
	      };
	    },
	        peg$c100 = "?:",
	        peg$c101 = { type: "literal", value: "?:", description: "\"?:\"" },
	        peg$c102 = function peg$c102(path, inverse) {
	      return {
	        type: 'BlockExpression',
	        path: 'if',
	        params: [path],
	        hash: null,
	        content: [{
	          type: 'Expression',
	          path: path.path,
	          params: null,
	          hash: null
	        }],
	        inverse: [inverse]
	      };
	    },
	        peg$c103 = "{{#",
	        peg$c104 = { type: "literal", value: "{{#", description: "\"{{#\"" },
	        peg$c105 = function peg$c105(path, attributes, hash) {
	      return {
	        path: path,
	        attributes: attributes,
	        hash: hash
	      };
	    },
	        peg$c106 = "{{/",
	        peg$c107 = { type: "literal", value: "{{/", description: "\"{{/\"" },
	        peg$c108 = "{{else}}",
	        peg$c109 = { type: "literal", value: "{{else}}", description: "\"{{else}}\"" },
	        peg$c110 = function peg$c110(start, content, inverse, close) {
	      if (start.path !== close) {
	        error('Unmatched block expression. Expected {{/' + start.path + '}} but {{/' + close + '}} found.');
	      }
	
	      return {
	        type: 'BlockExpression',
	        path: start.path,
	        params: start.attributes,
	        hash: start.hash,
	        content: content,
	        inverse: inverse
	      };
	    },
	        peg$c111 = "(",
	        peg$c112 = { type: "literal", value: "(", description: "\"(\"" },
	        peg$c113 = ")",
	        peg$c114 = { type: "literal", value: ")", description: "\")\"" },
	        peg$c115 = ",",
	        peg$c116 = { type: "literal", value: ",", description: "\",\"" },
	        peg$c117 = function peg$c117(path, params) {
	      return {
	        type: 'CallExpression',
	        path: path,
	        params: params
	      };
	    },
	        peg$c118 = "{{!--",
	        peg$c119 = { type: "literal", value: "{{!--", description: "\"{{!--\"" },
	        peg$c120 = "--}}",
	        peg$c121 = { type: "literal", value: "--}}", description: "\"--}}\"" },
	        peg$c122 = function peg$c122(c) {
	      return {
	        type: 'Comment',
	        content: c.join('')
	      };
	    },
	        peg$c123 = "{{!",
	        peg$c124 = { type: "literal", value: "{{!", description: "\"{{!\"" },
	        peg$c125 = "}",
	        peg$c126 = { type: "literal", value: "}", description: "\"}\"" },
	        peg$c127 = function peg$c127(attrs) {
	      return {
	        type: 'Hash',
	        attrs: attrs || []
	      };
	    },
	        peg$c128 = function peg$c128(attr, attrs) {
	      return [attr].concat(attrs);
	    },
	        peg$c129 = function peg$c129(attr) {
	      return [attr];
	    },
	        peg$c130 = function peg$c130(name, value) {
	      return {
	        name: name,
	        value: value
	      };
	    },
	        peg$c131 = /^[a-zA-Z0-9_]/,
	        peg$c132 = { type: "class", value: "[a-zA-Z0-9_]", description: "[a-zA-Z0-9_]" },
	        peg$c133 = "[",
	        peg$c134 = { type: "literal", value: "[", description: "\"[\"" },
	        peg$c135 = "]",
	        peg$c136 = { type: "literal", value: "]", description: "\"]\"" },
	        peg$c137 = function peg$c137(values) {
	      return {
	        type: 'Array',
	        values: values || []
	      };
	    },
	        peg$c138 = function peg$c138(v, vs) {
	      return [v].concat(vs);
	    },
	        peg$c139 = "false",
	        peg$c140 = { type: "literal", value: "false", description: "\"false\"" },
	        peg$c141 = function peg$c141() {
	      return { type: 'Primitive', value: false };
	    },
	        peg$c142 = "true",
	        peg$c143 = { type: "literal", value: "true", description: "\"true\"" },
	        peg$c144 = function peg$c144() {
	      return { type: 'Primitive', value: true };
	    },
	        peg$c145 = "null",
	        peg$c146 = { type: "literal", value: "null", description: "\"null\"" },
	        peg$c147 = function peg$c147() {
	      return { type: 'Primitive', value: null };
	    },
	        peg$c148 = "undefined",
	        peg$c149 = { type: "literal", value: "undefined", description: "\"undefined\"" },
	        peg$c150 = function peg$c150() {
	      return { type: 'Primitive', value: undefined };
	    },
	        peg$c151 = ".",
	        peg$c152 = { type: "literal", value: ".", description: "\".\"" },
	        peg$c153 = function peg$c153() {
	      return { type: 'Primitive', value: Number(text()) };
	    },
	        peg$c154 = /^[+\-]/,
	        peg$c155 = { type: "class", value: "[+-]", description: "[+-]" },
	        peg$c156 = /^[0-9]/,
	        peg$c157 = { type: "class", value: "[0-9]", description: "[0-9]" },
	        peg$c158 = /^[ \t\r\n]/,
	        peg$c159 = { type: "class", value: "[ \\t\\r\\n]", description: "[ \\t\\r\\n]" },
	        peg$currPos = 0,
	        peg$savedPos = 0,
	        peg$posDetailsCache = [{ line: 1, column: 1, seenCR: false }],
	        peg$maxFailPos = 0,
	        peg$maxFailExpected = [],
	        peg$silentFails = 0,
	        peg$result;
	
	    if ("startRule" in options) {
	      if (!(options.startRule in peg$startRuleFunctions)) {
	        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
	      }
	
	      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
	    }
	
	    function text() {
	      return input.substring(peg$savedPos, peg$currPos);
	    }
	
	    function location() {
	      return peg$computeLocation(peg$savedPos, peg$currPos);
	    }
	
	    function expected(description) {
	      throw peg$buildException(null, [{ type: "other", description: description }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));
	    }
	
	    function error(message) {
	      throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));
	    }
	
	    function peg$computePosDetails(pos) {
	      var details = peg$posDetailsCache[pos],
	          p,
	          ch;
	
	      if (details) {
	        return details;
	      } else {
	        p = pos - 1;
	        while (!peg$posDetailsCache[p]) {
	          p--;
	        }
	
	        details = peg$posDetailsCache[p];
	        details = {
	          line: details.line,
	          column: details.column,
	          seenCR: details.seenCR
	        };
	
	        while (p < pos) {
	          ch = input.charAt(p);
	          if (ch === "\n") {
	            if (!details.seenCR) {
	              details.line++;
	            }
	            details.column = 1;
	            details.seenCR = false;
	          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
	            details.line++;
	            details.column = 1;
	            details.seenCR = true;
	          } else {
	            details.column++;
	            details.seenCR = false;
	          }
	
	          p++;
	        }
	
	        peg$posDetailsCache[pos] = details;
	        return details;
	      }
	    }
	
	    function peg$computeLocation(startPos, endPos) {
	      var startPosDetails = peg$computePosDetails(startPos),
	          endPosDetails = peg$computePosDetails(endPos);
	
	      return {
	        start: {
	          offset: startPos,
	          line: startPosDetails.line,
	          column: startPosDetails.column
	        },
	        end: {
	          offset: endPos,
	          line: endPosDetails.line,
	          column: endPosDetails.column
	        }
	      };
	    }
	
	    function peg$fail(expected) {
	      if (peg$currPos < peg$maxFailPos) {
	        return;
	      }
	
	      if (peg$currPos > peg$maxFailPos) {
	        peg$maxFailPos = peg$currPos;
	        peg$maxFailExpected = [];
	      }
	
	      peg$maxFailExpected.push(expected);
	    }
	
	    function peg$buildException(message, expected, found, location) {
	      function cleanupExpected(expected) {
	        var i = 1;
	
	        expected.sort(function (a, b) {
	          if (a.description < b.description) {
	            return -1;
	          } else if (a.description > b.description) {
	            return 1;
	          } else {
	            return 0;
	          }
	        });
	
	        while (i < expected.length) {
	          if (expected[i - 1] === expected[i]) {
	            expected.splice(i, 1);
	          } else {
	            i++;
	          }
	        }
	      }
	
	      function buildMessage(expected, found) {
	        function stringEscape(s) {
	          function hex(ch) {
	            return ch.charCodeAt(0).toString(16).toUpperCase();
	          }
	
	          return s.replace(/\\/g, '\\\\').replace(/"/g, '\\"').replace(/\x08/g, '\\b').replace(/\t/g, '\\t').replace(/\n/g, '\\n').replace(/\f/g, '\\f').replace(/\r/g, '\\r').replace(/[\x00-\x07\x0B\x0E\x0F]/g, function (ch) {
	            return '\\x0' + hex(ch);
	          }).replace(/[\x10-\x1F\x80-\xFF]/g, function (ch) {
	            return '\\x' + hex(ch);
	          }).replace(/[\u0100-\u0FFF]/g, function (ch) {
	            return "\\u0" + hex(ch);
	          }).replace(/[\u1000-\uFFFF]/g, function (ch) {
	            return "\\u" + hex(ch);
	          });
	        }
	
	        var expectedDescs = new Array(expected.length),
	            expectedDesc,
	            foundDesc,
	            i;
	
	        for (i = 0; i < expected.length; i++) {
	          expectedDescs[i] = expected[i].description;
	        }
	
	        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(", ") + " or " + expectedDescs[expected.length - 1] : expectedDescs[0];
	
	        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";
	
	        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
	      }
	
	      if (expected !== null) {
	        cleanupExpected(expected);
	      }
	
	      return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location);
	    }
	
	    function peg$parseContent() {
	      var s0, s1;
	
	      s0 = [];
	      s1 = peg$parseEscapedString();
	      if (s1 === peg$FAILED) {
	        s1 = peg$parseComponentComment();
	        if (s1 === peg$FAILED) {
	          s1 = peg$parseComponent();
	          if (s1 === peg$FAILED) {
	            s1 = peg$parseBlockExpression();
	            if (s1 === peg$FAILED) {
	              s1 = peg$parseExpressionComment();
	              if (s1 === peg$FAILED) {
	                s1 = peg$parseExpression();
	                if (s1 === peg$FAILED) {
	                  s1 = peg$parseText();
	                }
	              }
	            }
	          }
	        }
	      }
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        s1 = peg$parseEscapedString();
	        if (s1 === peg$FAILED) {
	          s1 = peg$parseComponentComment();
	          if (s1 === peg$FAILED) {
	            s1 = peg$parseComponent();
	            if (s1 === peg$FAILED) {
	              s1 = peg$parseBlockExpression();
	              if (s1 === peg$FAILED) {
	                s1 = peg$parseExpressionComment();
	                if (s1 === peg$FAILED) {
	                  s1 = peg$parseExpression();
	                  if (s1 === peg$FAILED) {
	                    s1 = peg$parseText();
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponent() {
	      var s0;
	
	      s0 = peg$parseBalancedComponent();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseClosingComponent();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseStartComponent();
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseBalancedComponent() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parseStartComponent();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseContent();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseEndComponent();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = peg$currPos;
	            s4 = peg$c0(s1, s2, s3);
	            if (s4) {
	              s4 = void 0;
	            } else {
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c1(s1, s2, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseClosingComponent() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 60) {
	        s1 = peg$c2;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c3);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseComponentName();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseComponentAttributes();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsespaces();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              if (input.substr(peg$currPos, 2) === peg$c4) {
	                s5 = peg$c4;
	                peg$currPos += 2;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c5);
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c6(s2, s3);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseStartComponent() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 60) {
	        s1 = peg$c2;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c3);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseComponentName();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseComponentAttributes();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsespaces();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 62) {
	                s5 = peg$c7;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c8);
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c6(s2, s3);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseEndComponent() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 2) === peg$c9) {
	        s1 = peg$c9;
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c10);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseComponentName();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 62) {
	            s3 = peg$c7;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c8);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c11(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponentName() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      s1 = [];
	      if (peg$c12.test(input.charAt(peg$currPos))) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c13);
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          if (peg$c12.test(input.charAt(peg$currPos))) {
	            s2 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c13);
	            }
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c14();
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parseComponentComment() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 4) === peg$c15) {
	        s1 = peg$c15;
	        peg$currPos += 4;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c16);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$currPos;
	        peg$silentFails++;
	        if (input.substr(peg$currPos, 3) === peg$c17) {
	          s5 = peg$c17;
	          peg$currPos += 3;
	        } else {
	          s5 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c18);
	          }
	        }
	        peg$silentFails--;
	        if (s5 === peg$FAILED) {
	          s4 = void 0;
	        } else {
	          peg$currPos = s4;
	          s4 = peg$FAILED;
	        }
	        if (s4 !== peg$FAILED) {
	          if (input.length > peg$currPos) {
	            s5 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c19);
	            }
	          }
	          if (s5 !== peg$FAILED) {
	            peg$savedPos = s3;
	            s4 = peg$c20(s5);
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          if (input.substr(peg$currPos, 3) === peg$c17) {
	            s5 = peg$c17;
	            peg$currPos += 3;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c18);
	            }
	          }
	          peg$silentFails--;
	          if (s5 === peg$FAILED) {
	            s4 = void 0;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c19);
	              }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s3;
	              s4 = peg$c20(s5);
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 3) === peg$c17) {
	            s3 = peg$c17;
	            peg$currPos += 3;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c18);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c21(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponentAttributes() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      s1 = peg$parsespaces();
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parseComponentAttribute();
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parseComponentAttribute();
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c22(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponentAttribute() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      s1 = peg$parsespaces();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseComponentValuedAttribute();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parseComponentValuelessAttribute();
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c23(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponentValuedAttribute() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      s1 = peg$parseComponentAttributeName();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 61) {
	          s2 = peg$c24;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c25);
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseComponentValuedAttributeData();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c26(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponentValuelessAttribute() {
	      var s0, s1;
	
	      s0 = peg$currPos;
	      s1 = peg$parseComponentAttributeName();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c27(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parseComponentAttributeName() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 35) {
	        s1 = peg$c28;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c29);
	        }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        if (peg$c30.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c31);
	          }
	        }
	        if (s3 !== peg$FAILED) {
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            if (peg$c30.test(input.charAt(peg$currPos))) {
	              s3 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c31);
	              }
	            }
	          }
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c14();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseComponentValuedAttributeData() {
	      var s0;
	
	      s0 = peg$parseEscapedString();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parsePrimitive();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseCallExpression();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parseExpression();
	            if (s0 === peg$FAILED) {
	              s0 = peg$parseBlockExpression();
	              if (s0 === peg$FAILED) {
	                s0 = peg$parseExpressionPath();
	                if (s0 === peg$FAILED) {
	                  s0 = peg$parseQuotedString();
	                  if (s0 === peg$FAILED) {
	                    s0 = peg$parseHash();
	                    if (s0 === peg$FAILED) {
	                      s0 = peg$parseArray();
	                      if (s0 === peg$FAILED) {
	                        s0 = peg$parseComponent();
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseText() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 123) {
	        s1 = peg$c32;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c33);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        if (peg$c34.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c35);
	          }
	        }
	        if (s3 !== peg$FAILED) {
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            if (peg$c34.test(input.charAt(peg$currPos))) {
	              s3 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c35);
	              }
	            }
	          }
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c36();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = [];
	        if (peg$c34.test(input.charAt(peg$currPos))) {
	          s2 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c35);
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          while (s2 !== peg$FAILED) {
	            s1.push(s2);
	            if (peg$c34.test(input.charAt(peg$currPos))) {
	              s2 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s2 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c35);
	              }
	            }
	          }
	        } else {
	          s1 = peg$FAILED;
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c36();
	        }
	        s0 = s1;
	      }
	
	      return s0;
	    }
	
	    function peg$parseQuotedString() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 34) {
	        s1 = peg$c37;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c38);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parseExpression();
	        if (s3 === peg$FAILED) {
	          s3 = peg$parseBlockExpression();
	          if (s3 === peg$FAILED) {
	            s3 = peg$parseString();
	          }
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$parseExpression();
	          if (s3 === peg$FAILED) {
	            s3 = peg$parseBlockExpression();
	            if (s3 === peg$FAILED) {
	              s3 = peg$parseString();
	            }
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 34) {
	            s3 = peg$c37;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c38);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c39(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseString() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      s1 = [];
	      s2 = peg$parseStringData();
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          s2 = peg$parseStringData();
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c40(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parseStringData() {
	      var s0, s1, s2, s3;
	
	      if (peg$c41.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c42);
	        }
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 2) === peg$c43) {
	          s1 = peg$c43;
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c44);
	          }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$currPos;
	          peg$silentFails++;
	          s3 = peg$parseDecimalDigit();
	          peg$silentFails--;
	          if (s3 === peg$FAILED) {
	            s2 = void 0;
	          } else {
	            peg$currPos = s2;
	            s2 = peg$FAILED;
	          }
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c45();
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 2) === peg$c43) {
	            s1 = peg$c43;
	            peg$currPos += 2;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c44);
	            }
	          }
	          if (s1 !== peg$FAILED) {
	            s2 = peg$currPos;
	            peg$silentFails++;
	            s3 = peg$parseDecimalDigit();
	            peg$silentFails--;
	            if (s3 !== peg$FAILED) {
	              peg$currPos = s2;
	              s2 = void 0;
	            } else {
	              s2 = peg$FAILED;
	            }
	            if (s2 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c46();
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 2) === peg$c47) {
	              s1 = peg$c47;
	              peg$currPos += 2;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c48);
	              }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c49();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              if (input.substr(peg$currPos, 2) === peg$c50) {
	                s1 = peg$c50;
	                peg$currPos += 2;
	              } else {
	                s1 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c51);
	                }
	              }
	              if (s1 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c52();
	              }
	              s0 = s1;
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                if (input.substr(peg$currPos, 2) === peg$c53) {
	                  s1 = peg$c53;
	                  peg$currPos += 2;
	                } else {
	                  s1 = peg$FAILED;
	                  if (peg$silentFails === 0) {
	                    peg$fail(peg$c54);
	                  }
	                }
	                if (s1 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c55();
	                }
	                s0 = s1;
	                if (s0 === peg$FAILED) {
	                  s0 = peg$currPos;
	                  if (input.substr(peg$currPos, 2) === peg$c56) {
	                    s1 = peg$c56;
	                    peg$currPos += 2;
	                  } else {
	                    s1 = peg$FAILED;
	                    if (peg$silentFails === 0) {
	                      peg$fail(peg$c57);
	                    }
	                  }
	                  if (s1 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c58();
	                  }
	                  s0 = s1;
	                  if (s0 === peg$FAILED) {
	                    s0 = peg$currPos;
	                    if (input.substr(peg$currPos, 2) === peg$c59) {
	                      s1 = peg$c59;
	                      peg$currPos += 2;
	                    } else {
	                      s1 = peg$FAILED;
	                      if (peg$silentFails === 0) {
	                        peg$fail(peg$c60);
	                      }
	                    }
	                    if (s1 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c61();
	                    }
	                    s0 = s1;
	                    if (s0 === peg$FAILED) {
	                      s0 = peg$currPos;
	                      if (input.substr(peg$currPos, 2) === peg$c62) {
	                        s1 = peg$c62;
	                        peg$currPos += 2;
	                      } else {
	                        s1 = peg$FAILED;
	                        if (peg$silentFails === 0) {
	                          peg$fail(peg$c63);
	                        }
	                      }
	                      if (s1 !== peg$FAILED) {
	                        peg$savedPos = s0;
	                        s1 = peg$c64();
	                      }
	                      s0 = s1;
	                      if (s0 === peg$FAILED) {
	                        s0 = peg$currPos;
	                        if (input.charCodeAt(peg$currPos) === 92) {
	                          s1 = peg$c65;
	                          peg$currPos++;
	                        } else {
	                          s1 = peg$FAILED;
	                          if (peg$silentFails === 0) {
	                            peg$fail(peg$c66);
	                          }
	                        }
	                        if (s1 !== peg$FAILED) {
	                          if (input.length > peg$currPos) {
	                            s2 = input.charAt(peg$currPos);
	                            peg$currPos++;
	                          } else {
	                            s2 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                              peg$fail(peg$c19);
	                            }
	                          }
	                          if (s2 !== peg$FAILED) {
	                            peg$savedPos = s0;
	                            s1 = peg$c67(s2);
	                            s0 = s1;
	                          } else {
	                            peg$currPos = s0;
	                            s0 = peg$FAILED;
	                          }
	                        } else {
	                          peg$currPos = s0;
	                          s0 = peg$FAILED;
	                        }
	                        if (s0 === peg$FAILED) {
	                          s0 = peg$currPos;
	                          if (input.charCodeAt(peg$currPos) === 35) {
	                            s1 = peg$c28;
	                            peg$currPos++;
	                          } else {
	                            s1 = peg$FAILED;
	                            if (peg$silentFails === 0) {
	                              peg$fail(peg$c29);
	                            }
	                          }
	                          if (s1 !== peg$FAILED) {
	                            s2 = peg$currPos;
	                            peg$silentFails++;
	                            if (input.charCodeAt(peg$currPos) === 123) {
	                              s3 = peg$c32;
	                              peg$currPos++;
	                            } else {
	                              s3 = peg$FAILED;
	                              if (peg$silentFails === 0) {
	                                peg$fail(peg$c33);
	                              }
	                            }
	                            peg$silentFails--;
	                            if (s3 === peg$FAILED) {
	                              s2 = void 0;
	                            } else {
	                              peg$currPos = s2;
	                              s2 = peg$FAILED;
	                            }
	                            if (s2 !== peg$FAILED) {
	                              peg$savedPos = s0;
	                              s1 = peg$c68();
	                              s0 = s1;
	                            } else {
	                              peg$currPos = s0;
	                              s0 = peg$FAILED;
	                            }
	                          } else {
	                            peg$currPos = s0;
	                            s0 = peg$FAILED;
	                          }
	                        }
	                      }
	                    }
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseEscapedString() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c69) {
	        s1 = peg$c69;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c70);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c71();
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 2) === peg$c72) {
	          s1 = peg$c72;
	          peg$currPos += 2;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c73);
	          }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c71();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.charCodeAt(peg$currPos) === 96) {
	            s1 = peg$c74;
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c75);
	            }
	          }
	          if (s1 !== peg$FAILED) {
	            s2 = [];
	            s3 = peg$currPos;
	            s4 = peg$currPos;
	            peg$silentFails++;
	            if (input.charCodeAt(peg$currPos) === 96) {
	              s5 = peg$c74;
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c75);
	              }
	            }
	            peg$silentFails--;
	            if (s5 === peg$FAILED) {
	              s4 = void 0;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              if (input.length > peg$currPos) {
	                s5 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c19);
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s3;
	                s4 = peg$c20(s5);
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	            while (s3 !== peg$FAILED) {
	              s2.push(s3);
	              s3 = peg$currPos;
	              s4 = peg$currPos;
	              peg$silentFails++;
	              if (input.charCodeAt(peg$currPos) === 96) {
	                s5 = peg$c74;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c75);
	                }
	              }
	              peg$silentFails--;
	              if (s5 === peg$FAILED) {
	                s4 = void 0;
	              } else {
	                peg$currPos = s4;
	                s4 = peg$FAILED;
	              }
	              if (s4 !== peg$FAILED) {
	                if (input.length > peg$currPos) {
	                  s5 = input.charAt(peg$currPos);
	                  peg$currPos++;
	                } else {
	                  s5 = peg$FAILED;
	                  if (peg$silentFails === 0) {
	                    peg$fail(peg$c19);
	                  }
	                }
	                if (s5 !== peg$FAILED) {
	                  peg$savedPos = s3;
	                  s4 = peg$c20(s5);
	                  s3 = s4;
	                } else {
	                  peg$currPos = s3;
	                  s3 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            }
	            if (s2 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 96) {
	                s3 = peg$c74;
	                peg$currPos++;
	              } else {
	                s3 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c75);
	                }
	              }
	              if (s3 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c76(s2);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionPath() {
	      var s0, s1;
	
	      s0 = peg$currPos;
	      s1 = peg$parseExpressionName();
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c77(s1);
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parseExpressionName() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      s1 = peg$currPos;
	      peg$silentFails++;
	      if (input.substr(peg$currPos, 4) === peg$c78) {
	        s2 = peg$c78;
	        peg$currPos += 4;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c79);
	        }
	      }
	      peg$silentFails--;
	      if (s2 === peg$FAILED) {
	        s1 = void 0;
	      } else {
	        peg$currPos = s1;
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        if (peg$c80.test(input.charAt(peg$currPos))) {
	          s3 = input.charAt(peg$currPos);
	          peg$currPos++;
	        } else {
	          s3 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c81);
	          }
	        }
	        if (s3 !== peg$FAILED) {
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            if (peg$c80.test(input.charAt(peg$currPos))) {
	              s3 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c81);
	              }
	            }
	          }
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c14();
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionAttribute() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parsespaces();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsePrimitive();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c82(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsespaces();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseEscapedString();
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c82(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          s1 = peg$parsespaces();
	          if (s1 !== peg$FAILED) {
	            s2 = peg$parseExpressionPath();
	            if (s2 !== peg$FAILED) {
	              s3 = peg$currPos;
	              peg$silentFails++;
	              if (input.charCodeAt(peg$currPos) === 61) {
	                s4 = peg$c24;
	                peg$currPos++;
	              } else {
	                s4 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c25);
	                }
	              }
	              peg$silentFails--;
	              if (s4 === peg$FAILED) {
	                s3 = void 0;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	              if (s3 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c83(s2);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            s1 = peg$parsespaces();
	            if (s1 !== peg$FAILED) {
	              s2 = peg$parseInlineExpression();
	              if (s2 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c84(s2);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parsespaces();
	              if (s1 !== peg$FAILED) {
	                s2 = peg$parseQuotedString();
	                if (s2 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c85(s2);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parsespaces();
	                if (s1 !== peg$FAILED) {
	                  s2 = peg$parseHash();
	                  if (s2 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c86(s2);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	                if (s0 === peg$FAILED) {
	                  s0 = peg$currPos;
	                  s1 = peg$parsespaces();
	                  if (s1 !== peg$FAILED) {
	                    s2 = peg$parseArray();
	                    if (s2 !== peg$FAILED) {
	                      peg$savedPos = s0;
	                      s1 = peg$c87(s2);
	                      s0 = s1;
	                    } else {
	                      peg$currPos = s0;
	                      s0 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                }
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionAttributes() {
	      var s0, s1;
	
	      s0 = [];
	      s1 = peg$parseExpressionAttribute();
	      if (s1 !== peg$FAILED) {
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          s1 = peg$parseExpressionAttribute();
	        }
	      } else {
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionHashValue() {
	      var s0;
	
	      s0 = peg$parsePrimitive();
	      if (s0 === peg$FAILED) {
	        s0 = peg$parseEscapedString();
	        if (s0 === peg$FAILED) {
	          s0 = peg$parseExpressionPath();
	          if (s0 === peg$FAILED) {
	            s0 = peg$parseInlineExpression();
	            if (s0 === peg$FAILED) {
	              s0 = peg$parseQuotedString();
	              if (s0 === peg$FAILED) {
	                s0 = peg$parseHash();
	                if (s0 === peg$FAILED) {
	                  s0 = peg$parseArray();
	                }
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionHashAttribute() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parsespaces();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseExpressionName();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 61) {
	            s3 = peg$c24;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c25);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseExpressionHashValue();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c26(s2, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionHash() {
	      var s0, s1;
	
	      s0 = [];
	      s1 = peg$parseExpressionHashAttribute();
	      if (s1 !== peg$FAILED) {
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          s1 = peg$parseExpressionHashAttribute();
	        }
	      } else {
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpression() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 2) === peg$c88) {
	        s1 = peg$c88;
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c89);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseShortIfExpressionBody();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parseExpressionBody();
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c90) {
	            s3 = peg$c90;
	            peg$currPos += 2;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c91);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c92(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionBody() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parseExpressionName();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseExpressionAttributes();
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseExpressionHash();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsespaces();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c93(s1, s2, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseShortIfExpression() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 2) === peg$c88) {
	        s1 = peg$c88;
	        peg$currPos += 2;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c89);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseShortIfExpressionBody();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c90) {
	            s3 = peg$c90;
	            peg$currPos += 2;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c91);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c92(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseShortIfExpressionBody() {
	      var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;
	
	      s0 = peg$currPos;
	      s1 = peg$parseExpressionPath();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsespaces();
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 63) {
	            s3 = peg$c94;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c95);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseExpressionAttribute();
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsespaces();
	              if (s5 === peg$FAILED) {
	                s5 = null;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$currPos;
	                if (input.charCodeAt(peg$currPos) === 58) {
	                  s7 = peg$c96;
	                  peg$currPos++;
	                } else {
	                  s7 = peg$FAILED;
	                  if (peg$silentFails === 0) {
	                    peg$fail(peg$c97);
	                  }
	                }
	                if (s7 !== peg$FAILED) {
	                  s8 = peg$parseExpressionAttribute();
	                  if (s8 !== peg$FAILED) {
	                    s9 = peg$parsespaces();
	                    if (s9 === peg$FAILED) {
	                      s9 = null;
	                    }
	                    if (s9 !== peg$FAILED) {
	                      peg$savedPos = s6;
	                      s7 = peg$c98(s1, s4, s8);
	                      s6 = s7;
	                    } else {
	                      peg$currPos = s6;
	                      s6 = peg$FAILED;
	                    }
	                  } else {
	                    peg$currPos = s6;
	                    s6 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s6;
	                  s6 = peg$FAILED;
	                }
	                if (s6 === peg$FAILED) {
	                  s6 = null;
	                }
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c99(s1, s4, s6);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseExpressionPath();
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parsespaces();
	          if (s2 === peg$FAILED) {
	            s2 = null;
	          }
	          if (s2 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c100) {
	              s3 = peg$c100;
	              peg$currPos += 2;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c101);
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              s4 = peg$parseExpressionAttribute();
	              if (s4 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c102(s1, s4);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseStartBlockExpression() {
	      var s0, s1, s2, s3, s4, s5, s6;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c103) {
	        s1 = peg$c103;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c104);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseExpressionName();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseExpressionAttributes();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseExpressionHash();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsespaces();
	              if (s5 === peg$FAILED) {
	                s5 = null;
	              }
	              if (s5 !== peg$FAILED) {
	                if (input.substr(peg$currPos, 2) === peg$c90) {
	                  s6 = peg$c90;
	                  peg$currPos += 2;
	                } else {
	                  s6 = peg$FAILED;
	                  if (peg$silentFails === 0) {
	                    peg$fail(peg$c91);
	                  }
	                }
	                if (s6 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c105(s2, s3, s4);
	                  s0 = s1;
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseCloseBlockExpression() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 3) === peg$c106) {
	        s1 = peg$c106;
	        peg$currPos += 3;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c107);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseExpressionName();
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 2) === peg$c90) {
	            s3 = peg$c90;
	            peg$currPos += 2;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c91);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c11(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseInverseBlockExpression() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 8) === peg$c108) {
	        s1 = peg$c108;
	        peg$currPos += 8;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c109);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseContent();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c39(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseBlockExpression() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parseStartBlockExpression();
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseContent();
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseInverseBlockExpression();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseCloseBlockExpression();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c110(s1, s2, s3, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseInlineExpression() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 40) {
	        s1 = peg$c111;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c112);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseShortIfExpressionBody();
	        if (s2 === peg$FAILED) {
	          s2 = peg$parseExpressionBody();
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 41) {
	            s3 = peg$c113;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c114);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c92(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseCallExpressionAttribute() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 44) {
	        s1 = peg$c115;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c116);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseCallExpressionAttribute();
	        if (s2 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c82(s2);
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsespaces();
	        if (s1 === peg$FAILED) {
	          s1 = null;
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseExpressionHashValue();
	          if (s2 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c82(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseCallExpressionAttributes() {
	      var s0, s1;
	
	      s0 = [];
	      s1 = peg$parseCallExpressionAttribute();
	      while (s1 !== peg$FAILED) {
	        s0.push(s1);
	        s1 = peg$parseCallExpressionAttribute();
	      }
	
	      return s0;
	    }
	
	    function peg$parseCallExpression() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parseExpressionName();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 40) {
	          s2 = peg$c111;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c112);
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseCallExpressionAttributes();
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 41) {
	              s4 = peg$c113;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c114);
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c117(s1, s3);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseExpressionComment() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 5) === peg$c118) {
	        s1 = peg$c118;
	        peg$currPos += 5;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c119);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$currPos;
	        s4 = peg$currPos;
	        peg$silentFails++;
	        if (input.substr(peg$currPos, 4) === peg$c120) {
	          s5 = peg$c120;
	          peg$currPos += 4;
	        } else {
	          s5 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c121);
	          }
	        }
	        peg$silentFails--;
	        if (s5 === peg$FAILED) {
	          s4 = void 0;
	        } else {
	          peg$currPos = s4;
	          s4 = peg$FAILED;
	        }
	        if (s4 !== peg$FAILED) {
	          if (input.length > peg$currPos) {
	            s5 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c19);
	            }
	          }
	          if (s5 !== peg$FAILED) {
	            peg$savedPos = s3;
	            s4 = peg$c20(s5);
	            s3 = s4;
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s3;
	          s3 = peg$FAILED;
	        }
	        while (s3 !== peg$FAILED) {
	          s2.push(s3);
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          if (input.substr(peg$currPos, 4) === peg$c120) {
	            s5 = peg$c120;
	            peg$currPos += 4;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c121);
	            }
	          }
	          peg$silentFails--;
	          if (s5 === peg$FAILED) {
	            s4 = void 0;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c19);
	              }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s3;
	              s4 = peg$c20(s5);
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.substr(peg$currPos, 4) === peg$c120) {
	            s3 = peg$c120;
	            peg$currPos += 4;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c121);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c122(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 3) === peg$c123) {
	          s1 = peg$c123;
	          peg$currPos += 3;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c124);
	          }
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = [];
	          s3 = peg$currPos;
	          s4 = peg$currPos;
	          peg$silentFails++;
	          if (input.substr(peg$currPos, 2) === peg$c90) {
	            s5 = peg$c90;
	            peg$currPos += 2;
	          } else {
	            s5 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c91);
	            }
	          }
	          peg$silentFails--;
	          if (s5 === peg$FAILED) {
	            s4 = void 0;
	          } else {
	            peg$currPos = s4;
	            s4 = peg$FAILED;
	          }
	          if (s4 !== peg$FAILED) {
	            if (input.length > peg$currPos) {
	              s5 = input.charAt(peg$currPos);
	              peg$currPos++;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c19);
	              }
	            }
	            if (s5 !== peg$FAILED) {
	              peg$savedPos = s3;
	              s4 = peg$c20(s5);
	              s3 = s4;
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s3;
	            s3 = peg$FAILED;
	          }
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            s3 = peg$currPos;
	            s4 = peg$currPos;
	            peg$silentFails++;
	            if (input.substr(peg$currPos, 2) === peg$c90) {
	              s5 = peg$c90;
	              peg$currPos += 2;
	            } else {
	              s5 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c91);
	              }
	            }
	            peg$silentFails--;
	            if (s5 === peg$FAILED) {
	              s4 = void 0;
	            } else {
	              peg$currPos = s4;
	              s4 = peg$FAILED;
	            }
	            if (s4 !== peg$FAILED) {
	              if (input.length > peg$currPos) {
	                s5 = input.charAt(peg$currPos);
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c19);
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s3;
	                s4 = peg$c20(s5);
	                s3 = s4;
	              } else {
	                peg$currPos = s3;
	                s3 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s3;
	              s3 = peg$FAILED;
	            }
	          }
	          if (s2 !== peg$FAILED) {
	            if (input.substr(peg$currPos, 2) === peg$c90) {
	              s3 = peg$c90;
	              peg$currPos += 2;
	            } else {
	              s3 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c91);
	              }
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c122(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseHash() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 123) {
	        s1 = peg$c32;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c33);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseHashAttributes();
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 125) {
	            s3 = peg$c125;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c126);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c127(s2);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseHashAttributes() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      s1 = peg$parseHashAttribute();
	      if (s1 !== peg$FAILED) {
	        if (input.charCodeAt(peg$currPos) === 44) {
	          s2 = peg$c115;
	          peg$currPos++;
	        } else {
	          s2 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c116);
	          }
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseHashAttributes();
	          if (s3 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c128(s1, s3);
	            s0 = s1;
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parseHashAttribute();
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c129(s1);
	        }
	        s0 = s1;
	      }
	
	      return s0;
	    }
	
	    function peg$parseHashAttribute() {
	      var s0, s1, s2, s3, s4, s5, s6, s7;
	
	      s0 = peg$currPos;
	      s1 = peg$parsespaces();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseHashAttributeName();
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parsespaces();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            if (input.charCodeAt(peg$currPos) === 58) {
	              s4 = peg$c96;
	              peg$currPos++;
	            } else {
	              s4 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c97);
	              }
	            }
	            if (s4 !== peg$FAILED) {
	              s5 = peg$parsespaces();
	              if (s5 === peg$FAILED) {
	                s5 = null;
	              }
	              if (s5 !== peg$FAILED) {
	                s6 = peg$parseExpressionHashValue();
	                if (s6 !== peg$FAILED) {
	                  s7 = peg$parsespaces();
	                  if (s7 === peg$FAILED) {
	                    s7 = null;
	                  }
	                  if (s7 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c130(s2, s6);
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseHashAttributeName() {
	      var s0, s1, s2;
	
	      s0 = peg$currPos;
	      s1 = [];
	      if (peg$c131.test(input.charAt(peg$currPos))) {
	        s2 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s2 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c132);
	        }
	      }
	      if (s2 !== peg$FAILED) {
	        while (s2 !== peg$FAILED) {
	          s1.push(s2);
	          if (peg$c131.test(input.charAt(peg$currPos))) {
	            s2 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s2 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c132);
	            }
	          }
	        }
	      } else {
	        s1 = peg$FAILED;
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c14();
	      }
	      s0 = s1;
	
	      return s0;
	    }
	
	    function peg$parseArray() {
	      var s0, s1, s2, s3, s4, s5;
	
	      s0 = peg$currPos;
	      if (input.charCodeAt(peg$currPos) === 91) {
	        s1 = peg$c133;
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c134);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parsespaces();
	        if (s2 === peg$FAILED) {
	          s2 = null;
	        }
	        if (s2 !== peg$FAILED) {
	          s3 = peg$parseArrayValues();
	          if (s3 === peg$FAILED) {
	            s3 = null;
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parsespaces();
	            if (s4 === peg$FAILED) {
	              s4 = null;
	            }
	            if (s4 !== peg$FAILED) {
	              if (input.charCodeAt(peg$currPos) === 93) {
	                s5 = peg$c135;
	                peg$currPos++;
	              } else {
	                s5 = peg$FAILED;
	                if (peg$silentFails === 0) {
	                  peg$fail(peg$c136);
	                }
	              }
	              if (s5 !== peg$FAILED) {
	                peg$savedPos = s0;
	                s1 = peg$c137(s3);
	                s0 = s1;
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseArrayValues() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      s1 = peg$parsespaces();
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = peg$parseExpressionHashValue();
	        if (s2 !== peg$FAILED) {
	          if (input.charCodeAt(peg$currPos) === 44) {
	            s3 = peg$c115;
	            peg$currPos++;
	          } else {
	            s3 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c116);
	            }
	          }
	          if (s3 !== peg$FAILED) {
	            s4 = peg$parseArrayValues();
	            if (s4 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c138(s2, s4);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        s1 = peg$parsespaces();
	        if (s1 === peg$FAILED) {
	          s1 = null;
	        }
	        if (s1 !== peg$FAILED) {
	          s2 = peg$parseExpressionHashValue();
	          if (s2 !== peg$FAILED) {
	            s3 = peg$parsespaces();
	            if (s3 === peg$FAILED) {
	              s3 = null;
	            }
	            if (s3 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c82(s2);
	              s0 = s1;
	            } else {
	              peg$currPos = s0;
	              s0 = peg$FAILED;
	            }
	          } else {
	            peg$currPos = s0;
	            s0 = peg$FAILED;
	          }
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parsePrimitive() {
	      var s0, s1, s2, s3, s4;
	
	      s0 = peg$currPos;
	      if (input.substr(peg$currPos, 5) === peg$c139) {
	        s1 = peg$c139;
	        peg$currPos += 5;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c140);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        peg$savedPos = s0;
	        s1 = peg$c141();
	      }
	      s0 = s1;
	      if (s0 === peg$FAILED) {
	        s0 = peg$currPos;
	        if (input.substr(peg$currPos, 4) === peg$c142) {
	          s1 = peg$c142;
	          peg$currPos += 4;
	        } else {
	          s1 = peg$FAILED;
	          if (peg$silentFails === 0) {
	            peg$fail(peg$c143);
	          }
	        }
	        if (s1 !== peg$FAILED) {
	          peg$savedPos = s0;
	          s1 = peg$c144();
	        }
	        s0 = s1;
	        if (s0 === peg$FAILED) {
	          s0 = peg$currPos;
	          if (input.substr(peg$currPos, 4) === peg$c145) {
	            s1 = peg$c145;
	            peg$currPos += 4;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c146);
	            }
	          }
	          if (s1 !== peg$FAILED) {
	            peg$savedPos = s0;
	            s1 = peg$c147();
	          }
	          s0 = s1;
	          if (s0 === peg$FAILED) {
	            s0 = peg$currPos;
	            if (input.substr(peg$currPos, 9) === peg$c148) {
	              s1 = peg$c148;
	              peg$currPos += 9;
	            } else {
	              s1 = peg$FAILED;
	              if (peg$silentFails === 0) {
	                peg$fail(peg$c149);
	              }
	            }
	            if (s1 !== peg$FAILED) {
	              peg$savedPos = s0;
	              s1 = peg$c150();
	            }
	            s0 = s1;
	            if (s0 === peg$FAILED) {
	              s0 = peg$currPos;
	              s1 = peg$parseSignedInteger();
	              if (s1 !== peg$FAILED) {
	                if (input.charCodeAt(peg$currPos) === 46) {
	                  s2 = peg$c151;
	                  peg$currPos++;
	                } else {
	                  s2 = peg$FAILED;
	                  if (peg$silentFails === 0) {
	                    peg$fail(peg$c152);
	                  }
	                }
	                if (s2 !== peg$FAILED) {
	                  s3 = [];
	                  s4 = peg$parseDecimalDigit();
	                  if (s4 !== peg$FAILED) {
	                    while (s4 !== peg$FAILED) {
	                      s3.push(s4);
	                      s4 = peg$parseDecimalDigit();
	                    }
	                  } else {
	                    s3 = peg$FAILED;
	                  }
	                  if (s3 !== peg$FAILED) {
	                    peg$savedPos = s0;
	                    s1 = peg$c153();
	                    s0 = s1;
	                  } else {
	                    peg$currPos = s0;
	                    s0 = peg$FAILED;
	                  }
	                } else {
	                  peg$currPos = s0;
	                  s0 = peg$FAILED;
	                }
	              } else {
	                peg$currPos = s0;
	                s0 = peg$FAILED;
	              }
	              if (s0 === peg$FAILED) {
	                s0 = peg$currPos;
	                s1 = peg$parseSignedInteger();
	                if (s1 !== peg$FAILED) {
	                  peg$savedPos = s0;
	                  s1 = peg$c153();
	                }
	                s0 = s1;
	              }
	            }
	          }
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parseSignedInteger() {
	      var s0, s1, s2, s3;
	
	      s0 = peg$currPos;
	      if (peg$c154.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c155);
	        }
	      }
	      if (s1 === peg$FAILED) {
	        s1 = null;
	      }
	      if (s1 !== peg$FAILED) {
	        s2 = [];
	        s3 = peg$parseDecimalDigit();
	        if (s3 !== peg$FAILED) {
	          while (s3 !== peg$FAILED) {
	            s2.push(s3);
	            s3 = peg$parseDecimalDigit();
	          }
	        } else {
	          s2 = peg$FAILED;
	        }
	        if (s2 !== peg$FAILED) {
	          s1 = [s1, s2];
	          s0 = s1;
	        } else {
	          peg$currPos = s0;
	          s0 = peg$FAILED;
	        }
	      } else {
	        peg$currPos = s0;
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    function peg$parseDecimalDigit() {
	      var s0;
	
	      if (peg$c156.test(input.charAt(peg$currPos))) {
	        s0 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s0 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c157);
	        }
	      }
	
	      return s0;
	    }
	
	    function peg$parsespaces() {
	      var s0, s1;
	
	      s0 = [];
	      if (peg$c158.test(input.charAt(peg$currPos))) {
	        s1 = input.charAt(peg$currPos);
	        peg$currPos++;
	      } else {
	        s1 = peg$FAILED;
	        if (peg$silentFails === 0) {
	          peg$fail(peg$c159);
	        }
	      }
	      if (s1 !== peg$FAILED) {
	        while (s1 !== peg$FAILED) {
	          s0.push(s1);
	          if (peg$c158.test(input.charAt(peg$currPos))) {
	            s1 = input.charAt(peg$currPos);
	            peg$currPos++;
	          } else {
	            s1 = peg$FAILED;
	            if (peg$silentFails === 0) {
	              peg$fail(peg$c159);
	            }
	          }
	        }
	      } else {
	        s0 = peg$FAILED;
	      }
	
	      return s0;
	    }
	
	    peg$result = peg$startRuleFunction();
	
	    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
	      return peg$result;
	    } else {
	      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
	        peg$fail({ type: "end", description: "end of input" });
	      }
	
	      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));
	    }
	  }
	
	  return {
	    SyntaxError: peg$SyntaxError,
	    parse: peg$parse
	  };
	}();
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 200 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateTransformer = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _TemplateNode = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateTransformer = exports.TemplateTransformer = function () {
	
	    /**
	     * @param {{}[]} plugins
	     */
	    function TemplateTransformer() {
	        var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
	
	        var _ref$plugins = _ref.plugins;
	        var plugins = _ref$plugins === undefined ? [] : _ref$plugins;
	        (0, _classCallCheck3.default)(this, TemplateTransformer);
	
	        this.plugins = plugins;
	    }
	
	    /**
	     * @param {TemplateNode} node
	     * @returns {*}
	     */
	
	
	    TemplateTransformer.prototype.transform = function transform(node) {
	        this.invokePlugins('initialize', node, this);
	
	        return this.optimizeNode(node, []);
	    };
	
	    /**
	     * @param {TemplateNode} node
	     * @param {TemplateNode[]} parents
	     * @returns {*}
	     */
	
	
	    TemplateTransformer.prototype.optimizeNode = function optimizeNode(node, parents) {
	        var _this = this;
	
	        if (!(node instanceof _TemplateNode.TemplateNode)) {
	            return node;
	        }
	
	        node = this.invokePlugins('onNode', node, parents, this);
	        node = this.invokePlugins('on' + node.constructor.name, node, parents, this);
	
	        var newParents = [].concat(parents, [node]);
	
	        Object.keys(node).forEach(function (key) {
	            if (node[key] instanceof _TemplateNode.TemplateNode) {
	                node[key] = _this.optimizeNode(node[key], newParents);
	            }
	
	            if (Array.isArray(node[key])) {
	                node[key] = node[key].map(function (childNode) {
	                    return _this.optimizeNode(childNode, newParents);
	                });
	            }
	        });
	
	        return node;
	    };
	
	    /**
	     * @param method
	     * @param node
	     * @param args
	     * @returns {*}
	     */
	
	
	    TemplateTransformer.prototype.invokePlugins = function invokePlugins(method, node) {
	        for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
	            args[_key - 2] = arguments[_key];
	        }
	
	        for (var index = 0; index < this.plugins.length; index++) {
	            var plugin = this.plugins[index];
	
	            if (plugin[method]) {
	                node = plugin[method].apply(plugin, [node].concat(args)) || node;
	            }
	        }
	
	        return node;
	    };
	
	    return TemplateTransformer;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9UZW1wbGF0ZS9UZW1wbGF0ZVRyYW5zZm9ybWVyLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOzs7O0lBRWEsbUIsV0FBQSxtQjs7QUFFVDs7O0FBR0EsbUNBQWlDO0FBQUEseUVBQUosRUFBSTs7QUFBQSxnQ0FBcEIsT0FBb0I7QUFBQSxZQUFwQixPQUFvQixnQ0FBVixFQUFVO0FBQUE7O0FBQzdCLGFBQUssT0FBTCxHQUFlLE9BQWY7QUFDSDs7QUFFRDs7Ozs7O2tDQUlBLFMsc0JBQVUsSSxFQUFNO0FBQ1osYUFBSyxhQUFMLENBQW1CLFlBQW5CLEVBQWlDLElBQWpDLEVBQXVDLElBQXZDOztBQUVBLGVBQU8sS0FBSyxZQUFMLENBQWtCLElBQWxCLEVBQXdCLEVBQXhCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O2tDQUtBLFkseUJBQWEsSSxFQUFNLE8sRUFBUztBQUFBOztBQUN4QixZQUFJLEVBQUUsMENBQUYsQ0FBSixFQUFxQztBQUNqQyxtQkFBTyxJQUFQO0FBQ0g7O0FBRUQsZUFBTyxLQUFLLGFBQUwsQ0FBbUIsUUFBbkIsRUFBNkIsSUFBN0IsRUFBbUMsT0FBbkMsRUFBNEMsSUFBNUMsQ0FBUDtBQUNBLGVBQU8sS0FBSyxhQUFMLENBQW1CLE9BQU8sS0FBSyxXQUFMLENBQWlCLElBQTNDLEVBQWlELElBQWpELEVBQXVELE9BQXZELEVBQWdFLElBQWhFLENBQVA7O0FBRUEsWUFBSSxhQUFhLEdBQUcsTUFBSCxDQUFVLE9BQVYsRUFBbUIsQ0FBQyxJQUFELENBQW5CLENBQWpCOztBQUVBLGVBQU8sSUFBUCxDQUFZLElBQVosRUFBa0IsT0FBbEIsQ0FBMEIsZUFBTztBQUM3QixnQkFBSSxLQUFLLEdBQUwsdUNBQUosRUFBdUM7QUFDbkMscUJBQUssR0FBTCxJQUFZLE1BQUssWUFBTCxDQUFrQixLQUFLLEdBQUwsQ0FBbEIsRUFBNkIsVUFBN0IsQ0FBWjtBQUNIOztBQUVELGdCQUFJLE1BQU0sT0FBTixDQUFjLEtBQUssR0FBTCxDQUFkLENBQUosRUFBOEI7QUFDMUIscUJBQUssR0FBTCxJQUFZLEtBQUssR0FBTCxFQUFVLEdBQVYsQ0FBYyxxQkFBYTtBQUNuQywyQkFBTyxNQUFLLFlBQUwsQ0FBa0IsU0FBbEIsRUFBNkIsVUFBN0IsQ0FBUDtBQUNILGlCQUZXLENBQVo7QUFHSDtBQUNKLFNBVkQ7O0FBWUEsZUFBTyxJQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7a0NBTUEsYSwwQkFBYyxNLEVBQVEsSSxFQUFlO0FBQUEsMENBQU4sSUFBTTtBQUFOLGdCQUFNO0FBQUE7O0FBQ2pDLGFBQUssSUFBSSxRQUFRLENBQWpCLEVBQW9CLFFBQVEsS0FBSyxPQUFMLENBQWEsTUFBekMsRUFBaUQsT0FBakQsRUFBMEQ7QUFDdEQsZ0JBQUksU0FBUyxLQUFLLE9BQUwsQ0FBYSxLQUFiLENBQWI7O0FBRUEsZ0JBQUksT0FBTyxNQUFQLENBQUosRUFBb0I7QUFDaEIsdUJBQU8sT0FBTyxNQUFQLGlCQUFlLElBQWYsU0FBd0IsSUFBeEIsTUFBaUMsSUFBeEM7QUFDSDtBQUNKOztBQUVELGVBQU8sSUFBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVUcmFuc2Zvcm1lci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVtcGxhdGVOb2RlfSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZSc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVRyYW5zZm9ybWVyIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e31bXX0gcGx1Z2luc1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHtwbHVnaW5zID0gW119ID0ge30pIHtcbiAgICAgICAgdGhpcy5wbHVnaW5zID0gcGx1Z2lucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gbm9kZVxuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIHRyYW5zZm9ybShub2RlKSB7XG4gICAgICAgIHRoaXMuaW52b2tlUGx1Z2lucygnaW5pdGlhbGl6ZScsIG5vZGUsIHRoaXMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLm9wdGltaXplTm9kZShub2RlLCBbXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGV9IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlTm9kZVtdfSBwYXJlbnRzXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgb3B0aW1pemVOb2RlKG5vZGUsIHBhcmVudHMpIHtcbiAgICAgICAgaWYgKCEobm9kZSBpbnN0YW5jZW9mIFRlbXBsYXRlTm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBub2RlO1xuICAgICAgICB9XG5cbiAgICAgICAgbm9kZSA9IHRoaXMuaW52b2tlUGx1Z2lucygnb25Ob2RlJywgbm9kZSwgcGFyZW50cywgdGhpcyk7XG4gICAgICAgIG5vZGUgPSB0aGlzLmludm9rZVBsdWdpbnMoJ29uJyArIG5vZGUuY29uc3RydWN0b3IubmFtZSwgbm9kZSwgcGFyZW50cywgdGhpcyk7XG5cbiAgICAgICAgdmFyIG5ld1BhcmVudHMgPSBbXS5jb25jYXQocGFyZW50cywgW25vZGVdKTtcblxuICAgICAgICBPYmplY3Qua2V5cyhub2RlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBpZiAobm9kZVtrZXldIGluc3RhbmNlb2YgVGVtcGxhdGVOb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZVtrZXldID0gdGhpcy5vcHRpbWl6ZU5vZGUobm9kZVtrZXldLCBuZXdQYXJlbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkobm9kZVtrZXldKSkge1xuICAgICAgICAgICAgICAgIG5vZGVba2V5XSA9IG5vZGVba2V5XS5tYXAoY2hpbGROb2RlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW1pemVOb2RlKGNoaWxkTm9kZSwgbmV3UGFyZW50cylcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIG1ldGhvZFxuICAgICAqIEBwYXJhbSBub2RlXG4gICAgICogQHBhcmFtIGFyZ3NcbiAgICAgKiBAcmV0dXJucyB7Kn1cbiAgICAgKi9cbiAgICBpbnZva2VQbHVnaW5zKG1ldGhvZCwgbm9kZSwgLi4uYXJncykge1xuICAgICAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgdGhpcy5wbHVnaW5zLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdmFyIHBsdWdpbiA9IHRoaXMucGx1Z2luc1tpbmRleF07XG5cbiAgICAgICAgICAgIGlmIChwbHVnaW5bbWV0aG9kXSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBwbHVnaW5bbWV0aG9kXShub2RlLCAuLi5hcmdzKSB8fCBub2RlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG59XG4iXX0=

/***/ },
/* 201 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.TemplateNode = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNode =
	
	/**
	 * @param {TemplateEnvironment} env
	 */
	exports.TemplateNode = function TemplateNode(env) {
	    (0, _classCallCheck3.default)(this, TemplateNode);
	
	    this.env = env;
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7SUFBYSxZOztBQUVUOzs7UUFGUyxZLEdBS1Qsc0JBQVksR0FBWixFQUFpQjtBQUFBOztBQUNiLFNBQUssR0FBTCxHQUFXLEdBQVg7QUFDSCxDIiwiZmlsZSI6IlRlbXBsYXRlTm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBUZW1wbGF0ZU5vZGUge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihlbnYpIHtcbiAgICAgICAgdGhpcy5lbnYgPSBlbnY7XG4gICAgfVxuICAgIFxufSJdfQ==

/***/ },
/* 202 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateEnvironment = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _TemplateNodeComponent = __webpack_require__(203);
	
	var _TemplateNodeContent = __webpack_require__(206);
	
	var _TemplateNodeAttribute = __webpack_require__(210);
	
	var _TemplateNodeString = __webpack_require__(204);
	
	var _TemplateNodeExpression = __webpack_require__(215);
	
	var _TemplateNodePath = __webpack_require__(213);
	
	var _TemplateNodeStringProxy = __webpack_require__(208);
	
	var _TemplateNodeHelperHashAttributes = __webpack_require__(218);
	
	var _TemplateNodeHelperHashAttribute = __webpack_require__(219);
	
	var _TemplateNodeCompiled = __webpack_require__(220);
	
	var _TemplateNodeComment = __webpack_require__(209);
	
	var _TemplateNodeCallExpression = __webpack_require__(214);
	
	var _TemplateNodePrimitive = __webpack_require__(205);
	
	var _TemplateNodeEscapedString = __webpack_require__(207);
	
	var _TemplateNodeArray = __webpack_require__(221);
	
	var _TemplateNodeHash = __webpack_require__(222);
	
	var _TemplateNodeHashAttribute = __webpack_require__(223);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var FACTORIES = {
	    Text: _TemplateNodeString.TemplateNodeString,
	    Component: _TemplateNodeComponent.TemplateNodeComponent,
	    Expression: _TemplateNodeExpression.TemplateNodeExpression,
	    BlockExpression: _TemplateNodeExpression.TemplateNodeExpression,
	    CallExpression: _TemplateNodeCallExpression.TemplateNodeCallExpression,
	    Path: _TemplateNodeExpression.TemplateNodeExpression,
	    Comment: _TemplateNodeComment.TemplateNodeComment,
	    Primitive: _TemplateNodePrimitive.TemplateNodePrimitive,
	    EscapedString: _TemplateNodeEscapedString.TemplateNodeEscapedString,
	    Array: _TemplateNodeArray.TemplateNodeArray,
	    Hash: _TemplateNodeHash.TemplateNodeHash
	};
	
	var TemplateEnvironment = function () {
	
	    /**
	     * @param {{}} define
	     * @param {{}} helpers
	     * @param {{}} components
	     * @param {{}} runtimePath
	     */
	    function TemplateEnvironment(_ref) {
	        var _ref$define = _ref.define;
	        var define = _ref$define === undefined ? {} : _ref$define;
	        var _ref$helpers = _ref.helpers;
	        var helpers = _ref$helpers === undefined ? {} : _ref$helpers;
	        var _ref$components = _ref.components;
	        var components = _ref$components === undefined ? {} : _ref$components;
	        var _ref$runtimePath = _ref.runtimePath;
	        var runtimePath = _ref$runtimePath === undefined ? /*require.resolve*/(194) : _ref$runtimePath;
	        (0, _classCallCheck3.default)(this, TemplateEnvironment);
	
	        this.scopes = [];
	        this.imports = {};
	        this.counter = 0;
	
	        this.define = define;
	        this.helpers = helpers;
	        this.components = components;
	        this.runtimePath = runtimePath;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.compile = function compile(content) {
	        var compiledContent = content.compile(),
	            importsString = this.compileImports(this.imports);
	
	        return importsString + 'module.exports = function(context){return ' + compiledContent + '}';
	    };
	
	    /**
	     * @param {{}} imports
	     * @param {string} EOL
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.compileImports = function compileImports(imports) {
	        var EOL = arguments.length <= 1 || arguments[1] === undefined ? '\n\n' : arguments[1];
	
	        var importsArray = Object.keys(imports).map(function (key) {
	            var _imports$key = imports[key];
	            var path = _imports$key.path;
	            var name = _imports$key.name;
	
	
	            return key + ' = require(' + JSON.stringify(path) + ')' + (name ? '.' + name : '');
	        });
	
	        return importsArray.length ? 'var ' + importsArray.join(',') + ';' + EOL : '';
	    };
	
	    /**
	     * @param {{}} hash
	     *
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.compileHash = function compileHash(hash) {
	        var params = Object.keys(hash).map(function (key) {
	            return JSON.stringify(key) + ':' + hash[key];
	        });
	
	        return '{' + params.join(',') + '}';
	    };
	
	    /**
	     * @param {string} name
	     */
	
	
	    TemplateEnvironment.prototype.resolveComponent = function resolveComponent(name) {
	        var componentName = 'Component';
	
	        if (this.components[name]) {
	            componentName = name;
	        }
	
	        if (!this.imports[componentName]) {
	            this.imports[componentName] = {
	                path: this.components[componentName],
	                name: componentName
	            };
	        }
	
	        return componentName;
	    };
	
	    /**
	     * @param {string} name
	     * @param {function} callback
	     *
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.resolveAsync = function resolveAsync(name, callback) {
	        if (this.imports[name]) {
	            return callback(this.imports[name].name);
	        }
	
	        if (!this.components[name]) {
	            return callback(name);
	        }
	
	        this.resolveComponent('AsyncComponent');
	
	        var origImports = this.imports;
	        this.imports = Object.create(this.imports);
	        this.imports[name] = { name: name };
	
	        var result = callback(name, this.components[name]);
	
	        this.imports = origImports;
	
	        return result;
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    TemplateEnvironment.prototype.getAsyncImports = function getAsyncImports() {
	        var _this = this;
	
	        var imports = {};
	
	        Object.keys(this.imports).forEach(function (key) {
	            if (_this.imports[key].path) {
	                imports[key] = _this.imports[key];
	            }
	        });
	
	        return imports;
	    };
	
	    /**
	     * @param {string} name
	     *
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.resolveHelper = function resolveHelper(name) {
	        if (this.helpers[name]) {
	            var helperName = '_' + name;
	            this.imports[helperName] = { path: this.helpers[name], name: 'default' };
	
	            return helperName;
	        }
	
	        return 'context.' + name;
	    };
	
	    /**
	     * @param {string} name
	     *
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.resolveRuntime = function resolveRuntime(name) {
	        var funcName = '__' + name;
	
	        this.imports[funcName] = {
	            path: this.runtimePath,
	            name: name
	        };
	
	        return funcName;
	    };
	
	    /**
	     * @param {{}} scope
	     * @param {function} callback
	     * @returns {{watchers: {}}}
	     */
	
	
	    TemplateEnvironment.prototype.scope = function scope(_scope, callback) {
	        this.scopes.push(_scope);
	        var result = callback(_scope);
	        this.scopes.pop();
	
	        return result;
	    };
	
	    /**
	     * @returns {{watchers: {}}}
	     */
	
	
	    TemplateEnvironment.prototype.getScope = function getScope() {
	        if (this.scopes.length) {
	            return this.scopes[this.scopes.length - 1];
	        }
	    };
	
	    /**
	     * @param {string} name
	     * @returns {{}[]}
	     */
	
	
	    TemplateEnvironment.prototype.filterScopes = function filterScopes(name) {
	        return this.scopes.filter(function (scope) {
	            return scope[name] !== undefined;
	        });
	    };
	
	    /**
	     * @param {string} name
	     *
	     * @returns {*}
	     */
	
	
	    TemplateEnvironment.prototype.scopeValue = function scopeValue(name) {
	        var scopes = this.filterScopes(name);
	
	        if (scopes.length) {
	            return scopes[scopes.length - 1][name];
	        }
	    };
	
	    /**
	     * @param {string} name
	     *
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.watcher = function watcher(name) {
	        var scopes = this.filterScopes('watchers');
	
	        if (scopes.length) {
	            var varName = void 0,
	                index = 0;
	
	            while (!varName && scopes[index]) {
	                varName = scopes[index++].watchers[name];
	            }
	
	            if (!varName) {
	                varName = this.tempVar();
	            }
	
	            for (index = 0; index < scopes.length; index++) {
	                scopes[index].watchers[name] = varName;
	            }
	
	            return varName;
	        }
	
	        return name;
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateEnvironment.prototype.tempVar = function tempVar() {
	        return 'v' + this.counter++;
	    };
	
	    /**
	     * @param {string} variable
	     *
	     * @returns {*}
	     */
	
	
	    TemplateEnvironment.prototype.getDefine = function getDefine(variable) {
	        return this.define[variable];
	    };
	
	    /**
	     * @param {{type: string}|string} node
	     *
	     * @returns {TemplateNode}
	     */
	
	
	    TemplateEnvironment.prototype.factory = function factory(node) {
	        if (typeof node === 'string') {
	            return this.factoryString(node);
	        }
	
	        if (Array.isArray(node)) {
	            return this.factoryContent(node);
	        }
	
	        if (!FACTORIES[node.type]) {
	            console.log(node);
	            throw new Error('Unknown type ' + node.type);
	        }
	
	        return FACTORIES[node.type].factory(node, this);
	    };
	
	    /**
	     * @param {{type: string}[]} nodes
	     *
	     * @returns {TemplateNode[]}
	     */
	
	
	    TemplateEnvironment.prototype.factoryNodes = function factoryNodes(nodes) {
	        var _this2 = this;
	
	        return nodes.map(function (node) {
	            return _this2.factory(node);
	        });
	    };
	
	    /**
	     * @param {{type: string}[]} nodes
	     *
	     * @returns {TemplateNodeContent}
	     */
	
	
	    TemplateEnvironment.prototype.factoryContent = function factoryContent(nodes) {
	        return _TemplateNodeContent.TemplateNodeContent.factory(nodes, this);
	    };
	
	    /**
	     * @param {{}} node
	     *
	     * @returns {TemplateNodeAttribute}
	     */
	
	
	    TemplateEnvironment.prototype.factoryAttribute = function factoryAttribute(node) {
	        return _TemplateNodeAttribute.TemplateNodeAttribute.factory(node, this);
	    };
	
	    /**
	     * @param {string} string
	     *
	     * @returns {TemplateNodeString}
	     */
	
	
	    TemplateEnvironment.prototype.factoryString = function factoryString(string) {
	        return _TemplateNodeString.TemplateNodeString.factory(string, this);
	    };
	
	    /**
	     * @param {{}[]} nodes
	     *
	     * @returns {TemplateNodeStringProxy}
	     */
	
	
	    TemplateEnvironment.prototype.factoryStringProxy = function factoryStringProxy(nodes) {
	        return _TemplateNodeStringProxy.TemplateNodeStringProxy.factory(nodes, this);
	    };
	
	    /**
	     * @param {string} path
	     *
	     * @returns {TemplateNodePath}
	     */
	
	
	    TemplateEnvironment.prototype.factoryPath = function factoryPath(path) {
	        return _TemplateNodePath.TemplateNodePath.factory(path, this);
	    };
	
	    /**
	     * @param {{}[]} nodes
	     *
	     * @returns {TemplateNodeHelperHashAttributes}
	     */
	
	
	    TemplateEnvironment.prototype.factoryHashAttributes = function factoryHashAttributes(nodes) {
	        return _TemplateNodeHelperHashAttributes.TemplateNodeHelperHashAttributes.factory(nodes, this);
	    };
	
	    /**
	     * @param {{}[]} node
	     *
	     * @returns {TemplateNodeHelperHashAttribute}
	     */
	
	
	    TemplateEnvironment.prototype.factoryHelperHashAttribute = function factoryHelperHashAttribute(node) {
	        return _TemplateNodeHelperHashAttribute.TemplateNodeHelperHashAttribute.factory(node, this);
	    };
	
	    /**
	     * @param {{}[]} node
	     *
	     * @returns {TemplateNodeHelperHashAttribute}
	     */
	
	
	    TemplateEnvironment.prototype.factoryHashAttribute = function factoryHashAttribute(node) {
	        return _TemplateNodeHashAttribute.TemplateNodeHashAttribute.factory(node, this);
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {string} content
	     * @param {{}} options
	     *
	     * @returns {TemplateNodeCompiled}
	     */
	
	
	    TemplateEnvironment.prototype.factoryCompiled = function factoryCompiled(content, options) {
	        return new _TemplateNodeCompiled.TemplateNodeCompiled(content, options);
	    };
	
	    return TemplateEnvironment;
	}();
	
	exports.TemplateEnvironment = TemplateEnvironment;
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9UZW1wbGF0ZS9UZW1wbGF0ZUVudmlyb25tZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBRUEsSUFBTSxZQUFZO0FBQ2QsZ0RBRGM7QUFFZCwyREFGYztBQUdkLDhEQUhjO0FBSWQsbUVBSmM7QUFLZCwwRUFMYztBQU1kLHdEQU5jO0FBT2QscURBUGM7QUFRZCwyREFSYztBQVNkLHVFQVRjO0FBVWQsK0NBVmM7QUFXZDtBQVhjLENBQWxCOztJQWNhLG1COztBQUVUOzs7Ozs7QUFNQSx1Q0FLRztBQUFBLCtCQUpDLE1BSUQ7QUFBQSxZQUpDLE1BSUQsK0JBSlUsRUFJVjtBQUFBLGdDQUhDLE9BR0Q7QUFBQSxZQUhDLE9BR0QsZ0NBSFcsRUFHWDtBQUFBLG1DQUZDLFVBRUQ7QUFBQSxZQUZDLFVBRUQsbUNBRmMsRUFFZDtBQUFBLG9DQURDLFdBQ0Q7QUFBQSxZQURDLFdBQ0Qsb0NBRGUsUUFBUSxPQUFSLENBQWdCLG9CQUFoQixDQUNmO0FBQUE7O0FBQ0MsYUFBSyxNQUFMLEdBQWMsRUFBZDtBQUNBLGFBQUssT0FBTCxHQUFlLEVBQWY7QUFDQSxhQUFLLE9BQUwsR0FBZSxDQUFmOztBQUVBLGFBQUssTUFBTCxHQUFjLE1BQWQ7QUFDQSxhQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsYUFBSyxVQUFMLEdBQWtCLFVBQWxCO0FBQ0EsYUFBSyxXQUFMLEdBQW1CLFdBQW5CO0FBQ0g7O0FBRUQ7Ozs7O2tDQUdBLE8sb0JBQVEsTyxFQUFTO0FBQ2IsWUFBSSxrQkFBa0IsUUFBUSxPQUFSLEVBQXRCO0FBQUEsWUFDSSxnQkFBZ0IsS0FBSyxjQUFMLENBQW9CLEtBQUssT0FBekIsQ0FEcEI7O0FBR0EsZUFBVSxhQUFWLGtEQUFvRSxlQUFwRTtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsYywyQkFBZSxPLEVBQXVCO0FBQUEsWUFBZCxHQUFjLHlEQUFSLE1BQVE7O0FBQ2xDLFlBQUksZUFBZSxPQUFPLElBQVAsQ0FBWSxPQUFaLEVBQXFCLEdBQXJCLENBQXlCLGVBQU87QUFBQSwrQkFDNUIsUUFBUSxHQUFSLENBRDRCO0FBQUEsZ0JBQzFDLElBRDBDLGdCQUMxQyxJQUQwQztBQUFBLGdCQUNwQyxJQURvQyxnQkFDcEMsSUFEb0M7OztBQUcvQyxtQkFBVSxHQUFWLG1CQUEyQixLQUFLLFNBQUwsQ0FBZSxJQUFmLENBQTNCLFVBQW1ELGFBQVcsSUFBWCxHQUFvQixFQUF2RTtBQUNILFNBSmtCLENBQW5COztBQU1BLGVBQU8sYUFBYSxNQUFiLFlBQTZCLGFBQWEsSUFBYixDQUFrQixHQUFsQixDQUE3QixTQUF1RCxHQUF2RCxHQUErRCxFQUF0RTtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsVyx3QkFBWSxJLEVBQU07QUFDZCxZQUFJLFNBQVMsT0FBTyxJQUFQLENBQVksSUFBWixFQUFrQixHQUFsQixDQUFzQixlQUFPO0FBQ3RDLG1CQUFVLEtBQUssU0FBTCxDQUFlLEdBQWYsQ0FBVixTQUFpQyxLQUFLLEdBQUwsQ0FBakM7QUFDSCxTQUZZLENBQWI7O0FBSUEscUJBQVcsT0FBTyxJQUFQLENBQVksR0FBWixDQUFYO0FBQ0gsSzs7QUFFRDs7Ozs7a0NBR0EsZ0IsNkJBQWlCLEksRUFBTTtBQUNuQixZQUFJLGdCQUFnQixXQUFwQjs7QUFFQSxZQUFJLEtBQUssVUFBTCxDQUFnQixJQUFoQixDQUFKLEVBQTJCO0FBQ3ZCLDRCQUFnQixJQUFoQjtBQUNIOztBQUVELFlBQUksQ0FBQyxLQUFLLE9BQUwsQ0FBYSxhQUFiLENBQUwsRUFBa0M7QUFDOUIsaUJBQUssT0FBTCxDQUFhLGFBQWIsSUFBOEI7QUFDMUIsc0JBQU0sS0FBSyxVQUFMLENBQWdCLGFBQWhCLENBRG9CO0FBRTFCLHNCQUFNO0FBRm9CLGFBQTlCO0FBSUg7O0FBRUQsZUFBTyxhQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7a0NBTUEsWSx5QkFBYSxJLEVBQU0sUSxFQUFVO0FBQ3pCLFlBQUksS0FBSyxPQUFMLENBQWEsSUFBYixDQUFKLEVBQXdCO0FBQ3BCLG1CQUFPLFNBQVMsS0FBSyxPQUFMLENBQWEsSUFBYixFQUFtQixJQUE1QixDQUFQO0FBQ0g7O0FBRUQsWUFBSSxDQUFDLEtBQUssVUFBTCxDQUFnQixJQUFoQixDQUFMLEVBQTRCO0FBQ3hCLG1CQUFPLFNBQVMsSUFBVCxDQUFQO0FBQ0g7O0FBRUQsYUFBSyxnQkFBTCxDQUFzQixnQkFBdEI7O0FBRUEsWUFBSSxjQUFjLEtBQUssT0FBdkI7QUFDQSxhQUFLLE9BQUwsR0FBZSxPQUFPLE1BQVAsQ0FBYyxLQUFLLE9BQW5CLENBQWY7QUFDQSxhQUFLLE9BQUwsQ0FBYSxJQUFiLElBQXFCLEVBQUMsVUFBRCxFQUFyQjs7QUFFQSxZQUFJLFNBQVMsU0FBUyxJQUFULEVBQWUsS0FBSyxVQUFMLENBQWdCLElBQWhCLENBQWYsQ0FBYjs7QUFFQSxhQUFLLE9BQUwsR0FBZSxXQUFmOztBQUVBLGVBQU8sTUFBUDtBQUNILEs7O0FBRUQ7Ozs7O2tDQUdBLGUsOEJBQWtCO0FBQUE7O0FBQ2QsWUFBSSxVQUFVLEVBQWQ7O0FBRUEsZUFBTyxJQUFQLENBQVksS0FBSyxPQUFqQixFQUEwQixPQUExQixDQUFrQyxlQUFPO0FBQ3JDLGdCQUFJLE1BQUssT0FBTCxDQUFhLEdBQWIsRUFBa0IsSUFBdEIsRUFBNEI7QUFDeEIsd0JBQVEsR0FBUixJQUFlLE1BQUssT0FBTCxDQUFhLEdBQWIsQ0FBZjtBQUNIO0FBQ0osU0FKRDs7QUFNQSxlQUFPLE9BQVA7QUFDSCxLOztBQUVEOzs7Ozs7O2tDQUtBLGEsMEJBQWMsSSxFQUFNO0FBQ2hCLFlBQUksS0FBSyxPQUFMLENBQWEsSUFBYixDQUFKLEVBQXdCO0FBQ3BCLGdCQUFJLGFBQWEsTUFBTSxJQUF2QjtBQUNBLGlCQUFLLE9BQUwsQ0FBYSxVQUFiLElBQTJCLEVBQUMsTUFBTSxLQUFLLE9BQUwsQ0FBYSxJQUFiLENBQVAsRUFBMkIsTUFBTSxTQUFqQyxFQUEzQjs7QUFFQSxtQkFBTyxVQUFQO0FBQ0g7O0FBRUQsNEJBQWtCLElBQWxCO0FBQ0gsSzs7QUFFRDs7Ozs7OztrQ0FLQSxjLDJCQUFlLEksRUFBTTtBQUNqQixZQUFJLFdBQVcsT0FBTyxJQUF0Qjs7QUFFQSxhQUFLLE9BQUwsQ0FBYSxRQUFiLElBQXlCO0FBQ3JCLGtCQUFNLEtBQUssV0FEVTtBQUVyQixrQkFBTTtBQUZlLFNBQXpCOztBQUtBLGVBQU8sUUFBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsSyxrQkFBTSxNLEVBQU8sUSxFQUFVO0FBQ25CLGFBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsTUFBakI7QUFDQSxZQUFJLFNBQVMsU0FBUyxNQUFULENBQWI7QUFDQSxhQUFLLE1BQUwsQ0FBWSxHQUFaOztBQUVBLGVBQU8sTUFBUDtBQUNILEs7O0FBRUQ7Ozs7O2tDQUdBLFEsdUJBQVc7QUFDUCxZQUFJLEtBQUssTUFBTCxDQUFZLE1BQWhCLEVBQXdCO0FBQ3BCLG1CQUFPLEtBQUssTUFBTCxDQUFZLEtBQUssTUFBTCxDQUFZLE1BQVosR0FBcUIsQ0FBakMsQ0FBUDtBQUNIO0FBQ0osSzs7QUFFRDs7Ozs7O2tDQUlBLFkseUJBQWEsSSxFQUFNO0FBQ2YsZUFBTyxLQUFLLE1BQUwsQ0FBWSxNQUFaLENBQW1CO0FBQUEsbUJBQVMsTUFBTSxJQUFOLE1BQWdCLFNBQXpCO0FBQUEsU0FBbkIsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsVSx1QkFBVyxJLEVBQU07QUFDYixZQUFJLFNBQVMsS0FBSyxZQUFMLENBQWtCLElBQWxCLENBQWI7O0FBRUEsWUFBSSxPQUFPLE1BQVgsRUFBbUI7QUFDZixtQkFBTyxPQUFPLE9BQU8sTUFBUCxHQUFnQixDQUF2QixFQUEwQixJQUExQixDQUFQO0FBQ0g7QUFDSixLOztBQUVEOzs7Ozs7O2tDQUtBLE8sb0JBQVEsSSxFQUFNO0FBQ1YsWUFBSSxTQUFTLEtBQUssWUFBTCxDQUFrQixVQUFsQixDQUFiOztBQUVBLFlBQUksT0FBTyxNQUFYLEVBQW1CO0FBQ2YsZ0JBQUksZ0JBQUo7QUFBQSxnQkFBYSxRQUFRLENBQXJCOztBQUVBLG1CQUFPLENBQUMsT0FBRCxJQUFZLE9BQU8sS0FBUCxDQUFuQixFQUFrQztBQUM5QiwwQkFBVSxPQUFPLE9BQVAsRUFBZ0IsUUFBaEIsQ0FBeUIsSUFBekIsQ0FBVjtBQUNIOztBQUVELGdCQUFJLENBQUMsT0FBTCxFQUFjO0FBQ1YsMEJBQVUsS0FBSyxPQUFMLEVBQVY7QUFDSDs7QUFFRCxpQkFBSyxRQUFRLENBQWIsRUFBZ0IsUUFBUSxPQUFPLE1BQS9CLEVBQXVDLE9BQXZDLEVBQWdEO0FBQzVDLHVCQUFPLEtBQVAsRUFBYyxRQUFkLENBQXVCLElBQXZCLElBQStCLE9BQS9CO0FBQ0g7O0FBRUQsbUJBQU8sT0FBUDtBQUNIOztBQUVELGVBQU8sSUFBUDtBQUNILEs7O0FBRUQ7Ozs7O2tDQUdBLE8sc0JBQVU7QUFDTixxQkFBVyxLQUFLLE9BQUwsRUFBWDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsUyxzQkFBVSxRLEVBQVU7QUFDaEIsZUFBTyxLQUFLLE1BQUwsQ0FBWSxRQUFaLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O2tDQUtBLE8sb0JBQVEsSSxFQUFNO0FBQ1YsWUFBSSxPQUFPLElBQVAsS0FBZ0IsUUFBcEIsRUFBOEI7QUFDMUIsbUJBQU8sS0FBSyxhQUFMLENBQW1CLElBQW5CLENBQVA7QUFDSDs7QUFFRCxZQUFJLE1BQU0sT0FBTixDQUFjLElBQWQsQ0FBSixFQUF5QjtBQUNyQixtQkFBTyxLQUFLLGNBQUwsQ0FBb0IsSUFBcEIsQ0FBUDtBQUNIOztBQUVELFlBQUksQ0FBQyxVQUFVLEtBQUssSUFBZixDQUFMLEVBQTJCO0FBQ3ZCLG9CQUFRLEdBQVIsQ0FBWSxJQUFaO0FBQ0Esa0JBQU0sSUFBSSxLQUFKLENBQVUsa0JBQWtCLEtBQUssSUFBakMsQ0FBTjtBQUNIOztBQUVELGVBQU8sVUFBVSxLQUFLLElBQWYsRUFBcUIsT0FBckIsQ0FBNkIsSUFBN0IsRUFBbUMsSUFBbkMsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsWSx5QkFBYSxLLEVBQU87QUFBQTs7QUFDaEIsZUFBTyxNQUFNLEdBQU4sQ0FBVTtBQUFBLG1CQUFRLE9BQUssT0FBTCxDQUFhLElBQWIsQ0FBUjtBQUFBLFNBQVYsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsYywyQkFBZSxLLEVBQU87QUFDbEIsZUFBTyx5Q0FBb0IsT0FBcEIsQ0FBNEIsS0FBNUIsRUFBbUMsSUFBbkMsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EsZ0IsNkJBQWlCLEksRUFBTTtBQUNuQixlQUFPLDZDQUFzQixPQUF0QixDQUE4QixJQUE5QixFQUFvQyxJQUFwQyxDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7OztrQ0FLQSxhLDBCQUFjLE0sRUFBUTtBQUNsQixlQUFPLHVDQUFtQixPQUFuQixDQUEyQixNQUEzQixFQUFtQyxJQUFuQyxDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7OztrQ0FLQSxrQiwrQkFBbUIsSyxFQUFPO0FBQ3RCLGVBQU8saURBQXdCLE9BQXhCLENBQWdDLEtBQWhDLEVBQXVDLElBQXZDLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O2tDQUtBLFcsd0JBQVksSSxFQUFNO0FBQ2QsZUFBTyxtQ0FBaUIsT0FBakIsQ0FBeUIsSUFBekIsRUFBK0IsSUFBL0IsQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7a0NBS0EscUIsa0NBQXNCLEssRUFBTztBQUN6QixlQUFPLG1FQUFpQyxPQUFqQyxDQUF5QyxLQUF6QyxFQUFnRCxJQUFoRCxDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7OztrQ0FLQSwwQix1Q0FBMkIsSSxFQUFNO0FBQzdCLGVBQU8saUVBQWdDLE9BQWhDLENBQXdDLElBQXhDLEVBQThDLElBQTlDLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O2tDQUtBLG9CLGlDQUFxQixJLEVBQU07QUFDdkIsZUFBTyxxREFBMEIsT0FBMUIsQ0FBa0MsSUFBbEMsRUFBd0MsSUFBeEMsQ0FBUDtBQUNILEs7O0FBRUQ7QUFDQTs7Ozs7Ozs7a0NBTUEsZSw0QkFBZ0IsTyxFQUFTLE8sRUFBUztBQUM5QixlQUFPLCtDQUF5QixPQUF6QixFQUFrQyxPQUFsQyxDQUFQO0FBQ0gsSyIsImZpbGUiOiJUZW1wbGF0ZUVudmlyb25tZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZW1wbGF0ZU5vZGVDb21wb25lbnR9IGZyb20gJy4vbm9kZXMvVGVtcGxhdGVOb2RlQ29tcG9uZW50JztcbmltcG9ydCB7VGVtcGxhdGVOb2RlQ29udGVudH0gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVDb250ZW50JztcbmltcG9ydCB7VGVtcGxhdGVOb2RlQXR0cmlidXRlfSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZUF0dHJpYnV0ZSc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZVN0cmluZ30gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVTdHJpbmcnO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVFeHByZXNzaW9ufSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZUV4cHJlc3Npb24nO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVQYXRofSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZVBhdGgnO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVTdHJpbmdQcm94eX0gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVTdHJpbmdQcm94eSc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZUhlbHBlckhhc2hBdHRyaWJ1dGVzfSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZUhlbHBlckhhc2hBdHRyaWJ1dGVzJztcbmltcG9ydCB7VGVtcGxhdGVOb2RlSGVscGVySGFzaEF0dHJpYnV0ZX0gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlJztcbmltcG9ydCB7VGVtcGxhdGVOb2RlQ29tcGlsZWR9IGZyb20gJy4vbm9kZXMvVGVtcGxhdGVOb2RlQ29tcGlsZWQnO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVDb21tZW50fSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZUNvbW1lbnQnO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVDYWxsRXhwcmVzc2lvbn0gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVDYWxsRXhwcmVzc2lvbic7XG5pbXBvcnQge1RlbXBsYXRlTm9kZVByaW1pdGl2ZX0gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVQcmltaXRpdmUnO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVFc2NhcGVkU3RyaW5nfSBmcm9tICcuL25vZGVzL1RlbXBsYXRlTm9kZUVzY2FwZWRTdHJpbmcnO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVBcnJheX0gZnJvbSAnLi9ub2Rlcy9UZW1wbGF0ZU5vZGVBcnJheSc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZUhhc2h9IGZyb20gJy4vbm9kZXMvVGVtcGxhdGVOb2RlSGFzaCc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZUhhc2hBdHRyaWJ1dGV9IGZyb20gJy4vbm9kZXMvVGVtcGxhdGVOb2RlSGFzaEF0dHJpYnV0ZSc7XG5cbmNvbnN0IEZBQ1RPUklFUyA9IHtcbiAgICBUZXh0OiBUZW1wbGF0ZU5vZGVTdHJpbmcsXG4gICAgQ29tcG9uZW50OiBUZW1wbGF0ZU5vZGVDb21wb25lbnQsXG4gICAgRXhwcmVzc2lvbjogVGVtcGxhdGVOb2RlRXhwcmVzc2lvbixcbiAgICBCbG9ja0V4cHJlc3Npb246IFRlbXBsYXRlTm9kZUV4cHJlc3Npb24sXG4gICAgQ2FsbEV4cHJlc3Npb246IFRlbXBsYXRlTm9kZUNhbGxFeHByZXNzaW9uLFxuICAgIFBhdGg6IFRlbXBsYXRlTm9kZUV4cHJlc3Npb24sXG4gICAgQ29tbWVudDogVGVtcGxhdGVOb2RlQ29tbWVudCxcbiAgICBQcmltaXRpdmU6IFRlbXBsYXRlTm9kZVByaW1pdGl2ZSxcbiAgICBFc2NhcGVkU3RyaW5nOiBUZW1wbGF0ZU5vZGVFc2NhcGVkU3RyaW5nLFxuICAgIEFycmF5OiBUZW1wbGF0ZU5vZGVBcnJheSxcbiAgICBIYXNoOiBUZW1wbGF0ZU5vZGVIYXNoXG59O1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVFbnZpcm9ubWVudCB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBkZWZpbmVcbiAgICAgKiBAcGFyYW0ge3t9fSBoZWxwZXJzXG4gICAgICogQHBhcmFtIHt7fX0gY29tcG9uZW50c1xuICAgICAqIEBwYXJhbSB7e319IHJ1bnRpbWVQYXRoXG4gICAgICovXG4gICAgY29uc3RydWN0b3Ioe1xuICAgICAgICBkZWZpbmUgPSB7fSxcbiAgICAgICAgaGVscGVycyA9IHt9LFxuICAgICAgICBjb21wb25lbnRzID0ge30sXG4gICAgICAgIHJ1bnRpbWVQYXRoID0gcmVxdWlyZS5yZXNvbHZlKCcuLi9SdW50aW1lL3J1bnRpbWUnKVxuICAgIH0pIHtcbiAgICAgICAgdGhpcy5zY29wZXMgPSBbXTtcbiAgICAgICAgdGhpcy5pbXBvcnRzID0ge307XG4gICAgICAgIHRoaXMuY291bnRlciA9IDA7XG5cbiAgICAgICAgdGhpcy5kZWZpbmUgPSBkZWZpbmU7XG4gICAgICAgIHRoaXMuaGVscGVycyA9IGhlbHBlcnM7XG4gICAgICAgIHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG4gICAgICAgIHRoaXMucnVudGltZVBhdGggPSBydW50aW1lUGF0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbXBpbGUoY29udGVudCkge1xuICAgICAgICBsZXQgY29tcGlsZWRDb250ZW50ID0gY29udGVudC5jb21waWxlKCksXG4gICAgICAgICAgICBpbXBvcnRzU3RyaW5nID0gdGhpcy5jb21waWxlSW1wb3J0cyh0aGlzLmltcG9ydHMpO1xuXG4gICAgICAgIHJldHVybiBgJHtpbXBvcnRzU3RyaW5nfW1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oY29udGV4dCl7cmV0dXJuICR7Y29tcGlsZWRDb250ZW50fX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGltcG9ydHNcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gRU9MXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBjb21waWxlSW1wb3J0cyhpbXBvcnRzLCBFT0wgPSAnXFxuXFxuJykge1xuICAgICAgICBsZXQgaW1wb3J0c0FycmF5ID0gT2JqZWN0LmtleXMoaW1wb3J0cykubWFwKGtleSA9PiB7XG4gICAgICAgICAgICBsZXQge3BhdGgsIG5hbWV9ID0gaW1wb3J0c1trZXldO1xuXG4gICAgICAgICAgICByZXR1cm4gYCR7a2V5fSA9IHJlcXVpcmUoJHtKU09OLnN0cmluZ2lmeShwYXRoKX0pJHtuYW1lID8gYC4ke25hbWV9YCA6ICcnfWBcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGltcG9ydHNBcnJheS5sZW5ndGggPyBgdmFyICR7aW1wb3J0c0FycmF5LmpvaW4oJywnKX07JHtFT0x9YCA6ICcnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IGhhc2hcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgY29tcGlsZUhhc2goaGFzaCkge1xuICAgICAgICBsZXQgcGFyYW1zID0gT2JqZWN0LmtleXMoaGFzaCkubWFwKGtleSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYCR7SlNPTi5zdHJpbmdpZnkoa2V5KX06JHtoYXNoW2tleV19YFxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gYHske3BhcmFtcy5qb2luKCcsJyl9fWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICAgKi9cbiAgICByZXNvbHZlQ29tcG9uZW50KG5hbWUpIHtcbiAgICAgICAgbGV0IGNvbXBvbmVudE5hbWUgPSAnQ29tcG9uZW50JztcblxuICAgICAgICBpZiAodGhpcy5jb21wb25lbnRzW25hbWVdKSB7XG4gICAgICAgICAgICBjb21wb25lbnROYW1lID0gbmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5pbXBvcnRzW2NvbXBvbmVudE5hbWVdKSB7XG4gICAgICAgICAgICB0aGlzLmltcG9ydHNbY29tcG9uZW50TmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgcGF0aDogdGhpcy5jb21wb25lbnRzW2NvbXBvbmVudE5hbWVdLFxuICAgICAgICAgICAgICAgIG5hbWU6IGNvbXBvbmVudE5hbWVcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcG9uZW50TmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlc29sdmVBc3luYyhuYW1lLCBjYWxsYmFjaykge1xuICAgICAgICBpZiAodGhpcy5pbXBvcnRzW25hbWVdKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sodGhpcy5pbXBvcnRzW25hbWVdLm5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLmNvbXBvbmVudHNbbmFtZV0pIHtcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhuYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzb2x2ZUNvbXBvbmVudCgnQXN5bmNDb21wb25lbnQnKTtcblxuICAgICAgICBsZXQgb3JpZ0ltcG9ydHMgPSB0aGlzLmltcG9ydHM7XG4gICAgICAgIHRoaXMuaW1wb3J0cyA9IE9iamVjdC5jcmVhdGUodGhpcy5pbXBvcnRzKTtcbiAgICAgICAgdGhpcy5pbXBvcnRzW25hbWVdID0ge25hbWV9O1xuXG4gICAgICAgIGxldCByZXN1bHQgPSBjYWxsYmFjayhuYW1lLCB0aGlzLmNvbXBvbmVudHNbbmFtZV0pO1xuXG4gICAgICAgIHRoaXMuaW1wb3J0cyA9IG9yaWdJbXBvcnRzO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3t9fVxuICAgICAqL1xuICAgIGdldEFzeW5jSW1wb3J0cygpIHtcbiAgICAgICAgbGV0IGltcG9ydHMgPSB7fTtcblxuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmltcG9ydHMpLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmltcG9ydHNba2V5XS5wYXRoKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0c1trZXldID0gdGhpcy5pbXBvcnRzW2tleV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiBpbXBvcnRzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlc29sdmVIZWxwZXIobmFtZSkge1xuICAgICAgICBpZiAodGhpcy5oZWxwZXJzW25hbWVdKSB7XG4gICAgICAgICAgICBsZXQgaGVscGVyTmFtZSA9ICdfJyArIG5hbWU7XG4gICAgICAgICAgICB0aGlzLmltcG9ydHNbaGVscGVyTmFtZV0gPSB7cGF0aDogdGhpcy5oZWxwZXJzW25hbWVdLCBuYW1lOiAnZGVmYXVsdCd9O1xuXG4gICAgICAgICAgICByZXR1cm4gaGVscGVyTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBgY29udGV4dC4ke25hbWV9YDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICByZXNvbHZlUnVudGltZShuYW1lKSB7XG4gICAgICAgIGxldCBmdW5jTmFtZSA9ICdfXycgKyBuYW1lO1xuXG4gICAgICAgIHRoaXMuaW1wb3J0c1tmdW5jTmFtZV0gPSB7XG4gICAgICAgICAgICBwYXRoOiB0aGlzLnJ1bnRpbWVQYXRoLFxuICAgICAgICAgICAgbmFtZTogbmFtZVxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBmdW5jTmFtZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBzY29wZVxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXG4gICAgICogQHJldHVybnMge3t3YXRjaGVyczoge319fVxuICAgICAqL1xuICAgIHNjb3BlKHNjb3BlLCBjYWxsYmFjaykge1xuICAgICAgICB0aGlzLnNjb3Blcy5wdXNoKHNjb3BlKTtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGNhbGxiYWNrKHNjb3BlKTtcbiAgICAgICAgdGhpcy5zY29wZXMucG9wKCk7XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7e3dhdGNoZXJzOiB7fX19XG4gICAgICovXG4gICAgZ2V0U2NvcGUoKSB7XG4gICAgICAgIGlmICh0aGlzLnNjb3Blcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNjb3Blc1t0aGlzLnNjb3Blcy5sZW5ndGggLSAxXTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICogQHJldHVybnMge3t9W119XG4gICAgICovXG4gICAgZmlsdGVyU2NvcGVzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2NvcGVzLmZpbHRlcihzY29wZSA9PiBzY29wZVtuYW1lXSAhPT0gdW5kZWZpbmVkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgc2NvcGVWYWx1ZShuYW1lKSB7XG4gICAgICAgIGxldCBzY29wZXMgPSB0aGlzLmZpbHRlclNjb3BlcyhuYW1lKTtcblxuICAgICAgICBpZiAoc2NvcGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3Blc1tzY29wZXMubGVuZ3RoIC0gMV1bbmFtZV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB3YXRjaGVyKG5hbWUpIHtcbiAgICAgICAgbGV0IHNjb3BlcyA9IHRoaXMuZmlsdGVyU2NvcGVzKCd3YXRjaGVycycpO1xuXG4gICAgICAgIGlmIChzY29wZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBsZXQgdmFyTmFtZSwgaW5kZXggPSAwO1xuXG4gICAgICAgICAgICB3aGlsZSAoIXZhck5hbWUgJiYgc2NvcGVzW2luZGV4XSkge1xuICAgICAgICAgICAgICAgIHZhck5hbWUgPSBzY29wZXNbaW5kZXgrK10ud2F0Y2hlcnNbbmFtZV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghdmFyTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhck5hbWUgPSB0aGlzLnRlbXBWYXIoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9yIChpbmRleCA9IDA7IGluZGV4IDwgc2NvcGVzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgICAgICAgICAgIHNjb3Blc1tpbmRleF0ud2F0Y2hlcnNbbmFtZV0gPSB2YXJOYW1lO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdmFyTmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBuYW1lO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgdGVtcFZhcigpIHtcbiAgICAgICAgcmV0dXJuIGB2JHt0aGlzLmNvdW50ZXIrK31gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB2YXJpYWJsZVxuICAgICAqXG4gICAgICogQHJldHVybnMgeyp9XG4gICAgICovXG4gICAgZ2V0RGVmaW5lKHZhcmlhYmxlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRlZmluZVt2YXJpYWJsZV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7dHlwZTogc3RyaW5nfXxzdHJpbmd9IG5vZGVcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGV9XG4gICAgICovXG4gICAgZmFjdG9yeShub2RlKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygbm9kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhY3RvcnlTdHJpbmcobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShub2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFjdG9yeUNvbnRlbnQobm9kZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIUZBQ1RPUklFU1tub2RlLnR5cGVdKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhub2RlKTtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB0eXBlICcgKyBub2RlLnR5cGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIEZBQ1RPUklFU1tub2RlLnR5cGVdLmZhY3Rvcnkobm9kZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7dHlwZTogc3RyaW5nfVtdfSBub2Rlc1xuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZVtdfVxuICAgICAqL1xuICAgIGZhY3RvcnlOb2Rlcyhub2Rlcykge1xuICAgICAgICByZXR1cm4gbm9kZXMubWFwKG5vZGUgPT4gdGhpcy5mYWN0b3J5KG5vZGUpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t0eXBlOiBzdHJpbmd9W119IG5vZGVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlQ29udGVudH1cbiAgICAgKi9cbiAgICBmYWN0b3J5Q29udGVudChub2Rlcykge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlQ29udGVudC5mYWN0b3J5KG5vZGVzLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlQXR0cmlidXRlfVxuICAgICAqL1xuICAgIGZhY3RvcnlBdHRyaWJ1dGUobm9kZSkge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlQXR0cmlidXRlLmZhY3Rvcnkobm9kZSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZVN0cmluZ31cbiAgICAgKi9cbiAgICBmYWN0b3J5U3RyaW5nKHN0cmluZykge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlU3RyaW5nLmZhY3Rvcnkoc3RyaW5nLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9W119IG5vZGVzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlU3RyaW5nUHJveHl9XG4gICAgICovXG4gICAgZmFjdG9yeVN0cmluZ1Byb3h5KG5vZGVzKSB7XG4gICAgICAgIHJldHVybiBUZW1wbGF0ZU5vZGVTdHJpbmdQcm94eS5mYWN0b3J5KG5vZGVzLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aFxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZVBhdGh9XG4gICAgICovXG4gICAgZmFjdG9yeVBhdGgocGF0aCkge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlUGF0aC5mYWN0b3J5KHBhdGgsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e31bXX0gbm9kZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlc31cbiAgICAgKi9cbiAgICBmYWN0b3J5SGFzaEF0dHJpYnV0ZXMobm9kZXMpIHtcbiAgICAgICAgcmV0dXJuIFRlbXBsYXRlTm9kZUhlbHBlckhhc2hBdHRyaWJ1dGVzLmZhY3Rvcnkobm9kZXMsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e31bXX0gbm9kZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUhlbHBlckhhc2hBdHRyaWJ1dGV9XG4gICAgICovXG4gICAgZmFjdG9yeUhlbHBlckhhc2hBdHRyaWJ1dGUobm9kZSkge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlSGVscGVySGFzaEF0dHJpYnV0ZS5mYWN0b3J5KG5vZGUsIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e31bXX0gbm9kZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUhlbHBlckhhc2hBdHRyaWJ1dGV9XG4gICAgICovXG4gICAgZmFjdG9yeUhhc2hBdHRyaWJ1dGUobm9kZSkge1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlSGFzaEF0dHJpYnV0ZS5mYWN0b3J5KG5vZGUsIHRoaXMpO1xuICAgIH1cblxuICAgIC8vbm9pbnNwZWN0aW9uIEpTTWV0aG9kQ2FuQmVTdGF0aWNcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29udGVudFxuICAgICAqIEBwYXJhbSB7e319IG9wdGlvbnNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVDb21waWxlZH1cbiAgICAgKi9cbiAgICBmYWN0b3J5Q29tcGlsZWQoY29udGVudCwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm4gbmV3IFRlbXBsYXRlTm9kZUNvbXBpbGVkKGNvbnRlbnQsIG9wdGlvbnMpO1xuICAgIH1cbn1cbiJdfQ==

/***/ },
/* 203 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeComponent = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	var _TemplateNodeString = __webpack_require__(204);
	
	var _TemplateNodePrimitive = __webpack_require__(205);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeComponent = exports.TemplateNodeComponent = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeComponent, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeComponent(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeComponent);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeComponent.prototype.compile = function compile() {
	        return this._compile(this.getPragma());
	    };
	
	    /**
	     * @param {{}} pragma
	     * @returns {string}
	     * @private
	     */
	
	
	    TemplateNodeComponent.prototype._compile = function _compile(pragma) {
	        var _this2 = this;
	
	        if (pragma.match) {
	            if (!this.env.getDefine(pragma.match)) {
	                return this._compileAsyncComponent();
	            }
	        }
	
	        if (pragma.bundle) {
	            return this.env.resolveAsync(this.name, function (ComponentName, path) {
	                return _this2._compileBundle(pragma, ComponentName, path);
	            });
	        }
	
	        if (pragma.async) {
	            return this._compileAsync(pragma);
	        }
	
	        return this._compileSync(pragma);
	    };
	
	    /**
	     * @returns {string}
	     * @private
	     */
	
	
	    TemplateNodeComponent.prototype._compileSync = function _compileSync() {
	        var _this3 = this;
	
	        var name = this.name,
	            ComponentName = this.env.resolveComponent(name),
	            isCustomComponent = name === ComponentName,
	            params = {},
	            regionName = void 0,
	            scope = void 0;
	
	        if (name !== 'div' && !isCustomComponent) {
	            params.tagName = JSON.stringify(name);
	        }
	
	        if (this.attributes.length) {
	            (function () {
	                var attributes = {},
	                    events = {};
	
	                _this3.attributes.forEach(function (attr) {
	                    var attrName = attr.name,
	                        attrValue = attr.value;
	
	                    if (attr.isEvent()) {
	                        Object.assign(events, attr.compileEvent());
	                    } else if (attrName === 'as') {
	                        regionName = attrValue.compile();
	                    } else if (attrName === 'scope') {
	                        if (attrValue instanceof _TemplateNodeString.TemplateNodeString) {
	                            scope = attrValue.string;
	                        } else {
	                            throw new Error('Scope must be string');
	                        }
	                    } else if (attrName[0] !== '#') {
	                        if (!isCustomComponent && attrName !== 'events' && attrName !== 'options') {
	                            Object.assign(attributes, attr.compileHash());
	                        } else {
	                            Object.assign(params, attr.compileHash());
	                        }
	                    }
	                });
	
	                if (Object.keys(attributes).length) {
	                    params.attributes = _this3.env.compileHash(attributes);
	                }
	
	                if (Object.keys(events).length) {
	                    var eventsHash = _this3.env.compileHash(events);
	
	                    if (params.events) {
	                        params.events = 'Object.assign({},' + params.events + ',' + eventsHash + ')';
	                    } else {
	                        params.events = _this3.env.compileHash(events);
	                    }
	                }
	            })();
	        }
	
	        if (scope) {
	            params.content = this.env.scope({ scope: scope }, function () {
	                var content = _this3.compileContent();
	
	                return _this3.env.factoryCompiled('function(' + scope + '){return ' + content + '}', {
	                    isString: true,
	                    length: content.length
	                });
	            });
	        } else {
	            params.content = this.compileContent();
	        }
	
	        if (!params.content.length) {
	            delete params.content;
	        }
	
	        if (params.options) {
	            var options = params.options;
	            delete params.options;
	            params = 'Object.assign({},' + options + ',' + this.env.compileHash(params) + ')';
	        } else {
	            params = this.env.compileHash(params);
	        }
	
	        return (regionName ? regionName + '=' : '') + 'new ' + ComponentName + '(' + params + ')';
	    };
	
	    /**
	     * @param {{}} pragma
	     * @returns {string}
	     * @private
	     */
	
	
	    TemplateNodeComponent.prototype._compileAsync = function _compileAsync(pragma) {
	        var asyncMethod = pragma.async;
	
	        delete pragma.async;
	
	        var content = this._compile(pragma),
	            name = this.env.tempVar();
	
	        var then1 = 'function(){return ' + name + '.' + asyncMethod + '()}',
	            then2 = 'function(){return ' + name + '}';
	
	        var promise = 'function(' + name + '){return Promise.resolve(' + name + '=' + content + ').then(' + then1 + ').then(' + then2 + ')}()';
	
	        if (pragma.asyncAvoidComponent) {
	            return promise;
	        }
	
	        return this._compileAsyncComponent(promise);
	    };
	
	    /**
	     * @param {{}} pragma
	     * @param {string} componentName
	     * @param {string} path
	     *
	     * @returns {string}
	     * @private
	     */
	
	
	    TemplateNodeComponent.prototype._compileBundle = function _compileBundle(pragma, componentName, path) {
	        delete pragma.bundle;
	
	        if (!path) {
	            return this._compile(pragma);
	        }
	
	        if (pragma.async) {
	            pragma.asyncAvoidComponent = true;
	        }
	
	        var content = this._compile(pragma),
	            imports = this.env.getAsyncImports(),
	            importsString = this.env.compileImports(imports, '');
	
	        path = JSON.stringify('promise?global!' + path);
	
	        var promise = 'require(' + path + ')().then(function(bundle){var ' + componentName + '=bundle.' + componentName + ';' + importsString + 'return ' + content + '})';
	
	        return this._compileAsyncComponent(promise);
	    };
	
	    /**
	     * @param {string} promise
	     * @returns {string}
	     * @private
	     */
	
	
	    TemplateNodeComponent.prototype._compileAsyncComponent = function _compileAsyncComponent(promise) {
	        var AsyncComponent = this.env.resolveComponent('AsyncComponent');
	
	        if (promise) {
	            var params = {
	                promise: promise
	            };
	
	            return 'new ' + AsyncComponent + '(' + this.env.compileHash(params) + ')';
	        } else {
	            return 'new ' + AsyncComponent + '()';
	        }
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeComponent.prototype.compileContent = function compileContent() {
	        return this.content.compile({ mergeVars: false });
	    };
	
	    /**
	     * @param {string} name
	     * @returns {TemplateNodeAttribute}
	     */
	
	
	    TemplateNodeComponent.prototype.getAttribute = function getAttribute(name) {
	        return this.attributes.find(function (attr) {
	            return attr.name === name;
	        });
	    };
	
	    /**
	     * @param {string} name
	     * @returns {TemplateNodeAttribute}
	     */
	
	
	    TemplateNodeComponent.prototype.removeAttribute = function removeAttribute(name) {
	        this.attributes = this.attributes.filter(function (attr) {
	            return attr.name !== name;
	        });
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    TemplateNodeComponent.prototype.getPragma = function getPragma() {
	        var pragma = {};
	
	        this.attributes.forEach(function (attr) {
	            if (attr.name[0] === '#') {
	                var name = attr.name.slice(1),
	                    value = attr.value;
	
	                if (value instanceof _TemplateNodePrimitive.TemplateNodePrimitive) {
	                    pragma[name] = value.value;
	                } else if (value instanceof _TemplateNodeString.TemplateNodeString) {
	                    pragma[name] = value.string;
	                } else {
	                    throw new Error(attr.name + ' must be primitive type, because it is control compilation');
	                }
	            }
	        });
	
	        return pragma;
	    };
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeComponent}
	     */
	
	
	    TemplateNodeComponent.factory = function factory(node, env) {
	        node.attributes = (node.attributes || []).map(function (node) {
	            return env.factoryAttribute(node);
	        });
	        node.content = env.factoryContent(node.content || []);
	
	        return new TemplateNodeComponent(node, env);
	    };
	
	    return TemplateNodeComponent;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 204 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeString = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeString = exports.TemplateNodeString = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeString, _TemplateNode);
	
	    /**
	     * @param {string} string
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeString(string, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeString);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        _this.string = string;
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeString.prototype.compile = function compile() {
	        return JSON.stringify(this.string);
	    };
	
	    /**
	     * @param {string|{content: string}} string
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeString}
	     */
	
	
	    TemplateNodeString.factory = function factory(string, env) {
	        if (typeof string === 'object') {
	            string = string.content;
	        }
	
	        return new TemplateNodeString(string, env);
	    };
	
	    return TemplateNodeString;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVTdHJpbmcuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztJQUVhLGtCLFdBQUEsa0I7OztBQUVUOzs7O0FBSUEsZ0NBQVksTUFBWixFQUFvQixHQUFwQixFQUF5QjtBQUFBOztBQUFBLG1FQUNyQix5QkFBTSxHQUFOLENBRHFCOztBQUdyQixjQUFLLE1BQUwsR0FBYyxNQUFkO0FBSHFCO0FBSXhCOztBQUVEOzs7OztpQ0FHQSxPLHNCQUFVO0FBQ04sZUFBTyxLQUFLLFNBQUwsQ0FBZSxLQUFLLE1BQXBCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7Ozt1QkFNTyxPLG9CQUFRLE0sRUFBUSxHLEVBQUs7QUFDeEIsWUFBSSxPQUFPLE1BQVAsS0FBa0IsUUFBdEIsRUFBZ0M7QUFDNUIscUJBQVMsT0FBTyxPQUFoQjtBQUNIOztBQUVELGVBQU8sSUFBSSxrQkFBSixDQUF1QixNQUF2QixFQUErQixHQUEvQixDQUFQO0FBQ0gsSyIsImZpbGUiOiJUZW1wbGF0ZU5vZGVTdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlU3RyaW5nIGV4dGVuZHMgVGVtcGxhdGVOb2RlIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHN0cmluZywgZW52KSB7XG4gICAgICAgIHN1cGVyKGVudik7XG5cbiAgICAgICAgdGhpcy5zdHJpbmcgPSBzdHJpbmc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBjb21waWxlKCkge1xuICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodGhpcy5zdHJpbmcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfHtjb250ZW50OiBzdHJpbmd9fSBzdHJpbmdcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZVN0cmluZ31cbiAgICAgKi9cbiAgICBzdGF0aWMgZmFjdG9yeShzdHJpbmcsIGVudikge1xuICAgICAgICBpZiAodHlwZW9mIHN0cmluZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHN0cmluZyA9IHN0cmluZy5jb250ZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGF0ZU5vZGVTdHJpbmcoc3RyaW5nLCBlbnYpO1xuICAgIH1cblxufSJdfQ==

/***/ },
/* 205 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodePrimitive = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodePrimitive = exports.TemplateNodePrimitive = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodePrimitive, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodePrimitive}
	     */
	    function TemplateNodePrimitive(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodePrimitive);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodePrimitive.prototype.compile = function compile() {
	        return String(this.value);
	    };
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodePrimitive}
	     */
	
	
	    TemplateNodePrimitive.factory = function factory(node, env) {
	        return new this(node, env);
	    };
	
	    return TemplateNodePrimitive;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVQcmltaXRpdmUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztJQUVhLHFCLFdBQUEscUI7OztBQUVUOzs7Ozs7QUFNQSxtQ0FBWSxJQUFaLEVBQWtCLEdBQWxCLEVBQXVCO0FBQUE7O0FBQUEsbUVBQ25CLHlCQUFNLEdBQU4sQ0FEbUI7O0FBR25CLGVBQU8sTUFBUCxRQUFvQixJQUFwQjtBQUhtQjtBQUl0Qjs7QUFFRDs7Ozs7b0NBR0EsTyxzQkFBVTtBQUNOLGVBQU8sT0FBTyxLQUFLLEtBQVosQ0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7OzBCQU1PLE8sb0JBQVEsSSxFQUFNLEcsRUFBSztBQUN0QixlQUFPLElBQUksSUFBSixDQUFTLElBQVQsRUFBZSxHQUFmLENBQVA7QUFDSCxLIiwiZmlsZSI6IlRlbXBsYXRlTm9kZVByaW1pdGl2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVtcGxhdGVOb2RlfSBmcm9tICcuL1RlbXBsYXRlTm9kZSc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZU5vZGVQcmltaXRpdmUgZXh0ZW5kcyBUZW1wbGF0ZU5vZGUge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fX0gbm9kZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVFbnZpcm9ubWVudH0gZW52XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlUHJpbWl0aXZlfVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5vZGUsIGVudikge1xuICAgICAgICBzdXBlcihlbnYpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgbm9kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBjb21waWxlKCkge1xuICAgICAgICByZXR1cm4gU3RyaW5nKHRoaXMudmFsdWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZVByaW1pdGl2ZX1cbiAgICAgKi9cbiAgICBzdGF0aWMgZmFjdG9yeShub2RlLCBlbnYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyB0aGlzKG5vZGUsIGVudik7XG4gICAgfVxuXG59Il19

/***/ },
/* 206 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeContent = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	var _TemplateNodeEscapedString = __webpack_require__(207);
	
	var _TemplateNodeString = __webpack_require__(204);
	
	var _TemplateNodeStringProxy = __webpack_require__(208);
	
	var _TemplateNodeComment = __webpack_require__(209);
	
	var _TemplateNodeComponent = __webpack_require__(203);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeContent = exports.TemplateNodeContent = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeContent, _TemplateNode);
	
	    /**
	     * @param {TemplateNode[]} nodes
	     * @param {TemplateEnvironment} env
	     * @param {boolean} merged
	     */
	    function TemplateNodeContent(nodes, env) {
	        var _ref = arguments.length <= 2 || arguments[2] === undefined ? {} : arguments[2];
	
	        var _ref$merged = _ref.merged;
	        var merged = _ref$merged === undefined ? false : _ref$merged;
	        (0, _classCallCheck3.default)(this, TemplateNodeContent);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        _this.nodes = nodes;
	        _this.merged = merged;
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeContent.prototype.compile = function compile(options) {
	        var mergeNodes = this.mergeNodes(options),
	            outputArray = mergeNodes.map(function (node) {
	            return node.compile();
	        }),
	            isArray = true;
	
	        if (outputArray.length === 0) {
	            return this.env.factoryCompiled('""', {
	                length: 0,
	                isArray: false
	            });
	        }
	
	        if (outputArray.length === 1) {
	            return outputArray[0];
	        }
	
	        var isKnownOutput = mergeNodes.every(function (node) {
	            return node instanceof _TemplateNodeComponent.TemplateNodeComponent || node instanceof _TemplateNodeString.TemplateNodeString || node instanceof _TemplateNodeEscapedString.TemplateNodeEscapedString;
	        });
	
	        var output = '[' + outputArray.join(',') + ']';
	
	        if (!isKnownOutput) {
	            output = this.flatten(output);
	        }
	
	        if (this.env.scopeValue('isString')) {
	            output = this.joinStrings(output);
	            isArray = false;
	        }
	
	        return this.env.factoryCompiled(output, {
	            length: outputArray.length,
	            isArray: isArray
	        });
	    };
	
	    /**
	     * @param {string} content
	     * @returns {*}
	     */
	
	
	    TemplateNodeContent.prototype.flatten = function flatten(content) {
	        var func = this.env.resolveRuntime('mergeStrings');
	
	        return func + '(' + content + ', context)';
	    };
	
	    /**
	     * @param {string} content
	     * @returns {*}
	     */
	
	
	    TemplateNodeContent.prototype.joinStrings = function joinStrings(content) {
	        var func = this.env.resolveRuntime('join');
	
	        return func + '(' + content + ')';
	    };
	
	    TemplateNodeContent.prototype.mergeNodes = function mergeNodes() {
	        // return this.nodes;
	        if (!this.nodes.length || this.merged) {
	            return this.nodes;
	        }
	
	        var nodes = [],
	            queue = [];
	
	        var flushQueue = function flushQueue() {
	            var resultNode = void 0;
	
	            if (queue.length === 1) {
	                resultNode = queue[0];
	            } else if (queue.length > 0) {
	                resultNode = new _TemplateNodeStringProxy.TemplateNodeStringProxy(new TemplateNodeContent(queue, queue[0].env, { merged: true }), queue[0].env);
	            }
	
	            if (resultNode) {
	                nodes.push(resultNode);
	            }
	
	            queue = [];
	        };
	
	        var pushQueue = function pushQueue(node) {
	            var last = queue[queue.length - 1];
	
	            if (queue.length && node instanceof _TemplateNodeString.TemplateNodeString && last instanceof _TemplateNodeString.TemplateNodeString) {
	                last.string += node.string;
	            } else {
	                queue.push(node);
	            }
	        };
	
	        for (var index = 0; index < this.nodes.length; index++) {
	            var node = this.nodes[index];
	
	            if (node instanceof _TemplateNodeString.TemplateNodeString) {
	                pushQueue(node);
	            } else if (node instanceof _TemplateNodeComment.TemplateNodeComment) {} else {
	                flushQueue();
	                nodes.push(node);
	            }
	        }
	
	        flushQueue();
	
	        return nodes;
	    };
	
	    /**
	     * @param {{type: string}[]} nodes
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeContent}
	     */
	
	
	    TemplateNodeContent.factory = function factory(nodes, env) {
	        return new TemplateNodeContent(env.factoryNodes(nodes, env), env);
	    };
	
	    return TemplateNodeContent;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 207 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeEscapedString = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeEscapedString = exports.TemplateNodeEscapedString = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeEscapedString, _TemplateNode);
	
	    /**
	     * @param {string} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeEscapedString(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeEscapedString);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeEscapedString.prototype.compile = function compile() {
	        return JSON.stringify(this.content);
	    };
	
	    /**
	     * @param {{content: string}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeEscapedString}
	     */
	
	
	    TemplateNodeEscapedString.factory = function factory(node, env) {
	        return new TemplateNodeEscapedString(node, env);
	    };
	
	    return TemplateNodeEscapedString;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVFc2NhcGVkU3RyaW5nLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSx5QixXQUFBLHlCOzs7QUFFVDs7OztBQUlBLHVDQUFZLElBQVosRUFBa0IsR0FBbEIsRUFBdUI7QUFBQTs7QUFBQSxtRUFDbkIseUJBQU0sR0FBTixDQURtQjs7QUFHbkIsZUFBTyxNQUFQLFFBQW9CLElBQXBCO0FBSG1CO0FBSXRCOztBQUVEOzs7Ozt3Q0FHQSxPLHNCQUFVO0FBQ04sZUFBTyxLQUFLLFNBQUwsQ0FBZSxLQUFLLE9BQXBCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7Ozs4QkFNTyxPLG9CQUFRLEksRUFBTSxHLEVBQUs7QUFDdEIsZUFBTyxJQUFJLHlCQUFKLENBQThCLElBQTlCLEVBQW9DLEdBQXBDLENBQVA7QUFDSCxLIiwiZmlsZSI6IlRlbXBsYXRlTm9kZUVzY2FwZWRTdHJpbmcuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlRXNjYXBlZFN0cmluZyBleHRlbmRzIFRlbXBsYXRlTm9kZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbm9kZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVFbnZpcm9ubWVudH0gZW52XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobm9kZSwgZW52KSB7XG4gICAgICAgIHN1cGVyKGVudik7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBub2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbXBpbGUoKSB7XG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeSh0aGlzLmNvbnRlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e2NvbnRlbnQ6IHN0cmluZ319IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUVzY2FwZWRTdHJpbmd9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIHJldHVybiBuZXcgVGVtcGxhdGVOb2RlRXNjYXBlZFN0cmluZyhub2RlLCBlbnYpO1xuICAgIH1cblxufVxuIl19

/***/ },
/* 208 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeStringProxy = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeStringProxy = exports.TemplateNodeStringProxy = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeStringProxy, _TemplateNode);
	
	    /**
	     * @param {TemplateNodeContent} content
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeStringProxy(content, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeStringProxy);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        _this.content = content;
	        return _this;
	    }
	
	    /**
	     * @returns {{}}
	     */
	
	
	    TemplateNodeStringProxy.prototype.compile = function compile() {
	        var _this2 = this;
	
	        return this.env.scope({ watchers: [] }, function (scope) {
	            var content = _this2.content.compile();
	
	            if (content.isArray) {
	                var func = _this2.env.resolveRuntime('join');
	
	                content = func + '(' + content + ')';
	            }
	
	            var watchers = Object.keys(scope.watchers);
	
	            if (watchers.length) {
	                var proxy = _this2.env.resolveComponent('ValueProxy'),
	                    params = watchers.map(function (path) {
	                    return scope.watchers[path];
	                }),
	                    body = void 0;
	
	                if (watchers.length > 1) {
	                    (function () {
	                        var arg = _this2.env.tempVar();
	                        var result = params.map(function (param, index) {
	                            return param + '=' + arg + '[' + index + ']';
	                        });
	
	                        body = proxy + '.all([' + watchers.join(', ') + ']).pipe(function(' + arg + '){var ' + result.join(', ') + ';return ' + content + '})';
	                    })();
	                } else {
	                    body = watchers[0] + '.pipe(function(' + params[0] + '){return ' + content + '})';
	                }
	
	                return body;
	                return '(function(' + params.join(', ') + '){return ' + body + '})(' + watchers.join(',') + ')';
	            } else {
	                return '' + content;
	            }
	        });
	    };
	
	    /**
	     * @param {{}[]} nodes
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeStringProxy}
	     */
	
	
	    TemplateNodeStringProxy.factory = function factory(nodes, env) {
	        return new TemplateNodeStringProxy(env.factoryContent(nodes), env);
	    };
	
	    return TemplateNodeStringProxy;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVTdHJpbmdQcm94eS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0lBRWEsdUIsV0FBQSx1Qjs7O0FBRVQ7Ozs7QUFJQSxxQ0FBWSxPQUFaLEVBQXFCLEdBQXJCLEVBQTBCO0FBQUE7O0FBQUEsbUVBQ3RCLHlCQUFNLEdBQU4sQ0FEc0I7O0FBR3RCLGNBQUssT0FBTCxHQUFlLE9BQWY7QUFIc0I7QUFJekI7O0FBRUQ7Ozs7O3NDQUdBLE8sc0JBQVU7QUFBQTs7QUFDTixlQUFPLEtBQUssR0FBTCxDQUFTLEtBQVQsQ0FBZSxFQUFDLFVBQVUsRUFBWCxFQUFmLEVBQStCLFVBQUMsS0FBRCxFQUFXO0FBQzdDLGdCQUFJLFVBQVUsT0FBSyxPQUFMLENBQWEsT0FBYixFQUFkOztBQUVBLGdCQUFJLFFBQVEsT0FBWixFQUFxQjtBQUNqQixvQkFBSSxPQUFPLE9BQUssR0FBTCxDQUFTLGNBQVQsQ0FBd0IsTUFBeEIsQ0FBWDs7QUFFQSwwQkFBYSxJQUFiLFNBQXFCLE9BQXJCO0FBQ0g7O0FBRUQsZ0JBQUksV0FBVyxPQUFPLElBQVAsQ0FBWSxNQUFNLFFBQWxCLENBQWY7O0FBRUEsZ0JBQUksU0FBUyxNQUFiLEVBQXFCO0FBQ2pCLG9CQUFJLFFBQVEsT0FBSyxHQUFMLENBQVMsZ0JBQVQsQ0FBMEIsWUFBMUIsQ0FBWjtBQUFBLG9CQUNJLFNBQVMsU0FBUyxHQUFULENBQWE7QUFBQSwyQkFBUSxNQUFNLFFBQU4sQ0FBZSxJQUFmLENBQVI7QUFBQSxpQkFBYixDQURiO0FBQUEsb0JBRUksYUFGSjs7QUFJQSxvQkFBSSxTQUFTLE1BQVQsR0FBa0IsQ0FBdEIsRUFBeUI7QUFBQTtBQUNyQiw0QkFBSSxNQUFNLE9BQUssR0FBTCxDQUFTLE9BQVQsRUFBVjtBQUNBLDRCQUFJLFNBQVMsT0FBTyxHQUFQLENBQVcsVUFBQyxLQUFELEVBQVEsS0FBUjtBQUFBLG1DQUFxQixLQUFyQixTQUE4QixHQUE5QixTQUFxQyxLQUFyQztBQUFBLHlCQUFYLENBQWI7O0FBRUEsK0JBQVUsS0FBVixjQUF3QixTQUFTLElBQVQsQ0FBYyxJQUFkLENBQXhCLHlCQUErRCxHQUEvRCxjQUEyRSxPQUFPLElBQVAsQ0FBWSxJQUFaLENBQTNFLGdCQUF1RyxPQUF2RztBQUpxQjtBQUt4QixpQkFMRCxNQUtPO0FBQ0gsMkJBQVUsU0FBUyxDQUFULENBQVYsdUJBQXVDLE9BQU8sQ0FBUCxDQUF2QyxpQkFBNEQsT0FBNUQ7QUFDSDs7QUFFRCx1QkFBTyxJQUFQO0FBQ0Esc0NBQW9CLE9BQU8sSUFBUCxDQUFZLElBQVosQ0FBcEIsaUJBQWlELElBQWpELFdBQTJELFNBQVMsSUFBVCxDQUFjLEdBQWQsQ0FBM0Q7QUFFSCxhQWpCRCxNQWlCTztBQUNILDRCQUFVLE9BQVY7QUFDSDtBQUNKLFNBL0JNLENBQVA7QUFnQ0gsSzs7QUFFRDs7Ozs7Ozs7NEJBTU8sTyxvQkFBUSxLLEVBQU8sRyxFQUFLO0FBQ3ZCLGVBQU8sSUFBSSx1QkFBSixDQUE0QixJQUFJLGNBQUosQ0FBbUIsS0FBbkIsQ0FBNUIsRUFBdUQsR0FBdkQsQ0FBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlU3RyaW5nUHJveHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlU3RyaW5nUHJveHkgZXh0ZW5kcyBUZW1wbGF0ZU5vZGUge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGVDb250ZW50fSBjb250ZW50XG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb250ZW50LCBlbnYpIHtcbiAgICAgICAgc3VwZXIoZW52KTtcblxuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICBjb21waWxlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnYuc2NvcGUoe3dhdGNoZXJzOiBbXX0sIChzY29wZSkgPT4ge1xuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLmNvbnRlbnQuY29tcGlsZSgpO1xuXG4gICAgICAgICAgICBpZiAoY29udGVudC5pc0FycmF5KSB7XG4gICAgICAgICAgICAgICAgbGV0IGZ1bmMgPSB0aGlzLmVudi5yZXNvbHZlUnVudGltZSgnam9pbicpO1xuXG4gICAgICAgICAgICAgICAgY29udGVudCA9IGAke2Z1bmN9KCR7Y29udGVudH0pYDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgbGV0IHdhdGNoZXJzID0gT2JqZWN0LmtleXMoc2NvcGUud2F0Y2hlcnMpO1xuXG4gICAgICAgICAgICBpZiAod2F0Y2hlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgbGV0IHByb3h5ID0gdGhpcy5lbnYucmVzb2x2ZUNvbXBvbmVudCgnVmFsdWVQcm94eScpLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMgPSB3YXRjaGVycy5tYXAocGF0aCA9PiBzY29wZS53YXRjaGVyc1twYXRoXSksXG4gICAgICAgICAgICAgICAgICAgIGJvZHk7XG5cbiAgICAgICAgICAgICAgICBpZiAod2F0Y2hlcnMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgYXJnID0gdGhpcy5lbnYudGVtcFZhcigpO1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gcGFyYW1zLm1hcCgocGFyYW0sIGluZGV4KSA9PiBgJHtwYXJhbX09JHthcmd9WyR7aW5kZXh9XWApO1xuXG4gICAgICAgICAgICAgICAgICAgIGJvZHkgPSBgJHtwcm94eX0uYWxsKFske3dhdGNoZXJzLmpvaW4oJywgJyl9XSkucGlwZShmdW5jdGlvbigke2FyZ30pe3ZhciAke3Jlc3VsdC5qb2luKCcsICcpfTtyZXR1cm4gJHtjb250ZW50fX0pYDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBib2R5ID0gYCR7d2F0Y2hlcnNbMF19LnBpcGUoZnVuY3Rpb24oJHtwYXJhbXNbMF19KXtyZXR1cm4gJHtjb250ZW50fX0pYDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICByZXR1cm4gYm9keTtcbiAgICAgICAgICAgICAgICByZXR1cm4gYChmdW5jdGlvbigke3BhcmFtcy5qb2luKCcsICcpfSl7cmV0dXJuICR7Ym9keX19KSgke3dhdGNoZXJzLmpvaW4oJywnKX0pYDtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7Y29udGVudH1gO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9W119IG5vZGVzXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVTdHJpbmdQcm94eX1cbiAgICAgKi9cbiAgICBzdGF0aWMgZmFjdG9yeShub2RlcywgZW52KSB7XG4gICAgICAgIHJldHVybiBuZXcgVGVtcGxhdGVOb2RlU3RyaW5nUHJveHkoZW52LmZhY3RvcnlDb250ZW50KG5vZGVzKSwgZW52KTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 209 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeComment = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeComment = exports.TemplateNodeComment = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeComment, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeComment(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeComment);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeComment}
	     */
	
	
	    TemplateNodeComment.factory = function factory(node, env) {
	        return new TemplateNodeComment(node, env);
	    };
	
	    return TemplateNodeComment;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVDb21tZW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSxtQixXQUFBLG1COzs7QUFFVDs7OztBQUlBLGlDQUFZLElBQVosRUFBa0IsR0FBbEIsRUFBdUI7QUFBQTs7QUFBQSxtRUFDbkIseUJBQU0sR0FBTixDQURtQjs7QUFHbkIsZUFBTyxNQUFQLFFBQW9CLElBQXBCO0FBSG1CO0FBSXRCOztBQUVEOzs7Ozs7Ozt3QkFNTyxPLG9CQUFRLEksRUFBTSxHLEVBQUs7QUFDdEIsZUFBTyxJQUFJLG1CQUFKLENBQXdCLElBQXhCLEVBQThCLEdBQTlCLENBQVA7QUFDSCxLIiwiZmlsZSI6IlRlbXBsYXRlTm9kZUNvbW1lbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlQ29tbWVudCBleHRlbmRzIFRlbXBsYXRlTm9kZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBlbnYpIHtcbiAgICAgICAgc3VwZXIoZW52KTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIG5vZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUNvbW1lbnR9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIHJldHVybiBuZXcgVGVtcGxhdGVOb2RlQ29tbWVudChub2RlLCBlbnYpO1xuICAgIH1cblxufSJdfQ==

/***/ },
/* 210 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeAttribute = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNodeAbstractAttribute = __webpack_require__(211);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeAttribute = exports.TemplateNodeAttribute = function (_TemplateNodeAbstract) {
	  (0, _inherits3.default)(TemplateNodeAttribute, _TemplateNodeAbstract);
	
	  function TemplateNodeAttribute() {
	    (0, _classCallCheck3.default)(this, TemplateNodeAttribute);
	    return (0, _possibleConstructorReturn3.default)(this, _TemplateNodeAbstract.apply(this, arguments));
	  }
	
	  return TemplateNodeAttribute;
	}(_TemplateNodeAbstractAttribute.TemplateNodeAbstractAttribute);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVBdHRyaWJ1dGUuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztJQUVhLHFCLFdBQUEscUIiLCJmaWxlIjoiVGVtcGxhdGVOb2RlQXR0cmlidXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZSc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZU5vZGVBdHRyaWJ1dGUgZXh0ZW5kcyBUZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZSB7XG5cbn0iXX0=

/***/ },
/* 211 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeAbstractAttribute = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	var _TemplateNodeVar = __webpack_require__(212);
	
	var _TemplateNodeCallExpression = __webpack_require__(214);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeAbstractAttribute = exports.TemplateNodeAbstractAttribute = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeAbstractAttribute, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeAbstractAttribute(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeAbstractAttribute);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	
	        if (_this.name.slice(0, 2) == 'on') {
	            _this.event = true;
	            _this.name = _this.name.slice(2);
	        }
	        return _this;
	    }
	
	    /**
	     * @returns {{}}
	     */
	
	
	    TemplateNodeAbstractAttribute.prototype.compileHash = function compileHash() {
	        var _this2 = this;
	
	        return this.env.scope({ isString: true }, function () {
	            var _ref;
	
	            return _ref = {}, _ref[_this2.name] = _this2.value.compile(), _ref;
	        });
	    };
	
	    /**
	     * @returns {{}}
	     */
	
	
	    TemplateNodeAbstractAttribute.prototype.compileEvent = function compileEvent() {
	        if (this.value instanceof _TemplateNodeVar.TemplateNodeVar) {
	            var _ref2;
	
	            return _ref2 = {}, _ref2[this.name] = this.value.compileMethod(), _ref2;
	        } else if (this.value instanceof _TemplateNodeCallExpression.TemplateNodeCallExpression) {
	            var _ref3;
	
	            return _ref3 = {}, _ref3[this.name] = this.value.compile(), _ref3;
	        } else {
	            throw new Error('Event value must be expression');
	        }
	    };
	
	    /**
	     * @returns {boolean}
	     */
	
	
	    TemplateNodeAbstractAttribute.prototype.isEvent = function isEvent() {
	        return Boolean(this.event);
	    };
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeAbstractAttribute}
	     */
	
	
	    TemplateNodeAbstractAttribute.factory = function factory(node, env) {
	        var prepareValue = function prepareValue(value) {
	            if (Array.isArray(value)) {
	                if (value.length === 1) {
	                    value = value[0];
	                } else {
	                    return env.factoryStringProxy(value);
	                }
	            }
	
	            if (typeof value === 'string') {
	                return env.factoryString(value);
	            } else {
	                return env.factory(value);
	            }
	        };
	
	        node.value = prepareValue(node.value);
	
	        return new this(node, env);
	    };
	
	    return TemplateNodeAbstractAttribute;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0lBRWEsNkIsV0FBQSw2Qjs7O0FBRVQ7Ozs7QUFJQSwyQ0FBWSxJQUFaLEVBQWtCLEdBQWxCLEVBQXVCO0FBQUE7O0FBQUEsbUVBQ25CLHlCQUFNLEdBQU4sQ0FEbUI7O0FBR25CLGVBQU8sTUFBUCxRQUFvQixJQUFwQjs7QUFFQSxZQUFJLE1BQUssSUFBTCxDQUFVLEtBQVYsQ0FBZ0IsQ0FBaEIsRUFBbUIsQ0FBbkIsS0FBeUIsSUFBN0IsRUFBbUM7QUFDL0Isa0JBQUssS0FBTCxHQUFhLElBQWI7QUFDQSxrQkFBSyxJQUFMLEdBQVksTUFBSyxJQUFMLENBQVUsS0FBVixDQUFnQixDQUFoQixDQUFaO0FBQ0g7QUFSa0I7QUFTdEI7O0FBRUQ7Ozs7OzRDQUdBLFcsMEJBQWM7QUFBQTs7QUFDVixlQUFPLEtBQUssR0FBTCxDQUFTLEtBQVQsQ0FBZSxFQUFDLFVBQVUsSUFBWCxFQUFmLEVBQWlDLFlBQU07QUFBQTs7QUFDMUMsbUNBQ0ssT0FBSyxJQURWLElBQ2lCLE9BQUssS0FBTCxDQUFXLE9BQVgsRUFEakI7QUFHSCxTQUpNLENBQVA7QUFLSCxLOztBQUVEOzs7Ozs0Q0FHQSxZLDJCQUFlO0FBQ1gsWUFBSSxLQUFLLEtBQUwsNENBQUosRUFBMkM7QUFBQTs7QUFDdkMscUNBQ0ssS0FBSyxJQURWLElBQ2lCLEtBQUssS0FBTCxDQUFXLGFBQVgsRUFEakI7QUFHSCxTQUpELE1BSU8sSUFBSSxLQUFLLEtBQUwsa0VBQUosRUFBc0Q7QUFBQTs7QUFDekQscUNBQ0ssS0FBSyxJQURWLElBQ2lCLEtBQUssS0FBTCxDQUFXLE9BQVgsRUFEakI7QUFHSCxTQUpNLE1BSUE7QUFDSCxrQkFBTSxJQUFJLEtBQUosQ0FBVSxnQ0FBVixDQUFOO0FBQ0g7QUFDSixLOztBQUVEOzs7Ozs0Q0FHQSxPLHNCQUFVO0FBQ04sZUFBTyxRQUFRLEtBQUssS0FBYixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7a0NBTU8sTyxvQkFBUSxJLEVBQU0sRyxFQUFLO0FBQ3RCLFlBQUksZUFBZSxTQUFmLFlBQWUsQ0FBQyxLQUFELEVBQVc7QUFDMUIsZ0JBQUksTUFBTSxPQUFOLENBQWMsS0FBZCxDQUFKLEVBQTBCO0FBQ3RCLG9CQUFJLE1BQU0sTUFBTixLQUFpQixDQUFyQixFQUF3QjtBQUNwQiw0QkFBUSxNQUFNLENBQU4sQ0FBUjtBQUNILGlCQUZELE1BRU87QUFDSCwyQkFBTyxJQUFJLGtCQUFKLENBQXVCLEtBQXZCLENBQVA7QUFDSDtBQUNKOztBQUVELGdCQUFJLE9BQU8sS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUMzQix1QkFBTyxJQUFJLGFBQUosQ0FBa0IsS0FBbEIsQ0FBUDtBQUNILGFBRkQsTUFFTztBQUNILHVCQUFPLElBQUksT0FBSixDQUFZLEtBQVosQ0FBUDtBQUNIO0FBQ0osU0FkRDs7QUFnQkEsYUFBSyxLQUFMLEdBQWEsYUFBYSxLQUFLLEtBQWxCLENBQWI7O0FBRUEsZUFBTyxJQUFJLElBQUosQ0FBUyxJQUFULEVBQWUsR0FBZixDQUFQO0FBQ0gsSyIsImZpbGUiOiJUZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVtcGxhdGVOb2RlfSBmcm9tICcuL1RlbXBsYXRlTm9kZSc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZVZhcn0gZnJvbSAnLi9UZW1wbGF0ZU5vZGVWYXInO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVDYWxsRXhwcmVzc2lvbn0gZnJvbSBcIi4vVGVtcGxhdGVOb2RlQ2FsbEV4cHJlc3Npb25cIjtcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTm9kZUFic3RyYWN0QXR0cmlidXRlIGV4dGVuZHMgVGVtcGxhdGVOb2RlIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5vZGUsIGVudikge1xuICAgICAgICBzdXBlcihlbnYpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgbm9kZSk7XG5cbiAgICAgICAgaWYgKHRoaXMubmFtZS5zbGljZSgwLCAyKSA9PSAnb24nKSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmFtZSA9IHRoaXMubmFtZS5zbGljZSgyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICBjb21waWxlSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW52LnNjb3BlKHtpc1N0cmluZzogdHJ1ZX0sICgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgW3RoaXMubmFtZV06IHRoaXMudmFsdWUuY29tcGlsZSgpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7e319XG4gICAgICovXG4gICAgY29tcGlsZUV2ZW50KCkge1xuICAgICAgICBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlTm9kZVZhcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBbdGhpcy5uYW1lXTogdGhpcy52YWx1ZS5jb21waWxlTWV0aG9kKClcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy52YWx1ZSBpbnN0YW5jZW9mIFRlbXBsYXRlTm9kZUNhbGxFeHByZXNzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIFt0aGlzLm5hbWVdOiB0aGlzLnZhbHVlLmNvbXBpbGUoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXZlbnQgdmFsdWUgbXVzdCBiZSBleHByZXNzaW9uJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0V2ZW50KCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmV2ZW50KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZX1cbiAgICAgKi9cbiAgICBzdGF0aWMgZmFjdG9yeShub2RlLCBlbnYpIHtcbiAgICAgICAgbGV0IHByZXBhcmVWYWx1ZSA9ICh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlWzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnYuZmFjdG9yeVN0cmluZ1Byb3h5KHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudi5mYWN0b3J5U3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVudi5mYWN0b3J5KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBub2RlLnZhbHVlID0gcHJlcGFyZVZhbHVlKG5vZGUudmFsdWUpO1xuXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhub2RlLCBlbnYpO1xuICAgIH1cblxufVxuIl19

/***/ },
/* 212 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeVar = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	var _TemplateNodePath = __webpack_require__(213);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeVar = exports.TemplateNodeVar = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeVar, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeVar(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeVar);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeVar.prototype.compile = function compile() {
	        return this.path.compile();
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeVar.prototype.compileMethod = function compileMethod() {
	        return this.path.compileMethod();
	    };
	
	    /**
	     * @returns {boolean}
	     */
	
	
	    TemplateNodeVar.prototype.isWatch = function isWatch() {
	        return this.path.isWatch();
	    };
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeVar}
	     */
	
	
	    TemplateNodeVar.factory = function factory(node, env) {
	        return new TemplateNodeVar(node, env);
	    };
	
	    /**
	     * @param {string} string
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeVar}
	     */
	
	
	    TemplateNodeVar.factoryFromString = function factoryFromString(string, env) {
	        return new TemplateNodeVar({ path: _TemplateNodePath.TemplateNodePath.factory(string, env) }, env);
	    };
	
	    return TemplateNodeVar;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVWYXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7OztJQUVhLGUsV0FBQSxlOzs7QUFFVDs7OztBQUlBLDZCQUFZLElBQVosRUFBa0IsR0FBbEIsRUFBdUI7QUFBQTs7QUFBQSxtRUFDbkIseUJBQU0sR0FBTixDQURtQjs7QUFHbkIsZUFBTyxNQUFQLFFBQW9CLElBQXBCO0FBSG1CO0FBSXRCOztBQUVEOzs7Ozs4QkFHQSxPLHNCQUFVO0FBQ04sZUFBTyxLQUFLLElBQUwsQ0FBVSxPQUFWLEVBQVA7QUFDSCxLOztBQUVEOzs7Ozs4QkFHQSxhLDRCQUFnQjtBQUNaLGVBQU8sS0FBSyxJQUFMLENBQVUsYUFBVixFQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7OEJBR0EsTyxzQkFBVTtBQUNOLGVBQU8sS0FBSyxJQUFMLENBQVUsT0FBVixFQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7b0JBTU8sTyxvQkFBUSxJLEVBQU0sRyxFQUFLO0FBQ3RCLGVBQU8sSUFBSSxlQUFKLENBQW9CLElBQXBCLEVBQTBCLEdBQTFCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7OztvQkFNTyxpQiw4QkFBa0IsTSxFQUFRLEcsRUFBSztBQUNsQyxlQUFPLElBQUksZUFBSixDQUFvQixFQUFDLE1BQU0sbUNBQWlCLE9BQWpCLENBQXlCLE1BQXpCLEVBQWlDLEdBQWpDLENBQVAsRUFBcEIsRUFBbUUsR0FBbkUsQ0FBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlVmFyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZW1wbGF0ZU5vZGV9IGZyb20gJy4vVGVtcGxhdGVOb2RlJztcbmltcG9ydCB7VGVtcGxhdGVOb2RlUGF0aH0gZnJvbSAnLi9UZW1wbGF0ZU5vZGVQYXRoJztcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTm9kZVZhciBleHRlbmRzIFRlbXBsYXRlTm9kZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub2RlLCBlbnYpIHtcbiAgICAgICAgc3VwZXIoZW52KTtcblxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIG5vZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgY29tcGlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5jb21waWxlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBjb21waWxlTWV0aG9kKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmNvbXBpbGVNZXRob2QoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc1dhdGNoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wYXRoLmlzV2F0Y2goKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVWYXJ9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIHJldHVybiBuZXcgVGVtcGxhdGVOb2RlVmFyKG5vZGUsIGVudik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVFbnZpcm9ubWVudH0gZW52XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlVmFyfVxuICAgICAqL1xuICAgIHN0YXRpYyBmYWN0b3J5RnJvbVN0cmluZyhzdHJpbmcsIGVudikge1xuICAgICAgICByZXR1cm4gbmV3IFRlbXBsYXRlTm9kZVZhcih7cGF0aDogVGVtcGxhdGVOb2RlUGF0aC5mYWN0b3J5KHN0cmluZywgZW52KX0sIGVudilcbiAgICB9XG5cbn0iXX0=

/***/ },
/* 213 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodePath = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodePath = exports.TemplateNodePath = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodePath, _TemplateNode);
	
	    /**
	     * @param {string} string
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodePath(string, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodePath);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        _this.original = string;
	
	        if (string[0] === '@') {
	            _this.watch = true;
	            _this.string = string.slice(1);
	        } else {
	            _this.watch = false;
	            _this.string = string;
	        }
	
	        _this.level = 0;
	        _this.parts = _this.string.split('.');
	
	        while (_this.parts[0] === 'this' && _this.parts.length) {
	            _this.parts.shift();
	        }
	
	        _this.string = _this.parts.join('.');
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodePath.prototype.compile = function compile() {
	        if (this.isWatch()) {
	            return this.compileProxy();
	        } else {
	            return this.compileVariable();
	        }
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodePath.prototype.compileVariable = function compileVariable() {
	        var _this2 = this;
	
	        var result = '';
	
	        this.getParts().forEach(function (part) {
	            if (part.match(/^[a-z0-9_]+$/i) && !part.match(/^[0-9]+$/)) {
	                if (result) {
	                    result += '.';
	                }
	
	                result += part;
	            } else {
	                if (!result) {
	                    console.error(_this2);
	                    throw new Error('Cannot compile path');
	                }
	
	                result += '[' + JSON.stringify(part) + ']';
	            }
	        });
	
	        return result;
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodePath.prototype.compileProxy = function compileProxy() {
	        var _getParts = this.getParts();
	
	        var context = _getParts[0];
	
	        var parts = _getParts.slice(1);
	
	        var path = parts.map(function (part) {
	            return 'proxy(' + JSON.stringify(part) + ')';
	        });
	
	        path.unshift(context);
	
	        return this.env.watcher(path.join('.'));
	    };
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodePath.prototype.compileMethod = function compileMethod() {
	        var params = arguments.length <= 0 || arguments[0] === undefined ? [] : arguments[0];
	
	        if (this.isWatch()) {
	            var temp = this.env.tempVar();
	
	            return '(function(' + temp + '){return ' + temp + '.emitValue.bind(' + temp + ')})(' + this.compileProxy() + ')';
	        }
	
	        var parts = this.getParts(),
	            method = parts.pop(),
	            context = parts.join('.');
	
	        var bind = [context];
	
	        params.forEach(function (param) {
	            return bind.push(param.compile());
	        });
	
	        return context + '.' + method + '.bind(' + bind.join(',') + ')';
	    };
	
	    /**
	     * @returns {string[]}
	     */
	
	
	    TemplateNodePath.prototype.getParts = function getParts() {
	        var context = 'context',
	            parts = this.parts.slice();
	
	        if (this.level) {
	            var contexts = this.env.filterScopes('context').map(function (scope) {
	                return scope.context;
	            });
	
	            if (contexts.length < this.level) {
	                throw new Error('Cannot resolve path "' + this.original + '"');
	            }
	
	            context = contexts[contexts.length - this.level];
	        } else {
	            var scopes = this.env.filterScopes('scope').map(function (scope) {
	                return scope.scope;
	            }),
	                index = scopes.indexOf(parts[0]);
	
	            if (index > -1) {
	                context = parts.shift();
	            }
	        }
	
	        return [context].concat(parts);
	    };
	
	    /**
	     * @returns {boolean}
	     */
	
	
	    TemplateNodePath.prototype.isWatch = function isWatch() {
	        return this.watch;
	    };
	
	    /**
	     * @param {string} string
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodePath}
	     */
	
	
	    TemplateNodePath.factory = function factory(string, env) {
	        return new TemplateNodePath(string, env);
	    };
	
	    return TemplateNodePath;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 214 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeCallExpression = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeCallExpression = exports.TemplateNodeCallExpression = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeCallExpression, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeCallExpression(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeCallExpression);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeCallExpression.prototype.compile = function compile() {
	        return this.path.compileMethod(this.params);
	    };
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     * 
	     * @returns {TemplateNodeCallExpression}
	     */
	
	
	    TemplateNodeCallExpression.factory = function factory(node, env) {
	        node.path = env.factoryPath(node.path);
	        node.params = node.params.map(function (param) {
	            return env.factory(param);
	        });
	
	        return new this(node, env);
	    };
	
	    return TemplateNodeCallExpression;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVDYWxsRXhwcmVzc2lvbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0lBRWEsMEIsV0FBQSwwQjs7O0FBRVQ7Ozs7QUFJQSx3Q0FBWSxJQUFaLEVBQWtCLEdBQWxCLEVBQXVCO0FBQUE7O0FBQUEsbUVBQ25CLHlCQUFNLEdBQU4sQ0FEbUI7O0FBR25CLGVBQU8sTUFBUCxRQUFvQixJQUFwQjtBQUhtQjtBQUl0Qjs7QUFFRDs7Ozs7eUNBR0EsTyxzQkFBVTtBQUNOLGVBQU8sS0FBSyxJQUFMLENBQVUsYUFBVixDQUF3QixLQUFLLE1BQTdCLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7OzsrQkFNTyxPLG9CQUFRLEksRUFBTSxHLEVBQUs7QUFDdEIsYUFBSyxJQUFMLEdBQVksSUFBSSxXQUFKLENBQWdCLEtBQUssSUFBckIsQ0FBWjtBQUNBLGFBQUssTUFBTCxHQUFjLEtBQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0I7QUFBQSxtQkFBUyxJQUFJLE9BQUosQ0FBWSxLQUFaLENBQVQ7QUFBQSxTQUFoQixDQUFkOztBQUVBLGVBQU8sSUFBSSxJQUFKLENBQVMsSUFBVCxFQUFlLEdBQWYsQ0FBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlQ2FsbEV4cHJlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlQ2FsbEV4cHJlc3Npb24gZXh0ZW5kcyBUZW1wbGF0ZU5vZGUge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fX0gbm9kZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVFbnZpcm9ubWVudH0gZW52XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobm9kZSwgZW52KSB7XG4gICAgICAgIHN1cGVyKGVudik7XG4gICAgICAgIFxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIG5vZGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAgICovXG4gICAgY29tcGlsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF0aC5jb21waWxlTWV0aG9kKHRoaXMucGFyYW1zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlQ2FsbEV4cHJlc3Npb259XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIG5vZGUucGF0aCA9IGVudi5mYWN0b3J5UGF0aChub2RlLnBhdGgpO1xuICAgICAgICBub2RlLnBhcmFtcyA9IG5vZGUucGFyYW1zLm1hcChwYXJhbSA9PiBlbnYuZmFjdG9yeShwYXJhbSkpO1xuXG4gICAgICAgIHJldHVybiBuZXcgdGhpcyhub2RlLCBlbnYpO1xuICAgIH1cbiAgICBcbn0iXX0=

/***/ },
/* 215 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeExpression = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _TemplateNodeVar = __webpack_require__(212);
	
	var _TemplateNodeHelper = __webpack_require__(216);
	
	var _TemplateNodeBlockHelper = __webpack_require__(217);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeExpression = exports.TemplateNodeExpression = function () {
	    function TemplateNodeExpression() {
	        (0, _classCallCheck3.default)(this, TemplateNodeExpression);
	    }
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeVar}
	     */
	    TemplateNodeExpression.factory = function factory(node, env) {
	        var convert = {
	            path: env.factoryPath(node.path),
	            params: node.params || [],
	            hash: node.hash || [],
	            content: node.content,
	            inverse: node.inverse
	        };
	
	        if (convert.hash.length || convert.params.length || convert.content || convert.inverse) {
	            if (convert.content || convert.inverse) {
	                return _TemplateNodeBlockHelper.TemplateNodeBlockHelper.factory(convert, env);
	            } else {
	                return _TemplateNodeHelper.TemplateNodeHelper.factory(convert, env);
	            }
	        }
	
	        return _TemplateNodeVar.TemplateNodeVar.factory(convert, env);
	    };
	
	    return TemplateNodeExpression;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVFeHByZXNzaW9uLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7O0lBRWEsc0IsV0FBQSxzQjs7Ozs7QUFFVDs7Ozs7OzJCQU1PLE8sb0JBQVEsSSxFQUFNLEcsRUFBSztBQUN0QixZQUFJLFVBQVU7QUFDVixrQkFBTSxJQUFJLFdBQUosQ0FBZ0IsS0FBSyxJQUFyQixDQURJO0FBRVYsb0JBQVEsS0FBSyxNQUFMLElBQWUsRUFGYjtBQUdWLGtCQUFNLEtBQUssSUFBTCxJQUFhLEVBSFQ7QUFJVixxQkFBUyxLQUFLLE9BSko7QUFLVixxQkFBUyxLQUFLO0FBTEosU0FBZDs7QUFRQSxZQUFJLFFBQVEsSUFBUixDQUFhLE1BQWIsSUFBdUIsUUFBUSxNQUFSLENBQWUsTUFBdEMsSUFBZ0QsUUFBUSxPQUF4RCxJQUFtRSxRQUFRLE9BQS9FLEVBQXdGO0FBQ3BGLGdCQUFJLFFBQVEsT0FBUixJQUFtQixRQUFRLE9BQS9CLEVBQXdDO0FBQ3BDLHVCQUFPLGlEQUF3QixPQUF4QixDQUFnQyxPQUFoQyxFQUF5QyxHQUF6QyxDQUFQO0FBQ0gsYUFGRCxNQUVNO0FBQ0YsdUJBQU8sdUNBQW1CLE9BQW5CLENBQTJCLE9BQTNCLEVBQW9DLEdBQXBDLENBQVA7QUFDSDtBQUNKOztBQUVELGVBQU8saUNBQWdCLE9BQWhCLENBQXdCLE9BQXhCLEVBQWlDLEdBQWpDLENBQVA7QUFDSCxLIiwiZmlsZSI6IlRlbXBsYXRlTm9kZUV4cHJlc3Npb24uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZVZhcn0gZnJvbSAnLi9UZW1wbGF0ZU5vZGVWYXInO1xuaW1wb3J0IHtUZW1wbGF0ZU5vZGVIZWxwZXJ9IGZyb20gJy4vVGVtcGxhdGVOb2RlSGVscGVyJztcbmltcG9ydCB7VGVtcGxhdGVOb2RlQmxvY2tIZWxwZXJ9IGZyb20gJy4vVGVtcGxhdGVOb2RlQmxvY2tIZWxwZXInO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlRXhwcmVzc2lvbiB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVWYXJ9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIGxldCBjb252ZXJ0ID0ge1xuICAgICAgICAgICAgcGF0aDogZW52LmZhY3RvcnlQYXRoKG5vZGUucGF0aCksXG4gICAgICAgICAgICBwYXJhbXM6IG5vZGUucGFyYW1zIHx8IFtdLFxuICAgICAgICAgICAgaGFzaDogbm9kZS5oYXNoIHx8IFtdLFxuICAgICAgICAgICAgY29udGVudDogbm9kZS5jb250ZW50LFxuICAgICAgICAgICAgaW52ZXJzZTogbm9kZS5pbnZlcnNlXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGNvbnZlcnQuaGFzaC5sZW5ndGggfHwgY29udmVydC5wYXJhbXMubGVuZ3RoIHx8IGNvbnZlcnQuY29udGVudCB8fCBjb252ZXJ0LmludmVyc2UpIHtcbiAgICAgICAgICAgIGlmIChjb252ZXJ0LmNvbnRlbnQgfHwgY29udmVydC5pbnZlcnNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFRlbXBsYXRlTm9kZUJsb2NrSGVscGVyLmZhY3RvcnkoY29udmVydCwgZW52KTtcbiAgICAgICAgICAgIH0gZWxzZXtcbiAgICAgICAgICAgICAgICByZXR1cm4gVGVtcGxhdGVOb2RlSGVscGVyLmZhY3RvcnkoY29udmVydCwgZW52KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBUZW1wbGF0ZU5vZGVWYXIuZmFjdG9yeShjb252ZXJ0LCBlbnYpO1xuICAgIH1cblxufSJdfQ==

/***/ },
/* 216 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeHelper = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNodeVar2 = __webpack_require__(212);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeHelper = exports.TemplateNodeHelper = function (_TemplateNodeVar) {
	    (0, _inherits3.default)(TemplateNodeHelper, _TemplateNodeVar);
	
	    function TemplateNodeHelper() {
	        (0, _classCallCheck3.default)(this, TemplateNodeHelper);
	        return (0, _possibleConstructorReturn3.default)(this, _TemplateNodeVar.apply(this, arguments));
	    }
	
	    /**
	     * @returns {string}
	     */
	    TemplateNodeHelper.prototype.compile = function compile() {
	        var helperName = this.env.resolveHelper(this.path.string),
	            args = ['context'],
	            context = this.hash.getContext();
	
	        args = args.concat(this.compileArgs());
	
	        args.push(this.env.compileHash(this.compileOptions()));
	
	        return '' + (context ? context.compile() + '=' : '') + helperName + '.call(' + args.join(',') + ')';
	    };
	
	    /**
	     * @returns {{watchers: {}}}
	     */
	
	
	    TemplateNodeHelper.prototype.compileArgs = function compileArgs() {
	        var _this2 = this;
	
	        return this.env.scope({ isString: true }, function () {
	            return _this2.params.map(function (param) {
	                return param.compile();
	            });
	        });
	    };
	
	    /**
	     * @returns {{hash: string}}
	     */
	
	
	    TemplateNodeHelper.prototype.compileOptions = function compileOptions() {
	        var hash = {
	            hash: this.env.compileHash(this.hash.compileHash())
	        };
	
	        if (this.env.scopeValue('isString')) {
	            hash.isString = true;
	        }
	
	        return hash;
	    };
	
	    /**
	     * @param {{params: [], hash: []}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeHelper}
	     */
	
	
	    TemplateNodeHelper.factory = function factory(node, env) {
	        node.params = node.params.map(function (param) {
	            return env.factory(param || []);
	        });
	        node.hash = env.factoryHashAttributes(node.hash || []);
	
	        return new TemplateNodeHelper(node, env);
	    };
	
	    return TemplateNodeHelper;
	}(_TemplateNodeVar2.TemplateNodeVar);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVIZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7OztJQUVhLGtCLFdBQUEsa0I7Ozs7Ozs7O0FBRVQ7OztpQ0FHQSxPLHNCQUFVO0FBQ04sWUFBSSxhQUFhLEtBQUssR0FBTCxDQUFTLGFBQVQsQ0FBdUIsS0FBSyxJQUFMLENBQVUsTUFBakMsQ0FBakI7QUFBQSxZQUNJLE9BQU8sQ0FBQyxTQUFELENBRFg7QUFBQSxZQUVJLFVBQVUsS0FBSyxJQUFMLENBQVUsVUFBVixFQUZkOztBQUlBLGVBQU8sS0FBSyxNQUFMLENBQVksS0FBSyxXQUFMLEVBQVosQ0FBUDs7QUFFQSxhQUFLLElBQUwsQ0FBVSxLQUFLLEdBQUwsQ0FBUyxXQUFULENBQXFCLEtBQUssY0FBTCxFQUFyQixDQUFWOztBQUVBLHFCQUFVLFVBQVUsUUFBUSxPQUFSLEtBQW9CLEdBQTlCLEdBQW9DLEVBQTlDLElBQW1ELFVBQW5ELGNBQXNFLEtBQUssSUFBTCxDQUFVLEdBQVYsQ0FBdEU7QUFDSCxLOztBQUVEOzs7OztpQ0FHQSxXLDBCQUFjO0FBQUE7O0FBQ1YsZUFBTyxLQUFLLEdBQUwsQ0FBUyxLQUFULENBQWUsRUFBQyxVQUFVLElBQVgsRUFBZixFQUFpQyxZQUFNO0FBQzFDLG1CQUFPLE9BQUssTUFBTCxDQUFZLEdBQVosQ0FBZ0I7QUFBQSx1QkFBUyxNQUFNLE9BQU4sRUFBVDtBQUFBLGFBQWhCLENBQVA7QUFDSCxTQUZNLENBQVA7QUFHSCxLOztBQUVEOzs7OztpQ0FHQSxjLDZCQUFpQjtBQUNiLFlBQUksT0FBTztBQUNQLGtCQUFNLEtBQUssR0FBTCxDQUFTLFdBQVQsQ0FBcUIsS0FBSyxJQUFMLENBQVUsV0FBVixFQUFyQjtBQURDLFNBQVg7O0FBSUEsWUFBSSxLQUFLLEdBQUwsQ0FBUyxVQUFULENBQW9CLFVBQXBCLENBQUosRUFBcUM7QUFDakMsaUJBQUssUUFBTCxHQUFnQixJQUFoQjtBQUNIOztBQUVELGVBQU8sSUFBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7O3VCQU1PLE8sb0JBQVEsSSxFQUFNLEcsRUFBSztBQUN0QixhQUFLLE1BQUwsR0FBYyxLQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCO0FBQUEsbUJBQVMsSUFBSSxPQUFKLENBQVksU0FBUyxFQUFyQixDQUFUO0FBQUEsU0FBaEIsQ0FBZDtBQUNBLGFBQUssSUFBTCxHQUFZLElBQUkscUJBQUosQ0FBMEIsS0FBSyxJQUFMLElBQWEsRUFBdkMsQ0FBWjs7QUFFQSxlQUFPLElBQUksa0JBQUosQ0FBdUIsSUFBdkIsRUFBNkIsR0FBN0IsQ0FBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZW1wbGF0ZU5vZGVWYXJ9IGZyb20gJy4vVGVtcGxhdGVOb2RlVmFyJztcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTm9kZUhlbHBlciBleHRlbmRzIFRlbXBsYXRlTm9kZVZhciB7XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbXBpbGUoKSB7XG4gICAgICAgIGxldCBoZWxwZXJOYW1lID0gdGhpcy5lbnYucmVzb2x2ZUhlbHBlcih0aGlzLnBhdGguc3RyaW5nKSxcbiAgICAgICAgICAgIGFyZ3MgPSBbJ2NvbnRleHQnXSxcbiAgICAgICAgICAgIGNvbnRleHQgPSB0aGlzLmhhc2guZ2V0Q29udGV4dCgpO1xuXG4gICAgICAgIGFyZ3MgPSBhcmdzLmNvbmNhdCh0aGlzLmNvbXBpbGVBcmdzKCkpO1xuXG4gICAgICAgIGFyZ3MucHVzaCh0aGlzLmVudi5jb21waWxlSGFzaCh0aGlzLmNvbXBpbGVPcHRpb25zKCkpKTtcblxuICAgICAgICByZXR1cm4gYCR7Y29udGV4dCA/IGNvbnRleHQuY29tcGlsZSgpICsgJz0nIDogJyd9JHtoZWxwZXJOYW1lfS5jYWxsKCR7YXJncy5qb2luKCcsJyl9KWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3t3YXRjaGVyczoge319fVxuICAgICAqL1xuICAgIGNvbXBpbGVBcmdzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lbnYuc2NvcGUoe2lzU3RyaW5nOiB0cnVlfSwgKCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyYW1zLm1hcChwYXJhbSA9PiBwYXJhbS5jb21waWxlKCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7e2hhc2g6IHN0cmluZ319XG4gICAgICovXG4gICAgY29tcGlsZU9wdGlvbnMoKSB7XG4gICAgICAgIHZhciBoYXNoID0ge1xuICAgICAgICAgICAgaGFzaDogdGhpcy5lbnYuY29tcGlsZUhhc2godGhpcy5oYXNoLmNvbXBpbGVIYXNoKCkpXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKHRoaXMuZW52LnNjb3BlVmFsdWUoJ2lzU3RyaW5nJykpIHtcbiAgICAgICAgICAgIGhhc2guaXNTdHJpbmcgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7cGFyYW1zOiBbXSwgaGFzaDogW119fSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVIZWxwZXJ9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIG5vZGUucGFyYW1zID0gbm9kZS5wYXJhbXMubWFwKHBhcmFtID0+IGVudi5mYWN0b3J5KHBhcmFtIHx8IFtdKSk7XG4gICAgICAgIG5vZGUuaGFzaCA9IGVudi5mYWN0b3J5SGFzaEF0dHJpYnV0ZXMobm9kZS5oYXNoIHx8IFtdKTtcblxuICAgICAgICByZXR1cm4gbmV3IFRlbXBsYXRlTm9kZUhlbHBlcihub2RlLCBlbnYpO1xuICAgIH1cblxufVxuIl19

/***/ },
/* 217 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeBlockHelper = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNodeHelper2 = __webpack_require__(216);
	
	var _TemplateNodeString = __webpack_require__(204);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeBlockHelper = exports.TemplateNodeBlockHelper = function (_TemplateNodeHelper) {
	    (0, _inherits3.default)(TemplateNodeBlockHelper, _TemplateNodeHelper);
	
	    function TemplateNodeBlockHelper() {
	        (0, _classCallCheck3.default)(this, TemplateNodeBlockHelper);
	        return (0, _possibleConstructorReturn3.default)(this, _TemplateNodeHelper.apply(this, arguments));
	    }
	
	    /**
	     * @returns {{hash: string}}
	     */
	    TemplateNodeBlockHelper.prototype.compileOptions = function compileOptions() {
	        var options = _TemplateNodeHelper.prototype.compileOptions.call(this),
	            scope = this.hash.getScope();
	
	        if (scope) {
	            if (scope instanceof _TemplateNodeString.TemplateNodeString) {
	                scope = scope.string;
	            } else {
	                console.log(scope);
	                throw new Error('Scope must be string');
	            }
	        }
	
	        if (this.content) {
	            options.content = this._compileContent(scope, this.content);
	        }
	
	        if (this.inverse) {
	            options.inverse = this._compileContent(scope, this.inverse);
	        }
	
	        return options;
	    };
	
	    /**
	     * @param {string|null} scope
	     * @param {TemplateNode} content
	     * 
	     * @returns {string}
	     * @private
	     */
	
	
	    TemplateNodeBlockHelper.prototype._compileContent = function _compileContent(scope, content) {
	        if (scope) {
	            return this.env.scope({ scope: scope }, function () {
	                return 'function(' + scope + '){return ' + content.compile() + '}';
	            });
	        } else {
	            return 'function(){return ' + content.compile() + '}';
	        }
	    };
	
	    /**
	     * @param {{params: [], hash: []}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeBlockHelper}
	     */
	
	
	    TemplateNodeBlockHelper.factory = function factory(node, env) {
	        node.params = (node.params || []).map(function (param) {
	            return env.factory(param || []);
	        });
	        node.hash = env.factoryHashAttributes(node.hash || []);
	        node.content = node.content && env.factoryContent(node.content);
	        node.inverse = node.inverse && env.factoryContent(node.inverse);
	
	        return new TemplateNodeBlockHelper(node, env);
	    };
	
	    return TemplateNodeBlockHelper;
	}(_TemplateNodeHelper2.TemplateNodeHelper);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVCbG9ja0hlbHBlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUNBOzs7O0lBRWEsdUIsV0FBQSx1Qjs7Ozs7Ozs7QUFFVDs7O3NDQUdBLGMsNkJBQWlCO0FBQ2IsWUFBSSxVQUFVLDhCQUFNLGNBQU4sV0FBZDtBQUFBLFlBQ0ksUUFBUSxLQUFLLElBQUwsQ0FBVSxRQUFWLEVBRFo7O0FBR0EsWUFBSSxLQUFKLEVBQVc7QUFDUCxnQkFBSSx1REFBSixFQUF5QztBQUNyQyx3QkFBUSxNQUFNLE1BQWQ7QUFDSCxhQUZELE1BRU87QUFDSCx3QkFBUSxHQUFSLENBQVksS0FBWjtBQUNBLHNCQUFNLElBQUksS0FBSixDQUFVLHNCQUFWLENBQU47QUFDSDtBQUNKOztBQUVELFlBQUksS0FBSyxPQUFULEVBQWtCO0FBQ2Qsb0JBQVEsT0FBUixHQUFrQixLQUFLLGVBQUwsQ0FBcUIsS0FBckIsRUFBNEIsS0FBSyxPQUFqQyxDQUFsQjtBQUNIOztBQUVELFlBQUksS0FBSyxPQUFULEVBQWtCO0FBQ2Qsb0JBQVEsT0FBUixHQUFrQixLQUFLLGVBQUwsQ0FBcUIsS0FBckIsRUFBNEIsS0FBSyxPQUFqQyxDQUFsQjtBQUNIOztBQUVELGVBQU8sT0FBUDtBQUNILEs7O0FBRUQ7Ozs7Ozs7OztzQ0FPQSxlLDRCQUFnQixLLEVBQU8sTyxFQUFTO0FBQzVCLFlBQUksS0FBSixFQUFXO0FBQ1AsbUJBQU8sS0FBSyxHQUFMLENBQVMsS0FBVCxDQUFlLEVBQUMsWUFBRCxFQUFmLEVBQXdCLFlBQU07QUFDakMscUNBQW1CLEtBQW5CLGlCQUFvQyxRQUFRLE9BQVIsRUFBcEM7QUFDSCxhQUZNLENBQVA7QUFHSCxTQUpELE1BSU87QUFDSCwwQ0FBNEIsUUFBUSxPQUFSLEVBQTVCO0FBQ0g7QUFDSixLOztBQUVEOzs7Ozs7Ozs0QkFNTyxPLG9CQUFRLEksRUFBTSxHLEVBQUs7QUFDdEIsYUFBSyxNQUFMLEdBQWMsQ0FBQyxLQUFLLE1BQUwsSUFBZSxFQUFoQixFQUFvQixHQUFwQixDQUF3QjtBQUFBLG1CQUFTLElBQUksT0FBSixDQUFZLFNBQVMsRUFBckIsQ0FBVDtBQUFBLFNBQXhCLENBQWQ7QUFDQSxhQUFLLElBQUwsR0FBWSxJQUFJLHFCQUFKLENBQTBCLEtBQUssSUFBTCxJQUFhLEVBQXZDLENBQVo7QUFDQSxhQUFLLE9BQUwsR0FBZSxLQUFLLE9BQUwsSUFBZ0IsSUFBSSxjQUFKLENBQW1CLEtBQUssT0FBeEIsQ0FBL0I7QUFDQSxhQUFLLE9BQUwsR0FBZSxLQUFLLE9BQUwsSUFBZ0IsSUFBSSxjQUFKLENBQW1CLEtBQUssT0FBeEIsQ0FBL0I7O0FBRUEsZUFBTyxJQUFJLHVCQUFKLENBQTRCLElBQTVCLEVBQWtDLEdBQWxDLENBQVA7QUFDSCxLIiwiZmlsZSI6IlRlbXBsYXRlTm9kZUJsb2NrSGVscGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZW1wbGF0ZU5vZGVIZWxwZXJ9IGZyb20gJy4vVGVtcGxhdGVOb2RlSGVscGVyJztcbmltcG9ydCB7VGVtcGxhdGVOb2RlU3RyaW5nfSBmcm9tIFwiLi9UZW1wbGF0ZU5vZGVTdHJpbmdcIjtcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTm9kZUJsb2NrSGVscGVyIGV4dGVuZHMgVGVtcGxhdGVOb2RlSGVscGVyIHtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt7aGFzaDogc3RyaW5nfX1cbiAgICAgKi9cbiAgICBjb21waWxlT3B0aW9ucygpIHtcbiAgICAgICAgbGV0IG9wdGlvbnMgPSBzdXBlci5jb21waWxlT3B0aW9ucygpLFxuICAgICAgICAgICAgc2NvcGUgPSB0aGlzLmhhc2guZ2V0U2NvcGUoKTtcblxuICAgICAgICBpZiAoc2NvcGUpIHtcbiAgICAgICAgICAgIGlmIChzY29wZSBpbnN0YW5jZW9mIFRlbXBsYXRlTm9kZVN0cmluZykge1xuICAgICAgICAgICAgICAgIHNjb3BlID0gc2NvcGUuc3RyaW5nO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhzY29wZSk7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTY29wZSBtdXN0IGJlIHN0cmluZycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgb3B0aW9ucy5jb250ZW50ID0gdGhpcy5fY29tcGlsZUNvbnRlbnQoc2NvcGUsIHRoaXMuY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbnZlcnNlKSB7XG4gICAgICAgICAgICBvcHRpb25zLmludmVyc2UgPSB0aGlzLl9jb21waWxlQ29udGVudChzY29wZSwgdGhpcy5pbnZlcnNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfG51bGx9IHNjb3BlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGV9IGNvbnRlbnRcbiAgICAgKiBcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2NvbXBpbGVDb250ZW50KHNjb3BlLCBjb250ZW50KSB7XG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW52LnNjb3BlKHtzY29wZX0sICgpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYGZ1bmN0aW9uKCR7c2NvcGV9KXtyZXR1cm4gJHtjb250ZW50LmNvbXBpbGUoKX19YFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gYGZ1bmN0aW9uKCl7cmV0dXJuICR7Y29udGVudC5jb21waWxlKCl9fWA7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3twYXJhbXM6IFtdLCBoYXNoOiBbXX19IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUJsb2NrSGVscGVyfVxuICAgICAqL1xuICAgIHN0YXRpYyBmYWN0b3J5KG5vZGUsIGVudikge1xuICAgICAgICBub2RlLnBhcmFtcyA9IChub2RlLnBhcmFtcyB8fCBbXSkubWFwKHBhcmFtID0+IGVudi5mYWN0b3J5KHBhcmFtIHx8IFtdKSk7XG4gICAgICAgIG5vZGUuaGFzaCA9IGVudi5mYWN0b3J5SGFzaEF0dHJpYnV0ZXMobm9kZS5oYXNoIHx8IFtdKTtcbiAgICAgICAgbm9kZS5jb250ZW50ID0gbm9kZS5jb250ZW50ICYmIGVudi5mYWN0b3J5Q29udGVudChub2RlLmNvbnRlbnQpO1xuICAgICAgICBub2RlLmludmVyc2UgPSBub2RlLmludmVyc2UgJiYgZW52LmZhY3RvcnlDb250ZW50KG5vZGUuaW52ZXJzZSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGF0ZU5vZGVCbG9ja0hlbHBlcihub2RlLCBlbnYpO1xuICAgIH1cblxufSJdfQ==

/***/ },
/* 218 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeHelperHashAttributes = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeHelperHashAttributes = exports.TemplateNodeHelperHashAttributes = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeHelperHashAttributes, _TemplateNode);
	
	    /**
	     * @param {{}[]} nodes
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeHelperHashAttributes(nodes, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeHelperHashAttributes);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        _this.nodes = nodes;
	        return _this;
	    }
	
	    /**
	     * @returns {{}}
	     */
	
	
	    TemplateNodeHelperHashAttributes.prototype.compileHash = function compileHash() {
	        var _this2 = this;
	
	        return this.env.scope({ isString: true }, function () {
	            var hash = {},
	                events = {};
	
	            _this2.nodes.forEach(function (attr) {
	                if (attr.isEvent()) {
	                    Object.assign(events, attr.compileEvent());
	                } else {
	                    Object.assign(hash, attr.compileHash());
	                }
	            });
	
	            if (Object.keys(events).length) {
	                hash.events = _this2.env.compileHash(events);
	            }
	
	            return hash;
	        });
	    };
	
	    /**
	     * @returns {boolean}
	     */
	
	
	    TemplateNodeHelperHashAttributes.prototype.isEmpty = function isEmpty() {
	        return !this.nodes.length;
	    };
	
	    /**
	     * @returns {TemplateNodeExpression}
	     */
	
	
	    TemplateNodeHelperHashAttributes.prototype.getContext = function getContext() {
	        var context = this.nodes.find(function (node) {
	            return node.name === 'as';
	        });
	
	        if (context) {
	            return context.value;
	        }
	    };
	
	    /**
	     * @returns {TemplateNodeExpression}
	     */
	
	
	    TemplateNodeHelperHashAttributes.prototype.getScope = function getScope() {
	        var scope = this.nodes.find(function (node) {
	            return node.name === 'scope';
	        });
	
	        if (scope) {
	            return scope.value;
	        }
	    };
	
	    /**
	     * @param {{}[]} nodes
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeHelperHashAttributes}
	     */
	
	
	    TemplateNodeHelperHashAttributes.factory = function factory(nodes, env) {
	        nodes = nodes.map(function (node) {
	            return env.factoryHelperHashAttribute(node);
	        });
	
	        return new TemplateNodeHelperHashAttributes(nodes, env);
	    };
	
	    return TemplateNodeHelperHashAttributes;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlcy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0lBRWEsZ0MsV0FBQSxnQzs7O0FBRVQ7Ozs7QUFJQSw4Q0FBWSxLQUFaLEVBQW1CLEdBQW5CLEVBQXdCO0FBQUE7O0FBQUEsbUVBQ3BCLHlCQUFNLEdBQU4sQ0FEb0I7O0FBR3BCLGNBQUssS0FBTCxHQUFhLEtBQWI7QUFIb0I7QUFJdkI7O0FBRUQ7Ozs7OytDQUdBLFcsMEJBQWM7QUFBQTs7QUFDVixlQUFPLEtBQUssR0FBTCxDQUFTLEtBQVQsQ0FBZSxFQUFDLFVBQVUsSUFBWCxFQUFmLEVBQWlDLFlBQU07QUFDMUMsZ0JBQUksT0FBTyxFQUFYO0FBQUEsZ0JBQWUsU0FBUyxFQUF4Qjs7QUFFQSxtQkFBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixnQkFBUTtBQUN2QixvQkFBSSxLQUFLLE9BQUwsRUFBSixFQUFvQjtBQUNoQiwyQkFBTyxNQUFQLENBQWMsTUFBZCxFQUFzQixLQUFLLFlBQUwsRUFBdEI7QUFDSCxpQkFGRCxNQUVPO0FBQ0gsMkJBQU8sTUFBUCxDQUFjLElBQWQsRUFBb0IsS0FBSyxXQUFMLEVBQXBCO0FBQ0g7QUFDSixhQU5EOztBQVFBLGdCQUFJLE9BQU8sSUFBUCxDQUFZLE1BQVosRUFBb0IsTUFBeEIsRUFBZ0M7QUFDNUIscUJBQUssTUFBTCxHQUFjLE9BQUssR0FBTCxDQUFTLFdBQVQsQ0FBcUIsTUFBckIsQ0FBZDtBQUNIOztBQUVELG1CQUFPLElBQVA7QUFDSCxTQWhCTSxDQUFQO0FBaUJILEs7O0FBRUQ7Ozs7OytDQUdBLE8sc0JBQVU7QUFDTixlQUFPLENBQUMsS0FBSyxLQUFMLENBQVcsTUFBbkI7QUFDSCxLOztBQUVEOzs7OzsrQ0FHQSxVLHlCQUFhO0FBQ1QsWUFBSSxVQUFVLEtBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0I7QUFBQSxtQkFBUSxLQUFLLElBQUwsS0FBYyxJQUF0QjtBQUFBLFNBQWhCLENBQWQ7O0FBRUEsWUFBSSxPQUFKLEVBQWE7QUFDVCxtQkFBTyxRQUFRLEtBQWY7QUFDSDtBQUNKLEs7O0FBRUQ7Ozs7OytDQUdBLFEsdUJBQVc7QUFDUCxZQUFJLFFBQVEsS0FBSyxLQUFMLENBQVcsSUFBWCxDQUFnQjtBQUFBLG1CQUFRLEtBQUssSUFBTCxLQUFjLE9BQXRCO0FBQUEsU0FBaEIsQ0FBWjs7QUFFQSxZQUFJLEtBQUosRUFBVztBQUNQLG1CQUFPLE1BQU0sS0FBYjtBQUNIO0FBQ0osSzs7QUFFRDs7Ozs7Ozs7cUNBTU8sTyxvQkFBUSxLLEVBQU8sRyxFQUFLO0FBQ3ZCLGdCQUFRLE1BQU0sR0FBTixDQUFVO0FBQUEsbUJBQVEsSUFBSSwwQkFBSixDQUErQixJQUEvQixDQUFSO0FBQUEsU0FBVixDQUFSOztBQUVBLGVBQU8sSUFBSSxnQ0FBSixDQUFxQyxLQUFyQyxFQUE0QyxHQUE1QyxDQUFQO0FBQ0gsSyIsImZpbGUiOiJUZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVtcGxhdGVOb2RlfSBmcm9tICcuL1RlbXBsYXRlTm9kZSc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlcyBleHRlbmRzIFRlbXBsYXRlTm9kZSB7XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge3t9W119IG5vZGVzXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZUVudmlyb25tZW50fSBlbnZcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihub2RlcywgZW52KSB7XG4gICAgICAgIHN1cGVyKGVudik7XG5cbiAgICAgICAgdGhpcy5ub2RlcyA9IG5vZGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHt7fX1cbiAgICAgKi9cbiAgICBjb21waWxlSGFzaCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW52LnNjb3BlKHtpc1N0cmluZzogdHJ1ZX0sICgpID0+IHtcbiAgICAgICAgICAgIGxldCBoYXNoID0ge30sIGV2ZW50cyA9IHt9O1xuXG4gICAgICAgICAgICB0aGlzLm5vZGVzLmZvckVhY2goYXR0ciA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGF0dHIuaXNFdmVudCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZXZlbnRzLCBhdHRyLmNvbXBpbGVFdmVudCgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGhhc2gsIGF0dHIuY29tcGlsZUhhc2goKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGlmIChPYmplY3Qua2V5cyhldmVudHMpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGhhc2guZXZlbnRzID0gdGhpcy5lbnYuY29tcGlsZUhhc2goZXZlbnRzKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGhhc2g7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzRW1wdHkoKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5ub2Rlcy5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUV4cHJlc3Npb259XG4gICAgICovXG4gICAgZ2V0Q29udGV4dCgpIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSB0aGlzLm5vZGVzLmZpbmQobm9kZSA9PiBub2RlLm5hbWUgPT09ICdhcycpO1xuXG4gICAgICAgIGlmIChjb250ZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gY29udGV4dC52YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVFeHByZXNzaW9ufVxuICAgICAqL1xuICAgIGdldFNjb3BlKCkge1xuICAgICAgICBsZXQgc2NvcGUgPSB0aGlzLm5vZGVzLmZpbmQobm9kZSA9PiBub2RlLm5hbWUgPT09ICdzY29wZScpO1xuXG4gICAgICAgIGlmIChzY29wZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNjb3BlLnZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fVtdfSBub2Rlc1xuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVFbnZpcm9ubWVudH0gZW52XG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlSGVscGVySGFzaEF0dHJpYnV0ZXN9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZXMsIGVudikge1xuICAgICAgICBub2RlcyA9IG5vZGVzLm1hcChub2RlID0+IGVudi5mYWN0b3J5SGVscGVySGFzaEF0dHJpYnV0ZShub2RlKSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlcyhub2RlcywgZW52KTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 219 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeHelperHashAttribute = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNodeAbstractAttribute = __webpack_require__(211);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeHelperHashAttribute = exports.TemplateNodeHelperHashAttribute = function (_TemplateNodeAbstract) {
	    (0, _inherits3.default)(TemplateNodeHelperHashAttribute, _TemplateNodeAbstract);
	
	    function TemplateNodeHelperHashAttribute() {
	        (0, _classCallCheck3.default)(this, TemplateNodeHelperHashAttribute);
	        return (0, _possibleConstructorReturn3.default)(this, _TemplateNodeAbstract.apply(this, arguments));
	    }
	
	    /**
	     * @returns {{}}
	     */
	    TemplateNodeHelperHashAttribute.prototype.compileHash = function compileHash() {
	        var name = this.name;
	        var value = this.value;
	
	
	        if (name !== 'as' && name !== 'scope') {
	            var _ref;
	
	            return _ref = {}, _ref[name] = value.compile(), _ref;
	        } else {
	            return {};
	        }
	    };
	
	    return TemplateNodeHelperHashAttribute;
	}(_TemplateNodeAbstractAttribute.TemplateNodeAbstractAttribute);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSwrQixXQUFBLCtCOzs7Ozs7OztBQUVUOzs7OENBR0EsVywwQkFBYztBQUFBLFlBQ0wsSUFESyxHQUNVLElBRFYsQ0FDTCxJQURLO0FBQUEsWUFDQyxLQURELEdBQ1UsSUFEVixDQUNDLEtBREQ7OztBQUdWLFlBQUksU0FBUyxJQUFULElBQWlCLFNBQVMsT0FBOUIsRUFBdUM7QUFBQTs7QUFDbkMsbUNBQ0ssSUFETCxJQUNZLE1BQU0sT0FBTixFQURaO0FBR0gsU0FKRCxNQUlPO0FBQ0gsbUJBQU8sRUFBUDtBQUNIO0FBQ0osSyIsImZpbGUiOiJUZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZSc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZU5vZGVIZWxwZXJIYXNoQXR0cmlidXRlIGV4dGVuZHMgVGVtcGxhdGVOb2RlQWJzdHJhY3RBdHRyaWJ1dGUge1xuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3t9fVxuICAgICAqL1xuICAgIGNvbXBpbGVIYXNoKCkge1xuICAgICAgICBsZXQge25hbWUsIHZhbHVlfSA9IHRoaXM7XG5cbiAgICAgICAgaWYgKG5hbWUgIT09ICdhcycgJiYgbmFtZSAhPT0gJ3Njb3BlJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBbbmFtZV06IHZhbHVlLmNvbXBpbGUoKVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19

/***/ },
/* 220 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.TemplateNodeCompiled = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeCompiled = exports.TemplateNodeCompiled = function () {
	
	    /**
	     * @param {string} content
	     * @param {{}} options
	     */
	    function TemplateNodeCompiled(content, options) {
	        (0, _classCallCheck3.default)(this, TemplateNodeCompiled);
	
	        this.content = content;
	        Object.assign(this, options);
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeCompiled.prototype.toString = function toString() {
	        return this.content;
	    };
	
	    return TemplateNodeCompiled;
	}();
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVDb21waWxlZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztJQUFhLG9CLFdBQUEsb0I7O0FBRVQ7Ozs7QUFJQSxrQ0FBWSxPQUFaLEVBQXFCLE9BQXJCLEVBQThCO0FBQUE7O0FBQzFCLGFBQUssT0FBTCxHQUFlLE9BQWY7QUFDQSxlQUFPLE1BQVAsQ0FBYyxJQUFkLEVBQW9CLE9BQXBCO0FBQ0g7O0FBRUQ7Ozs7O21DQUdBLFEsdUJBQVc7QUFDUCxlQUFPLEtBQUssT0FBWjtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlQ29tcGlsZWQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlQ29tcGlsZWQge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbnRlbnRcbiAgICAgKiBAcGFyYW0ge3t9fSBvcHRpb25zXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoY29udGVudCwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLmNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICB0b1N0cmluZygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudDtcbiAgICB9XG5cbn0iXX0=

/***/ },
/* 221 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeArray = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeArray = exports.TemplateNodeArray = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeArray, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeArray(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeArray);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeArray.prototype.compile = function compile() {
	        var values = this.values.map(function (value) {
	            return value.compile();
	        });
	
	        return '[' + values.join(',') + ']';
	    };
	
	    /**
	     * @param {{values: []}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeArray}
	     */
	
	
	    TemplateNodeArray.factory = function factory(node, env) {
	        node.values = node.values.map(function (value) {
	            return env.factory(value);
	        });
	
	        return new TemplateNodeArray(node, env);
	    };
	
	    return TemplateNodeArray;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVBcnJheS5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7O0lBRWEsaUIsV0FBQSxpQjs7O0FBRVQ7Ozs7QUFJQSwrQkFBWSxJQUFaLEVBQWtCLEdBQWxCLEVBQXVCO0FBQUE7O0FBQUEsbUVBQ25CLHlCQUFNLEdBQU4sQ0FEbUI7O0FBR25CLGVBQU8sTUFBUCxRQUFvQixJQUFwQjtBQUhtQjtBQUl0Qjs7QUFFRDs7Ozs7Z0NBR0EsTyxzQkFBVTtBQUNOLFlBQUksU0FBUyxLQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCO0FBQUEsbUJBQVMsTUFBTSxPQUFOLEVBQVQ7QUFBQSxTQUFoQixDQUFiOztBQUVBLHFCQUFXLE9BQU8sSUFBUCxDQUFZLEdBQVosQ0FBWDtBQUNILEs7O0FBRUQ7Ozs7Ozs7O3NCQU1PLE8sb0JBQVEsSSxFQUFNLEcsRUFBSztBQUN0QixhQUFLLE1BQUwsR0FBYyxLQUFLLE1BQUwsQ0FBWSxHQUFaLENBQWdCO0FBQUEsbUJBQVMsSUFBSSxPQUFKLENBQVksS0FBWixDQUFUO0FBQUEsU0FBaEIsQ0FBZDs7QUFFQSxlQUFPLElBQUksaUJBQUosQ0FBc0IsSUFBdEIsRUFBNEIsR0FBNUIsQ0FBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlQXJyYXkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZX0gZnJvbSAnLi9UZW1wbGF0ZU5vZGUnO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVOb2RlQXJyYXkgZXh0ZW5kcyBUZW1wbGF0ZU5vZGUge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7fX0gbm9kZVxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVFbnZpcm9ubWVudH0gZW52XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iobm9kZSwgZW52KSB7XG4gICAgICAgIHN1cGVyKGVudik7XG5cbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBub2RlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgICAqL1xuICAgIGNvbXBpbGUoKSB7XG4gICAgICAgIGxldCB2YWx1ZXMgPSB0aGlzLnZhbHVlcy5tYXAodmFsdWUgPT4gdmFsdWUuY29tcGlsZSgpKTtcblxuICAgICAgICByZXR1cm4gYFske3ZhbHVlcy5qb2luKCcsJyl9XWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHt7dmFsdWVzOiBbXX19IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUFycmF5fVxuICAgICAqL1xuICAgIHN0YXRpYyBmYWN0b3J5KG5vZGUsIGVudikge1xuICAgICAgICBub2RlLnZhbHVlcyA9IG5vZGUudmFsdWVzLm1hcCh2YWx1ZSA9PiBlbnYuZmFjdG9yeSh2YWx1ZSkpO1xuXG4gICAgICAgIHJldHVybiBuZXcgVGVtcGxhdGVOb2RlQXJyYXkobm9kZSwgZW52KTtcbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 222 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeHash = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNode2 = __webpack_require__(201);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeHash = exports.TemplateNodeHash = function (_TemplateNode) {
	    (0, _inherits3.default)(TemplateNodeHash, _TemplateNode);
	
	    /**
	     * @param {{}} node
	     * @param {TemplateEnvironment} env
	     */
	    function TemplateNodeHash(node, env) {
	        (0, _classCallCheck3.default)(this, TemplateNodeHash);
	
	        var _this = (0, _possibleConstructorReturn3.default)(this, _TemplateNode.call(this, env));
	
	        Object.assign(_this, node);
	        return _this;
	    }
	
	    /**
	     * @returns {string}
	     */
	
	
	    TemplateNodeHash.prototype.compile = function compile() {
	        var result = {};
	
	        this.attrs.forEach(function (attr) {
	            Object.assign(result, attr.compileHash());
	        });
	
	        return this.env.compileHash(result);
	    };
	
	    /**
	     * @param {{attrs: []}} node
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeHash}
	     */
	
	
	    TemplateNodeHash.factory = function factory(node, env) {
	        node.attrs = node.attrs.map(function (attr) {
	            return env.factoryHashAttribute(attr);
	        });
	
	        return new TemplateNodeHash(node, env);
	    };
	
	    return TemplateNodeHash;
	}(_TemplateNode2.TemplateNode);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVIYXNoLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSxnQixXQUFBLGdCOzs7QUFFVDs7OztBQUlBLDhCQUFZLElBQVosRUFBa0IsR0FBbEIsRUFBdUI7QUFBQTs7QUFBQSxtRUFDbkIseUJBQU0sR0FBTixDQURtQjs7QUFHbkIsZUFBTyxNQUFQLFFBQW9CLElBQXBCO0FBSG1CO0FBSXRCOztBQUVEOzs7OzsrQkFHQSxPLHNCQUFVO0FBQ04sWUFBSSxTQUFTLEVBQWI7O0FBRUEsYUFBSyxLQUFMLENBQVcsT0FBWCxDQUFtQixnQkFBUTtBQUN2QixtQkFBTyxNQUFQLENBQWMsTUFBZCxFQUFzQixLQUFLLFdBQUwsRUFBdEI7QUFDSCxTQUZEOztBQUlBLGVBQU8sS0FBSyxHQUFMLENBQVMsV0FBVCxDQUFxQixNQUFyQixDQUFQO0FBQ0gsSzs7QUFFRDs7Ozs7Ozs7cUJBTU8sTyxvQkFBUSxJLEVBQU0sRyxFQUFLO0FBQ3RCLGFBQUssS0FBTCxHQUFhLEtBQUssS0FBTCxDQUFXLEdBQVgsQ0FBZTtBQUFBLG1CQUFRLElBQUksb0JBQUosQ0FBeUIsSUFBekIsQ0FBUjtBQUFBLFNBQWYsQ0FBYjs7QUFFQSxlQUFPLElBQUksZ0JBQUosQ0FBcUIsSUFBckIsRUFBMkIsR0FBM0IsQ0FBUDtBQUNILEsiLCJmaWxlIjoiVGVtcGxhdGVOb2RlSGFzaC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VGVtcGxhdGVOb2RlfSBmcm9tICcuL1RlbXBsYXRlTm9kZSc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZU5vZGVIYXNoIGV4dGVuZHMgVGVtcGxhdGVOb2RlIHtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e319IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG5vZGUsIGVudikge1xuICAgICAgICBzdXBlcihlbnYpO1xuXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgbm9kZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHJldHVybnMge3N0cmluZ31cbiAgICAgKi9cbiAgICBjb21waWxlKCkge1xuICAgICAgICBsZXQgcmVzdWx0ID0ge307XG5cbiAgICAgICAgdGhpcy5hdHRycy5mb3JFYWNoKGF0dHIgPT4ge1xuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihyZXN1bHQsIGF0dHIuY29tcGlsZUhhc2goKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmVudi5jb21waWxlSGFzaChyZXN1bHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7e2F0dHJzOiBbXX19IG5vZGVcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlRW52aXJvbm1lbnR9IGVudlxuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZUhhc2h9XG4gICAgICovXG4gICAgc3RhdGljIGZhY3Rvcnkobm9kZSwgZW52KSB7XG4gICAgICAgIG5vZGUuYXR0cnMgPSBub2RlLmF0dHJzLm1hcChhdHRyID0+IGVudi5mYWN0b3J5SGFzaEF0dHJpYnV0ZShhdHRyKSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBUZW1wbGF0ZU5vZGVIYXNoKG5vZGUsIGVudik7XG4gICAgfVxuXG59XG4iXX0=

/***/ },
/* 223 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateNodeHashAttribute = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplateNodeAbstractAttribute = __webpack_require__(211);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateNodeHashAttribute = exports.TemplateNodeHashAttribute = function (_TemplateNodeAbstract) {
	  (0, _inherits3.default)(TemplateNodeHashAttribute, _TemplateNodeAbstract);
	
	  function TemplateNodeHashAttribute() {
	    (0, _classCallCheck3.default)(this, TemplateNodeHashAttribute);
	    return (0, _possibleConstructorReturn3.default)(this, _TemplateNodeAbstract.apply(this, arguments));
	  }
	
	  return TemplateNodeHashAttribute;
	}(_TemplateNodeAbstractAttribute.TemplateNodeAbstractAttribute);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9ub2Rlcy9UZW1wbGF0ZU5vZGVIYXNoQXR0cmlidXRlLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7Ozs7SUFFYSx5QixXQUFBLHlCIiwiZmlsZSI6IlRlbXBsYXRlTm9kZUhhc2hBdHRyaWJ1dGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlTm9kZUFic3RyYWN0QXR0cmlidXRlfSBmcm9tICcuL1RlbXBsYXRlTm9kZUFic3RyYWN0QXR0cmlidXRlJztcblxuZXhwb3J0IGNsYXNzIFRlbXBsYXRlTm9kZUhhc2hBdHRyaWJ1dGUgZXh0ZW5kcyBUZW1wbGF0ZU5vZGVBYnN0cmFjdEF0dHJpYnV0ZSB7XG5cbn1cbiJdfQ==

/***/ },
/* 224 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateCSSModulesPlugin = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplatePlugin2 = __webpack_require__(225);
	
	var _TemplateNodeString = __webpack_require__(204);
	
	var _TemplateNodeVar = __webpack_require__(212);
	
	var _TemplateNodeContent = __webpack_require__(206);
	
	var _TemplateNodeStringProxy = __webpack_require__(208);
	
	var _TemplateNodeBlockHelper = __webpack_require__(217);
	
	var _TemplateNodeAttribute = __webpack_require__(210);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateCSSModulesPlugin = exports.TemplateCSSModulesPlugin = function (_TemplatePlugin) {
	    (0, _inherits3.default)(TemplateCSSModulesPlugin, _TemplatePlugin);
	
	    function TemplateCSSModulesPlugin() {
	        (0, _classCallCheck3.default)(this, TemplateCSSModulesPlugin);
	        return (0, _possibleConstructorReturn3.default)(this, _TemplatePlugin.apply(this, arguments));
	    }
	
	    /**
	     * @param {TemplateNodeAttribute} node
	     *
	     * @returns {TemplateNodeAttribute}
	     */
	    TemplateCSSModulesPlugin.prototype.onTemplateNodeAttribute = function onTemplateNodeAttribute(node) {
	        if (node.name === 'class') {
	            node.value = this.convert(node.value, true);
	        }
	
	        return node;
	    };
	
	    /**
	     * @param {TemplateNodeHelperHashAttribute} node
	     *
	     * @returns {TemplateNodeHelperHashAttribute}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.onTemplateNodeHelperHashAttribute = function onTemplateNodeHelperHashAttribute(node) {
	        if (node.name === 'class') {
	            node.value = this.convert(node.value, true);
	        }
	
	        return node;
	    };
	
	    /**
	     * @param {TemplateNode} node
	     * @param {boolean} allowTrim
	     *
	     * @returns {TemplateNode}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convert = function convert(node) {
	        var allowTrim = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	        if (node instanceof _TemplateNodeString.TemplateNodeString) {
	            return this.convertStringNode(node, allowTrim);
	        }
	
	        if (node instanceof _TemplateNodeStringProxy.TemplateNodeStringProxy) {
	            return this.convertProxyNode(node);
	        }
	
	        if (node instanceof _TemplateNodeContent.TemplateNodeContent) {
	            return this.convertContentNode(node);
	        }
	
	        if (node instanceof _TemplateNodeBlockHelper.TemplateNodeBlockHelper) {
	            return this.convertBlockHelperNode(node);
	        }
	
	        return node;
	    };
	
	    /**
	     * @param {TemplateNodeString} node
	     * @param {boolean} allowTrim
	     *
	     * @returns {TemplateNodeString}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convertStringNode = function convertStringNode(node) {
	        var allowTrim = arguments.length <= 1 || arguments[1] === undefined ? false : arguments[1];
	
	        if (allowTrim) {
	            node.string = node.string.trim();
	        }
	
	        if (node.string.trim() === '') {
	            return node;
	        }
	
	        return this.convertToVars(node.string, node.env);
	    };
	
	    /**
	     * @param {TemplateNodeStringProxy} proxy
	     *
	     * @returns {TemplateNodeStringProxy}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convertProxyNode = function convertProxyNode(proxy) {
	        var content = [];
	
	        this.convert(proxy.content).nodes.forEach(function (node) {
	            if (node instanceof _TemplateNodeStringProxy.TemplateNodeStringProxy) {
	                content = content.concat(node.content.nodes);
	            } else {
	                content.push(node);
	            }
	        });
	
	        proxy.content.nodes = content;
	
	        return proxy;
	    };
	
	    /**
	     * @param {TemplateNodeStringProxy} node
	     *
	     * @returns {TemplateNodeStringProxy}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convertContentNode = function convertContentNode(node) {
	        var _this2 = this;
	
	        node.nodes = node.nodes.map(function (node) {
	            return _this2.convert(node);
	        });
	
	        return node;
	    };
	
	    /**
	     * @param {TemplateNodeBlockHelper} node
	     *
	     * @returns {TemplateNodeBlockHelper}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convertBlockHelperNode = function convertBlockHelperNode(node) {
	        if (node.content) {
	            node.content = this.convert(node.content);
	        }
	
	        if (node.inverse) {
	            node.inverse = this.convert(node.inverse);
	        }
	
	        return node;
	    };
	
	    /**
	     * @param {string} string
	     * @param {TemplateEnvironment} env
	     * 
	     * @returns {TemplateNodeStringProxy}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convertToVars = function convertToVars(string, env) {
	        var _this3 = this;
	
	        var classes = string.match(/(\s+|\S+)/g);
	
	        if (classes.length === 1) {
	            return this.convertToVar(string, env);
	        } else {
	            var _ret = function () {
	                var parts = [];
	
	                classes.forEach(function (cls) {
	                    if (cls.trim().length) {
	                        parts.push(_this3.convertToVar(cls, env));
	                    } else {
	                        parts.push(env.factoryString(' '));
	                    }
	                });
	
	                return {
	                    v: new _TemplateNodeStringProxy.TemplateNodeStringProxy(new _TemplateNodeContent.TemplateNodeContent(parts, env), env)
	                };
	            }();
	
	            if (typeof _ret === "object") return _ret.v;
	        }
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {string} string
	     * @param {TemplateEnvironment} env
	     *
	     * @returns {TemplateNodeVar|TemplateNodeString}
	     */
	
	
	    TemplateCSSModulesPlugin.prototype.convertToVar = function convertToVar(string, env) {
	        if (string.trim() === '') {
	            return env.factoryString(string);
	        }
	
	        return _TemplateNodeVar.TemplateNodeVar.factoryFromString('styles.' + string, env);
	    };
	
	    return TemplateCSSModulesPlugin;
	}(_TemplatePlugin2.TemplatePlugin);
	//# sourceMappingURL=data:application/json;base64,

/***/ },
/* 225 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	exports.__esModule = true;
	exports.TemplatePlugin = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplatePlugin = exports.TemplatePlugin = function TemplatePlugin() {
	  (0, _classCallCheck3.default)(this, TemplatePlugin);
	};
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9wbHVnaW5zL1RlbXBsYXRlUGx1Z2luLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7O0lBQWEsYyxXQUFBLGMiLCJmaWxlIjoiVGVtcGxhdGVQbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVGVtcGxhdGVQbHVnaW4ge1xuXG59XG4iXX0=

/***/ },
/* 226 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateTrimSpacesPlugin = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplatePlugin2 = __webpack_require__(225);
	
	var _TemplateNodeString = __webpack_require__(204);
	
	var _TemplateNodeComponent = __webpack_require__(203);
	
	var _TemplateNodeComment = __webpack_require__(209);
	
	var _TemplateNodeHelper = __webpack_require__(216);
	
	var _TemplateNodeEscapedString = __webpack_require__(207);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateTrimSpacesPlugin = exports.TemplateTrimSpacesPlugin = function (_TemplatePlugin) {
	    (0, _inherits3.default)(TemplateTrimSpacesPlugin, _TemplatePlugin);
	
	    function TemplateTrimSpacesPlugin() {
	        (0, _classCallCheck3.default)(this, TemplateTrimSpacesPlugin);
	        return (0, _possibleConstructorReturn3.default)(this, _TemplatePlugin.apply(this, arguments));
	    }
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {TemplateNode} node
	     * @returns {boolean}
	     */
	    TemplateTrimSpacesPlugin.prototype.isEmpty = function isEmpty(node) {
	        return node instanceof _TemplateNodeString.TemplateNodeString && node.string.trim() === '';
	    };
	
	    /**
	     * @param {TemplateNode} node
	     * @returns {boolean}
	     */
	
	
	    TemplateTrimSpacesPlugin.prototype.isNewLine = function isNewLine(node) {
	        return this.isEmpty(node) && node.string.indexOf('\n') > -1;
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {TemplateNode} node
	     * @returns {boolean}
	     */
	
	
	    TemplateTrimSpacesPlugin.prototype.isComponent = function isComponent(node) {
	        return node instanceof _TemplateNodeComponent.TemplateNodeComponent || node instanceof _TemplateNodeHelper.TemplateNodeHelper || node instanceof _TemplateNodeEscapedString.TemplateNodeEscapedString;
	    };
	
	    //noinspection JSMethodCanBeStatic
	    /**
	     * @param {TemplateNode[]} nodes
	     *
	     * @returns {TemplateNode[]}
	     */
	
	
	    TemplateTrimSpacesPlugin.prototype.trimComments = function trimComments(nodes) {
	        return nodes.filter(function (node) {
	            return !(node instanceof _TemplateNodeComment.TemplateNodeComment);
	        });
	    };
	
	    /**
	     * @param {TemplateNode[]} nodes
	     *
	     * @returns {TemplateNode[]}
	     */
	
	
	    TemplateTrimSpacesPlugin.prototype.trimInside = function trimInside(nodes) {
	        var result = [];
	
	        for (var index = 0; index < nodes.length; index++) {
	            var node = nodes[index],
	                prev = result[result.length - 1],
	                next = nodes[index + 1];
	
	            if (!(this.isEmpty(node) && this.isComponent(prev) && this.isComponent(next))) {
	                result.push(node);
	            }
	        }
	
	        return result;
	    };
	
	    //noinspection JSMethodCanBeStatic
	
	
	    TemplateTrimSpacesPlugin.prototype.onTemplateNodeComponent = function onTemplateNodeComponent(node) {
	        var saveSpaces = node.getAttribute('saveSpaces');
	
	        if (saveSpaces) {
	            node.removeAttribute('saveSpaces');
	            node.content.saveSpaces = true;
	        }
	    };
	
	    /**
	     * @param {TemplateNodeContent} node
	     */
	
	
	    TemplateTrimSpacesPlugin.prototype.onTemplateNodeContent = function onTemplateNodeContent(node) {
	        node.nodes = this.trimComments(node.nodes);
	
	        if (node.nodes.length > 1 && !node.saveSpaces) {
	            // trim begin
	            if (this.isEmpty(node.nodes[0]) && this.isComponent(node.nodes[1])) {
	                node.nodes = node.nodes.slice(1);
	            }
	
	            // trim end
	            var len = node.nodes.length;
	
	            if (this.isEmpty(node.nodes[len - 1]) && this.isComponent(node.nodes[len - 2])) {
	                node.nodes = node.nodes.slice(0, -1);
	            }
	
	            // trim inside
	            node.nodes = this.trimInside(node.nodes);
	        }
	    };
	
	    /**
	     * @param {TemplateNodeString} node
	     * @param {TemplateNode[]} parents
	     */
	
	
	    TemplateTrimSpacesPlugin.prototype.onTemplateNodeString = function onTemplateNodeString(node, parents) {
	        var saveSpaces = parents.some(function (node) {
	            return node.saveSpaces;
	        });
	
	        if (!saveSpaces) {
	            node.string = node.string.replace(/[ \t\r\n]+/g, ' ');
	        }
	    };
	
	    return TemplateTrimSpacesPlugin;
	}(_TemplatePlugin2.TemplatePlugin);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9wbHVnaW5zL1RlbXBsYXRlVHJpbVNwYWNlc1BsdWdpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0lBRWEsd0IsV0FBQSx3Qjs7Ozs7Ozs7QUFFVDtBQUNBOzs7O3VDQUlBLE8sb0JBQVEsSSxFQUFNO0FBQ1YsZUFBTywwREFBc0MsS0FBSyxNQUFMLENBQVksSUFBWixPQUF1QixFQUFwRTtBQUNILEs7O0FBRUQ7Ozs7Ozt1Q0FJQSxTLHNCQUFVLEksRUFBTTtBQUNaLGVBQU8sS0FBSyxPQUFMLENBQWEsSUFBYixLQUFzQixLQUFLLE1BQUwsQ0FBWSxPQUFaLENBQW9CLElBQXBCLElBQTRCLENBQUMsQ0FBMUQ7QUFDSCxLOztBQUVEO0FBQ0E7Ozs7Ozt1Q0FJQSxXLHdCQUFZLEksRUFBTTtBQUNkLGVBQVEsNERBQUQsSUFDRixzREFERSxJQUVGLG9FQUZMO0FBR0gsSzs7QUFFRDtBQUNBOzs7Ozs7O3VDQUtBLFkseUJBQWEsSyxFQUFPO0FBQ2hCLGVBQU8sTUFBTSxNQUFOLENBQWE7QUFBQSxtQkFBUSxFQUFFLHdEQUFGLENBQVI7QUFBQSxTQUFiLENBQVA7QUFDSCxLOztBQUVEOzs7Ozs7O3VDQUtBLFUsdUJBQVcsSyxFQUFPO0FBQ2QsWUFBSSxTQUFTLEVBQWI7O0FBRUEsYUFBSyxJQUFJLFFBQVEsQ0FBakIsRUFBb0IsUUFBUSxNQUFNLE1BQWxDLEVBQTBDLE9BQTFDLEVBQW1EO0FBQy9DLGdCQUFJLE9BQU8sTUFBTSxLQUFOLENBQVg7QUFBQSxnQkFDSSxPQUFPLE9BQU8sT0FBTyxNQUFQLEdBQWdCLENBQXZCLENBRFg7QUFBQSxnQkFFSSxPQUFPLE1BQU0sUUFBUSxDQUFkLENBRlg7O0FBSUEsZ0JBQUksRUFBRSxLQUFLLE9BQUwsQ0FBYSxJQUFiLEtBQXNCLEtBQUssV0FBTCxDQUFpQixJQUFqQixDQUF0QixJQUFnRCxLQUFLLFdBQUwsQ0FBaUIsSUFBakIsQ0FBbEQsQ0FBSixFQUErRTtBQUMzRSx1QkFBTyxJQUFQLENBQVksSUFBWjtBQUNIO0FBQ0o7O0FBRUQsZUFBTyxNQUFQO0FBQ0gsSzs7QUFFRDs7O3VDQUNBLHVCLG9DQUF3QixJLEVBQU07QUFDMUIsWUFBSSxhQUFhLEtBQUssWUFBTCxDQUFrQixZQUFsQixDQUFqQjs7QUFFQSxZQUFJLFVBQUosRUFBZ0I7QUFDWixpQkFBSyxlQUFMLENBQXFCLFlBQXJCO0FBQ0EsaUJBQUssT0FBTCxDQUFhLFVBQWIsR0FBMEIsSUFBMUI7QUFDSDtBQUNKLEs7O0FBRUQ7Ozs7O3VDQUdBLHFCLGtDQUFzQixJLEVBQU07QUFDeEIsYUFBSyxLQUFMLEdBQWEsS0FBSyxZQUFMLENBQWtCLEtBQUssS0FBdkIsQ0FBYjs7QUFFQSxZQUFJLEtBQUssS0FBTCxDQUFXLE1BQVgsR0FBb0IsQ0FBcEIsSUFBeUIsQ0FBQyxLQUFLLFVBQW5DLEVBQStDO0FBQzNDO0FBQ0EsZ0JBQUksS0FBSyxPQUFMLENBQWEsS0FBSyxLQUFMLENBQVcsQ0FBWCxDQUFiLEtBQStCLEtBQUssV0FBTCxDQUFpQixLQUFLLEtBQUwsQ0FBVyxDQUFYLENBQWpCLENBQW5DLEVBQW9FO0FBQ2hFLHFCQUFLLEtBQUwsR0FBYSxLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQWlCLENBQWpCLENBQWI7QUFDSDs7QUFFRDtBQUNBLGdCQUFJLE1BQU0sS0FBSyxLQUFMLENBQVcsTUFBckI7O0FBRUEsZ0JBQUksS0FBSyxPQUFMLENBQWEsS0FBSyxLQUFMLENBQVcsTUFBTSxDQUFqQixDQUFiLEtBQXFDLEtBQUssV0FBTCxDQUFpQixLQUFLLEtBQUwsQ0FBVyxNQUFNLENBQWpCLENBQWpCLENBQXpDLEVBQWdGO0FBQzVFLHFCQUFLLEtBQUwsR0FBYSxLQUFLLEtBQUwsQ0FBVyxLQUFYLENBQWlCLENBQWpCLEVBQW9CLENBQUMsQ0FBckIsQ0FBYjtBQUNIOztBQUVEO0FBQ0EsaUJBQUssS0FBTCxHQUFhLEtBQUssVUFBTCxDQUFnQixLQUFLLEtBQXJCLENBQWI7QUFDSDtBQUNKLEs7O0FBRUQ7Ozs7Ozt1Q0FJQSxvQixpQ0FBcUIsSSxFQUFNLE8sRUFBUztBQUNoQyxZQUFJLGFBQWEsUUFBUSxJQUFSLENBQWE7QUFBQSxtQkFBUSxLQUFLLFVBQWI7QUFBQSxTQUFiLENBQWpCOztBQUVBLFlBQUksQ0FBQyxVQUFMLEVBQWlCO0FBQ2IsaUJBQUssTUFBTCxHQUFjLEtBQUssTUFBTCxDQUFZLE9BQVosQ0FBb0IsYUFBcEIsRUFBbUMsR0FBbkMsQ0FBZDtBQUNIO0FBQ0osSyIsImZpbGUiOiJUZW1wbGF0ZVRyaW1TcGFjZXNQbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlUGx1Z2lufSBmcm9tICcuL1RlbXBsYXRlUGx1Z2luJztcblxuaW1wb3J0IHtUZW1wbGF0ZU5vZGVTdHJpbmd9IGZyb20gJy4uL25vZGVzL1RlbXBsYXRlTm9kZVN0cmluZyc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZUNvbXBvbmVudH0gZnJvbSAnLi4vbm9kZXMvVGVtcGxhdGVOb2RlQ29tcG9uZW50JztcbmltcG9ydCB7VGVtcGxhdGVOb2RlQ29tbWVudH0gZnJvbSAnLi4vbm9kZXMvVGVtcGxhdGVOb2RlQ29tbWVudCc7XG5pbXBvcnQge1RlbXBsYXRlTm9kZUhlbHBlcn0gZnJvbSAnLi4vbm9kZXMvVGVtcGxhdGVOb2RlSGVscGVyJztcbmltcG9ydCB7VGVtcGxhdGVOb2RlRXNjYXBlZFN0cmluZ30gZnJvbSAnLi4vbm9kZXMvVGVtcGxhdGVOb2RlRXNjYXBlZFN0cmluZyc7XG5cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVRyaW1TcGFjZXNQbHVnaW4gZXh0ZW5kcyBUZW1wbGF0ZVBsdWdpbiB7XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGV9IG5vZGVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0VtcHR5KG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUgaW5zdGFuY2VvZiBUZW1wbGF0ZU5vZGVTdHJpbmcgJiYgbm9kZS5zdHJpbmcudHJpbSgpID09PSAnJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlTm9kZX0gbm9kZVxuICAgICAqIEByZXR1cm5zIHtib29sZWFufVxuICAgICAqL1xuICAgIGlzTmV3TGluZShub2RlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzRW1wdHkobm9kZSkgJiYgbm9kZS5zdHJpbmcuaW5kZXhPZignXFxuJykgPiAtMTtcbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGV9IG5vZGVcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0NvbXBvbmVudChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZSBpbnN0YW5jZW9mIFRlbXBsYXRlTm9kZUNvbXBvbmVudCkgfHxcbiAgICAgICAgICAgIChub2RlIGluc3RhbmNlb2YgVGVtcGxhdGVOb2RlSGVscGVyKSB8fFxuICAgICAgICAgICAgKG5vZGUgaW5zdGFuY2VvZiBUZW1wbGF0ZU5vZGVFc2NhcGVkU3RyaW5nKTtcbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGVbXX0gbm9kZXNcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtUZW1wbGF0ZU5vZGVbXX1cbiAgICAgKi9cbiAgICB0cmltQ29tbWVudHMobm9kZXMpIHtcbiAgICAgICAgcmV0dXJuIG5vZGVzLmZpbHRlcihub2RlID0+ICEobm9kZSBpbnN0YW5jZW9mIFRlbXBsYXRlTm9kZUNvbW1lbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlTm9kZVtdfSBub2Rlc1xuICAgICAqXG4gICAgICogQHJldHVybnMge1RlbXBsYXRlTm9kZVtdfVxuICAgICAqL1xuICAgIHRyaW1JbnNpZGUobm9kZXMpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBub2Rlcy5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgIGxldCBub2RlID0gbm9kZXNbaW5kZXhdLFxuICAgICAgICAgICAgICAgIHByZXYgPSByZXN1bHRbcmVzdWx0Lmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgICAgIG5leHQgPSBub2Rlc1tpbmRleCArIDFdO1xuXG4gICAgICAgICAgICBpZiAoISh0aGlzLmlzRW1wdHkobm9kZSkgJiYgdGhpcy5pc0NvbXBvbmVudChwcmV2KSAmJiB0aGlzLmlzQ29tcG9uZW50KG5leHQpKSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvL25vaW5zcGVjdGlvbiBKU01ldGhvZENhbkJlU3RhdGljXG4gICAgb25UZW1wbGF0ZU5vZGVDb21wb25lbnQobm9kZSkge1xuICAgICAgICB2YXIgc2F2ZVNwYWNlcyA9IG5vZGUuZ2V0QXR0cmlidXRlKCdzYXZlU3BhY2VzJyk7XG5cbiAgICAgICAgaWYgKHNhdmVTcGFjZXMpIHtcbiAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKCdzYXZlU3BhY2VzJyk7XG4gICAgICAgICAgICBub2RlLmNvbnRlbnQuc2F2ZVNwYWNlcyA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1RlbXBsYXRlTm9kZUNvbnRlbnR9IG5vZGVcbiAgICAgKi9cbiAgICBvblRlbXBsYXRlTm9kZUNvbnRlbnQobm9kZSkge1xuICAgICAgICBub2RlLm5vZGVzID0gdGhpcy50cmltQ29tbWVudHMobm9kZS5ub2Rlcyk7XG5cbiAgICAgICAgaWYgKG5vZGUubm9kZXMubGVuZ3RoID4gMSAmJiAhbm9kZS5zYXZlU3BhY2VzKSB7XG4gICAgICAgICAgICAvLyB0cmltIGJlZ2luXG4gICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KG5vZGUubm9kZXNbMF0pICYmIHRoaXMuaXNDb21wb25lbnQobm9kZS5ub2Rlc1sxXSkpIHtcbiAgICAgICAgICAgICAgICBub2RlLm5vZGVzID0gbm9kZS5ub2Rlcy5zbGljZSgxKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdHJpbSBlbmRcbiAgICAgICAgICAgIGxldCBsZW4gPSBub2RlLm5vZGVzLmxlbmd0aDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eShub2RlLm5vZGVzW2xlbiAtIDFdKSAmJiB0aGlzLmlzQ29tcG9uZW50KG5vZGUubm9kZXNbbGVuIC0gMl0pKSB7XG4gICAgICAgICAgICAgICAgbm9kZS5ub2RlcyA9IG5vZGUubm9kZXMuc2xpY2UoMCwgLTEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB0cmltIGluc2lkZVxuICAgICAgICAgICAgbm9kZS5ub2RlcyA9IHRoaXMudHJpbUluc2lkZShub2RlLm5vZGVzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7VGVtcGxhdGVOb2RlU3RyaW5nfSBub2RlXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGVbXX0gcGFyZW50c1xuICAgICAqL1xuICAgIG9uVGVtcGxhdGVOb2RlU3RyaW5nKG5vZGUsIHBhcmVudHMpIHtcbiAgICAgICAgbGV0IHNhdmVTcGFjZXMgPSBwYXJlbnRzLnNvbWUobm9kZSA9PiBub2RlLnNhdmVTcGFjZXMpO1xuXG4gICAgICAgIGlmICghc2F2ZVNwYWNlcykge1xuICAgICAgICAgICAgbm9kZS5zdHJpbmcgPSBub2RlLnN0cmluZy5yZXBsYWNlKC9bIFxcdFxcclxcbl0rL2csICcgJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbn1cbiJdfQ==

/***/ },
/* 227 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.TemplateFlattenPlugin = undefined;
	
	var _classCallCheck2 = __webpack_require__(5);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(6);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(75);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _TemplatePlugin2 = __webpack_require__(225);
	
	var _TemplateNodeStringProxy = __webpack_require__(208);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var TemplateFlattenPlugin = exports.TemplateFlattenPlugin = function (_TemplatePlugin) {
	    (0, _inherits3.default)(TemplateFlattenPlugin, _TemplatePlugin);
	
	    function TemplateFlattenPlugin() {
	        (0, _classCallCheck3.default)(this, TemplateFlattenPlugin);
	        return (0, _possibleConstructorReturn3.default)(this, _TemplatePlugin.apply(this, arguments));
	    }
	
	    /**
	     * @param {TemplateNodeContent} node
	     *
	     * @returns {TemplateNodeContent}
	     */
	    TemplateFlattenPlugin.prototype.onTemplateNodeContent = function onTemplateNodeContent(node) {
	        node.nodes = this.flattenNodes(node.nodes);
	
	        return node;
	    };
	
	    /**
	     * @param {TemplateNode[]} nodes
	     * @returns {TemplateNode[]}
	     */
	
	
	    TemplateFlattenPlugin.prototype.flattenNodes = function flattenNodes(nodes) {
	        var _this2 = this;
	
	        var result = [];
	
	        nodes.forEach(function (node) {
	            if (node instanceof _TemplateNodeStringProxy.TemplateNodeStringProxy) {
	                result = result.concat(_this2.flattenNodes(node.content.nodes));
	            } else {
	                result.push(node);
	            }
	        });
	
	        return result;
	    };
	
	    return TemplateFlattenPlugin;
	}(_TemplatePlugin2.TemplatePlugin);
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL2xpYi9UZW1wbGF0ZS9wbHVnaW5zL1RlbXBsYXRlRmxhdHRlblBsdWdpbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOztBQUVBOzs7O0lBRWEscUIsV0FBQSxxQjs7Ozs7Ozs7QUFFVDs7Ozs7b0NBS0EscUIsa0NBQXNCLEksRUFBTTtBQUN4QixhQUFLLEtBQUwsR0FBYSxLQUFLLFlBQUwsQ0FBa0IsS0FBSyxLQUF2QixDQUFiOztBQUVBLGVBQU8sSUFBUDtBQUNILEs7O0FBRUQ7Ozs7OztvQ0FJQSxZLHlCQUFhLEssRUFBTztBQUFBOztBQUNoQixZQUFJLFNBQVMsRUFBYjs7QUFFQSxjQUFNLE9BQU4sQ0FBYyxnQkFBUTtBQUNsQixnQkFBSSxnRUFBSixFQUE2QztBQUN6Qyx5QkFBUyxPQUFPLE1BQVAsQ0FBYyxPQUFLLFlBQUwsQ0FBa0IsS0FBSyxPQUFMLENBQWEsS0FBL0IsQ0FBZCxDQUFUO0FBQ0gsYUFGRCxNQUVPO0FBQ0gsdUJBQU8sSUFBUCxDQUFZLElBQVo7QUFDSDtBQUNKLFNBTkQ7O0FBUUEsZUFBTyxNQUFQO0FBQ0gsSyIsImZpbGUiOiJUZW1wbGF0ZUZsYXR0ZW5QbHVnaW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1RlbXBsYXRlUGx1Z2lufSBmcm9tICcuL1RlbXBsYXRlUGx1Z2luJztcblxuaW1wb3J0IHtUZW1wbGF0ZU5vZGVTdHJpbmdQcm94eX0gZnJvbSAnLi4vbm9kZXMvVGVtcGxhdGVOb2RlU3RyaW5nUHJveHknO1xuXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVGbGF0dGVuUGx1Z2luIGV4dGVuZHMgVGVtcGxhdGVQbHVnaW4ge1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGVDb250ZW50fSBub2RlXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlQ29udGVudH1cbiAgICAgKi9cbiAgICBvblRlbXBsYXRlTm9kZUNvbnRlbnQobm9kZSkge1xuICAgICAgICBub2RlLm5vZGVzID0gdGhpcy5mbGF0dGVuTm9kZXMobm9kZS5ub2Rlcyk7XG5cbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtUZW1wbGF0ZU5vZGVbXX0gbm9kZXNcbiAgICAgKiBAcmV0dXJucyB7VGVtcGxhdGVOb2RlW119XG4gICAgICovXG4gICAgZmxhdHRlbk5vZGVzKG5vZGVzKSB7XG4gICAgICAgIGxldCByZXN1bHQgPSBbXTtcblxuICAgICAgICBub2Rlcy5mb3JFYWNoKG5vZGUgPT4ge1xuICAgICAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBUZW1wbGF0ZU5vZGVTdHJpbmdQcm94eSkge1xuICAgICAgICAgICAgICAgIHJlc3VsdCA9IHJlc3VsdC5jb25jYXQodGhpcy5mbGF0dGVuTm9kZXMobm9kZS5jb250ZW50Lm5vZGVzKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxufVxuIl19

/***/ },
/* 228 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";
	
	/**
	The following batches are equivalent:
	
	var beautify_js = require('js-beautify');
	var beautify_js = require('js-beautify').js;
	var beautify_js = require('js-beautify').js_beautify;
	
	var beautify_css = require('js-beautify').css;
	var beautify_css = require('js-beautify').css_beautify;
	
	var beautify_html = require('js-beautify').html;
	var beautify_html = require('js-beautify').html_beautify;
	
	All methods returned accept two arguments, the source string and an options object.
	**/
	
	function get_beautify(js_beautify, css_beautify, html_beautify) {
	    // the default is js
	    var beautify = function beautify(src, config) {
	        return js_beautify.js_beautify(src, config);
	    };
	
	    // short aliases
	    beautify.js = js_beautify.js_beautify;
	    beautify.css = css_beautify.css_beautify;
	    beautify.html = html_beautify.html_beautify;
	
	    // legacy aliases
	    beautify.js_beautify = js_beautify.js_beautify;
	    beautify.css_beautify = css_beautify.css_beautify;
	    beautify.html_beautify = html_beautify.html_beautify;
	
	    return beautify;
	}
	
	if (true) {
	    // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(229), __webpack_require__(230), __webpack_require__(231)], __WEBPACK_AMD_DEFINE_RESULT__ = function (js_beautify, css_beautify, html_beautify) {
	        return get_beautify(js_beautify, css_beautify, html_beautify);
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else {
	    (function (mod) {
	        var js_beautify = require('./lib/beautify');
	        var css_beautify = require('./lib/beautify-css');
	        var html_beautify = require('./lib/beautify-html');
	
	        mod.exports = get_beautify(js_beautify, css_beautify, html_beautify);
	    })(module);
	}

/***/ },
/* 229 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;"use strict";/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false *//*
	
	  The MIT License (MIT)
	
	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.
	
	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:
	
	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.
	
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.
	
	 JS Beautifier
	---------------
	
	
	  Written by Einar Lielmanis, <einar@jsbeautifier.org>
	      http://jsbeautifier.org/
	
	  Originally converted to javascript by Vital, <vital76@gmail.com>
	  "End braces on own line" added by Chris J. Shull, <chrisjshull@gmail.com>
	  Parsing improvements for brace-less statements by Liam Newman <bitwiseman@gmail.com>
	
	
	  Usage:
	    js_beautify(js_source_text);
	    js_beautify(js_source_text, options);
	
	  The options are:
	    indent_size (default 4)          - indentation size,
	    indent_char (default space)      - character to indent with,
	    preserve_newlines (default true) - whether existing line breaks should be preserved,
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk,
	
	    jslint_happy (default false) - if true, then jslint-stricter mode is enforced.
	
	            jslint_happy        !jslint_happy
	            ---------------------------------
	            function ()         function()
	
	            switch () {         switch() {
	            case 1:               case 1:
	              break;                break;
	            }                   }
	
	    space_after_anon_function (default false) - should the space before an anonymous function's parens be added, "function()" vs "function ()",
	          NOTE: This option is overriden by jslint_happy (i.e. if jslint_happy is true, space_after_anon_function is true by design)
	
	    brace_style (default "collapse") - "collapse-preserve-inline" | "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	
	    space_before_conditional (default true) - should the space before conditional statement be added, "if(true)" vs "if (true)",
	
	    unescape_strings (default false) - should printable characters in strings encoded in \xNN notation be unescaped, "example" vs "\x65\x78\x61\x6d\x70\x6c\x65"
	
	    wrap_line_length (default unlimited) - lines should wrap at next opportunity after this number of characters.
	          NOTE: This is not a hard limit. Lines will continue until a point where a newline would
	                be preserved if it were present.
	
	    end_with_newline (default false)  - end output with a newline
	
	
	    e.g
	
	    js_beautify(js_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t'
	    });
	
	*/// Object.values polyfill found here:
	// http://tokenposts.blogspot.com.au/2012/04/javascript-objectkeys-browser.html
	if(!Object.values){Object.values=function(o){if(o!==Object(o)){throw new TypeError('Object.values called on a non-object');}var k=[],p;for(p in o){if(Object.prototype.hasOwnProperty.call(o,p)){k.push(o[p]);}}return k;};}(function(){function js_beautify(js_source_text,options){var acorn={};(function(exports){/* jshint curly: false */// This section of code is taken from acorn.
	//
	// Acorn was written by Marijn Haverbeke and released under an MIT
	// license. The Unicode regexps (for identifiers and whitespace) were
	// taken from [Esprima](http://esprima.org) by Ariya Hidayat.
	//
	// Git repositories for Acorn are available at
	//
	//     http://marijnhaverbeke.nl/git/acorn
	//     https://github.com/marijnh/acorn.git
	// ## Character categories
	// Big ugly regular expressions that match characters in the
	// whitespace, identifier, and identifier-start categories. These
	// are only applied when a character is found to actually have a
	// code point above 128.
	var nonASCIIwhitespace=/[\u1680\u180e\u2000-\u200a\u202f\u205f\u3000\ufeff]/;// jshint ignore:line
	var nonASCIIidentifierStartChars="ªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԧԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠࢢ-ࢬऄ-हऽॐक़-ॡॱ-ॷॹ-ॿঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-ళవ-హఽౘౙౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൠൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏼᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛰᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤜᥐ-ᥭᥰ-ᥴᦀ-ᦫᧁ-ᧇᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿌ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚗꚠ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞎꞐ-ꞓꞠ-Ɦꟸ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꪀ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ";var nonASCIIidentifierChars="̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ؚؠ-ىٲ-ۓۧ-ۨۻ-ۼܰ-݊ࠀ-ࠔࠛ-ࠣࠥ-ࠧࠩ-࠭ࡀ-ࡗࣤ-ࣾऀ-ःऺ-़ा-ॏ॑-ॗॢ-ॣ०-९ঁ-ঃ়া-ৄেৈৗয়-ৠਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑ੦-ੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢ-ૣ૦-૯ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୟ-ୠ୦-୯ஂா-ூெ-ைொ-்ௗ௦-௯ఁ-ఃె-ైొ-్ౕౖౢ-ౣ౦-౯ಂಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢ-ೣ೦-೯ംഃെ-ൈൗൢ-ൣ൦-൯ංඃ්ා-ුූෘ-ෟෲෳิ-ฺเ-ๅ๐-๙ິ-ູ່-ໍ໐-໙༘༙༠-༩༹༵༷ཁ-ཇཱ-྄྆-྇ྍ-ྗྙ-ྼ࿆က-ဩ၀-၉ၧ-ၭၱ-ၴႂ-ႍႏ-ႝ፝-፟ᜎ-ᜐᜠ-ᜰᝀ-ᝐᝲᝳក-ឲ៝០-៩᠋-᠍᠐-᠙ᤠ-ᤫᤰ-᤻ᥑ-ᥭᦰ-ᧀᧈ-ᧉ᧐-᧙ᨀ-ᨕᨠ-ᩓ᩠-᩿᩼-᪉᪐-᪙ᭆ-ᭋ᭐-᭙᭫-᭳᮰-᮹᯦-᯳ᰀ-ᰢ᱀-᱉ᱛ-ᱽ᳐-᳒ᴀ-ᶾḁ-ἕ‌‍‿⁀⁔⃐-⃥⃜⃡-⃰ⶁ-ⶖⷠ-ⷿ〡-〨゙゚Ꙁ-ꙭꙴ-꙽ꚟ꛰-꛱ꟸ-ꠀ꠆ꠋꠣ-ꠧꢀ-ꢁꢴ-꣄꣐-꣙ꣳ-ꣷ꤀-꤉ꤦ-꤭ꤰ-ꥅꦀ-ꦃ꦳-꧀ꨀ-ꨧꩀ-ꩁꩌ-ꩍ꩐-꩙ꩻꫠ-ꫩꫲ-ꫳꯀ-ꯡ꯬꯭꯰-꯹ﬠ-ﬨ︀-️︠-︦︳︴﹍-﹏０-９＿";var nonASCIIidentifierStart=new RegExp("["+nonASCIIidentifierStartChars+"]");var nonASCIIidentifier=new RegExp("["+nonASCIIidentifierStartChars+nonASCIIidentifierChars+"]");// Whether a single character denotes a newline.
	exports.newline=/[\n\r\u2028\u2029]/;// Matches a whole line break (where CRLF is considered a single
	// line break). Used to count lines.
	// in javascript, these two differ
	// in python they are the same, different methods are called on them
	exports.lineBreak=new RegExp('\r\n|'+exports.newline.source);exports.allLineBreaks=new RegExp(exports.lineBreak.source,'g');// Test whether a given character code starts an identifier.
	exports.isIdentifierStart=function(code){// permit $ (36) and @ (64). @ is used in ES7 decorators.
	if(code<65)return code===36||code===64;// 65 through 91 are uppercase letters.
	if(code<91)return true;// permit _ (95).
	if(code<97)return code===95;// 97 through 123 are lowercase letters.
	if(code<123)return true;return code>=0xaa&&nonASCIIidentifierStart.test(String.fromCharCode(code));};// Test whether a given character is part of an identifier.
	exports.isIdentifierChar=function(code){if(code<48)return code===36;if(code<58)return true;if(code<65)return false;if(code<91)return true;if(code<97)return code===95;if(code<123)return true;return code>=0xaa&&nonASCIIidentifier.test(String.fromCharCode(code));};})(acorn);/* jshint curly: true */function in_array(what,arr){for(var i=0;i<arr.length;i+=1){if(arr[i]===what){return true;}}return false;}function trim(s){return s.replace(/^\s+|\s+$/g,'');}function ltrim(s){return s.replace(/^\s+/g,'');}// function rtrim(s) {
	//     return s.replace(/\s+$/g, '');
	// }
	function sanitizeOperatorPosition(opPosition){opPosition=opPosition||OPERATOR_POSITION.before_newline;var validPositionValues=Object.values(OPERATOR_POSITION);if(!in_array(opPosition,validPositionValues)){throw new Error("Invalid Option Value: The option 'operator_position' must be one of the following values\n"+validPositionValues+"\nYou passed in: '"+opPosition+"'");}return opPosition;}var OPERATOR_POSITION={before_newline:'before-newline',after_newline:'after-newline',preserve_newline:'preserve-newline'};var OPERATOR_POSITION_BEFORE_OR_PRESERVE=[OPERATOR_POSITION.before_newline,OPERATOR_POSITION.preserve_newline];var MODE={BlockStatement:'BlockStatement',// 'BLOCK'
	Statement:'Statement',// 'STATEMENT'
	ObjectLiteral:'ObjectLiteral',// 'OBJECT',
	ArrayLiteral:'ArrayLiteral',//'[EXPRESSION]',
	ForInitializer:'ForInitializer',//'(FOR-EXPRESSION)',
	Conditional:'Conditional',//'(COND-EXPRESSION)',
	Expression:'Expression'//'(EXPRESSION)'
	};function Beautifier(js_source_text,options){"use strict";var output;var tokens=[],token_pos;var Tokenizer;var current_token;var last_type,last_last_text,indent_string;var flags,previous_flags,flag_store;var prefix;var handlers,opt;var baseIndentString='';handlers={'TK_START_EXPR':handle_start_expr,'TK_END_EXPR':handle_end_expr,'TK_START_BLOCK':handle_start_block,'TK_END_BLOCK':handle_end_block,'TK_WORD':handle_word,'TK_RESERVED':handle_word,'TK_SEMICOLON':handle_semicolon,'TK_STRING':handle_string,'TK_EQUALS':handle_equals,'TK_OPERATOR':handle_operator,'TK_COMMA':handle_comma,'TK_BLOCK_COMMENT':handle_block_comment,'TK_COMMENT':handle_comment,'TK_DOT':handle_dot,'TK_UNKNOWN':handle_unknown,'TK_EOF':handle_eof};function create_flags(flags_base,mode){var next_indent_level=0;if(flags_base){next_indent_level=flags_base.indentation_level;if(!output.just_added_newline()&&flags_base.line_indent_level>next_indent_level){next_indent_level=flags_base.line_indent_level;}}var next_flags={mode:mode,parent:flags_base,last_text:flags_base?flags_base.last_text:'',// last token text
	last_word:flags_base?flags_base.last_word:'',// last 'TK_WORD' passed
	declaration_statement:false,declaration_assignment:false,multiline_frame:false,inline_frame:false,if_block:false,else_block:false,do_block:false,do_while:false,import_block:false,in_case_statement:false,// switch(..){ INSIDE HERE }
	in_case:false,// we're on the exact line with "case 0:"
	case_body:false,// the indented case-action block
	indentation_level:next_indent_level,line_indent_level:flags_base?flags_base.line_indent_level:next_indent_level,start_line_index:output.get_line_number(),ternary_depth:0};return next_flags;}// Some interpreters have unexpected results with foo = baz || bar;
	options=options?options:{};opt={};// compatibility
	if(options.braces_on_own_line!==undefined){//graceful handling of deprecated option
	opt.brace_style=options.braces_on_own_line?"expand":"collapse";}opt.brace_style=options.brace_style?options.brace_style:opt.brace_style?opt.brace_style:"collapse";// graceful handling of deprecated option
	if(opt.brace_style==="expand-strict"){opt.brace_style="expand";}opt.indent_size=options.indent_size?parseInt(options.indent_size,10):4;opt.indent_char=options.indent_char?options.indent_char:' ';opt.eol=options.eol?options.eol:'auto';opt.preserve_newlines=options.preserve_newlines===undefined?true:options.preserve_newlines;opt.break_chained_methods=options.break_chained_methods===undefined?false:options.break_chained_methods;opt.max_preserve_newlines=options.max_preserve_newlines===undefined?0:parseInt(options.max_preserve_newlines,10);opt.space_in_paren=options.space_in_paren===undefined?false:options.space_in_paren;opt.space_in_empty_paren=options.space_in_empty_paren===undefined?false:options.space_in_empty_paren;opt.jslint_happy=options.jslint_happy===undefined?false:options.jslint_happy;opt.space_after_anon_function=options.space_after_anon_function===undefined?false:options.space_after_anon_function;opt.keep_array_indentation=options.keep_array_indentation===undefined?false:options.keep_array_indentation;opt.space_before_conditional=options.space_before_conditional===undefined?true:options.space_before_conditional;opt.unescape_strings=options.unescape_strings===undefined?false:options.unescape_strings;opt.wrap_line_length=options.wrap_line_length===undefined?0:parseInt(options.wrap_line_length,10);opt.e4x=options.e4x===undefined?false:options.e4x;opt.end_with_newline=options.end_with_newline===undefined?false:options.end_with_newline;opt.comma_first=options.comma_first===undefined?false:options.comma_first;opt.operator_position=sanitizeOperatorPosition(options.operator_position);// For testing of beautify ignore:start directive
	opt.test_output_raw=options.test_output_raw===undefined?false:options.test_output_raw;// force opt.space_after_anon_function to true if opt.jslint_happy
	if(opt.jslint_happy){opt.space_after_anon_function=true;}if(options.indent_with_tabs){opt.indent_char='\t';opt.indent_size=1;}if(opt.eol==='auto'){opt.eol='\n';if(js_source_text&&acorn.lineBreak.test(js_source_text||'')){opt.eol=js_source_text.match(acorn.lineBreak)[0];}}opt.eol=opt.eol.replace(/\\r/,'\r').replace(/\\n/,'\n');//----------------------------------
	indent_string='';while(opt.indent_size>0){indent_string+=opt.indent_char;opt.indent_size-=1;}var preindent_index=0;if(js_source_text&&js_source_text.length){while(js_source_text.charAt(preindent_index)===' '||js_source_text.charAt(preindent_index)==='\t'){baseIndentString+=js_source_text.charAt(preindent_index);preindent_index+=1;}js_source_text=js_source_text.substring(preindent_index);}last_type='TK_START_BLOCK';// last token type
	last_last_text='';// pre-last token text
	output=new Output(indent_string,baseIndentString);// If testing the ignore directive, start with output disable set to true
	output.raw=opt.test_output_raw;// Stack of parsing/formatting states, including MODE.
	// We tokenize, parse, and output in an almost purely a forward-only stream of token input
	// and formatted output.  This makes the beautifier less accurate than full parsers
	// but also far more tolerant of syntax errors.
	//
	// For example, the default mode is MODE.BlockStatement. If we see a '{' we push a new frame of type
	// MODE.BlockStatement on the the stack, even though it could be object literal.  If we later
	// encounter a ":", we'll switch to to MODE.ObjectLiteral.  If we then see a ";",
	// most full parsers would die, but the beautifier gracefully falls back to
	// MODE.BlockStatement and continues on.
	flag_store=[];set_mode(MODE.BlockStatement);this.beautify=function(){/*jshint onevar:true */var local_token,sweet_code;Tokenizer=new tokenizer(js_source_text,opt,indent_string);tokens=Tokenizer.tokenize();token_pos=0;function get_local_token(){local_token=get_token();return local_token;}while(get_local_token()){for(var i=0;i<local_token.comments_before.length;i++){// The cleanest handling of inline comments is to treat them as though they aren't there.
	// Just continue formatting and the behavior should be logical.
	// Also ignore unknown tokens.  Again, this should result in better behavior.
	handle_token(local_token.comments_before[i]);}handle_token(local_token);last_last_text=flags.last_text;last_type=local_token.type;flags.last_text=local_token.text;token_pos+=1;}sweet_code=output.get_code();if(opt.end_with_newline){sweet_code+='\n';}if(opt.eol!=='\n'){sweet_code=sweet_code.replace(/[\n]/g,opt.eol);}return sweet_code;};function handle_token(local_token){var newlines=local_token.newlines;var keep_whitespace=opt.keep_array_indentation&&is_array(flags.mode);if(keep_whitespace){for(var i=0;i<newlines;i+=1){print_newline(i>0);}}else{if(opt.max_preserve_newlines&&newlines>opt.max_preserve_newlines){newlines=opt.max_preserve_newlines;}if(opt.preserve_newlines){if(local_token.newlines>1){print_newline();for(var j=1;j<newlines;j+=1){print_newline(true);}}}}current_token=local_token;handlers[current_token.type]();}// we could use just string.split, but
	// IE doesn't like returning empty strings
	function split_linebreaks(s){//return s.split(/\x0d\x0a|\x0a/);
	s=s.replace(acorn.allLineBreaks,'\n');var out=[],idx=s.indexOf("\n");while(idx!==-1){out.push(s.substring(0,idx));s=s.substring(idx+1);idx=s.indexOf("\n");}if(s.length){out.push(s);}return out;}var newline_restricted_tokens=['break','continue','return','throw'];function allow_wrap_or_preserved_newline(force_linewrap){force_linewrap=force_linewrap===undefined?false:force_linewrap;// Never wrap the first token on a line
	if(output.just_added_newline()){return;}var shouldPreserveOrForce=opt.preserve_newlines&&current_token.wanted_newline||force_linewrap;var operatorLogicApplies=in_array(flags.last_text,Tokenizer.positionable_operators)||in_array(current_token.text,Tokenizer.positionable_operators);if(operatorLogicApplies){var shouldPrintOperatorNewline=in_array(flags.last_text,Tokenizer.positionable_operators)&&in_array(opt.operator_position,OPERATOR_POSITION_BEFORE_OR_PRESERVE)||in_array(current_token.text,Tokenizer.positionable_operators);shouldPreserveOrForce=shouldPreserveOrForce&&shouldPrintOperatorNewline;}if(shouldPreserveOrForce){print_newline(false,true);}else if(opt.wrap_line_length){if(last_type==='TK_RESERVED'&&in_array(flags.last_text,newline_restricted_tokens)){// These tokens should never have a newline inserted
	// between them and the following expression.
	return;}var proposed_line_length=output.current_line.get_character_count()+current_token.text.length+(output.space_before_token?1:0);if(proposed_line_length>=opt.wrap_line_length){print_newline(false,true);}}}function print_newline(force_newline,preserve_statement_flags){if(!preserve_statement_flags){if(flags.last_text!==';'&&flags.last_text!==','&&flags.last_text!=='='&&last_type!=='TK_OPERATOR'){while(flags.mode===MODE.Statement&&!flags.if_block&&!flags.do_block){restore_mode();}}}if(output.add_new_line(force_newline)){flags.multiline_frame=true;}}function print_token_line_indentation(){if(output.just_added_newline()){if(opt.keep_array_indentation&&is_array(flags.mode)&&current_token.wanted_newline){output.current_line.push(current_token.whitespace_before);output.space_before_token=false;}else if(output.set_indent(flags.indentation_level)){flags.line_indent_level=flags.indentation_level;}}}function print_token(printable_token){if(output.raw){output.add_raw_token(current_token);return;}if(opt.comma_first&&last_type==='TK_COMMA'&&output.just_added_newline()){if(output.previous_line.last()===','){var popped=output.previous_line.pop();// if the comma was already at the start of the line,
	// pull back onto that line and reprint the indentation
	if(output.previous_line.is_empty()){output.previous_line.push(popped);output.trim(true);output.current_line.pop();output.trim();}// add the comma in front of the next token
	print_token_line_indentation();output.add_token(',');output.space_before_token=true;}}printable_token=printable_token||current_token.text;print_token_line_indentation();output.add_token(printable_token);}function indent(){flags.indentation_level+=1;}function deindent(){if(flags.indentation_level>0&&(!flags.parent||flags.indentation_level>flags.parent.indentation_level)){flags.indentation_level-=1;}}function set_mode(mode){if(flags){flag_store.push(flags);previous_flags=flags;}else{previous_flags=create_flags(null,mode);}flags=create_flags(previous_flags,mode);}function is_array(mode){return mode===MODE.ArrayLiteral;}function is_expression(mode){return in_array(mode,[MODE.Expression,MODE.ForInitializer,MODE.Conditional]);}function restore_mode(){if(flag_store.length>0){previous_flags=flags;flags=flag_store.pop();if(previous_flags.mode===MODE.Statement){output.remove_redundant_indentation(previous_flags);}}}function start_of_object_property(){return flags.parent.mode===MODE.ObjectLiteral&&flags.mode===MODE.Statement&&(flags.last_text===':'&&flags.ternary_depth===0||last_type==='TK_RESERVED'&&in_array(flags.last_text,['get','set']));}function start_of_statement(){if(last_type==='TK_RESERVED'&&in_array(flags.last_text,['var','let','const'])&&current_token.type==='TK_WORD'||last_type==='TK_RESERVED'&&flags.last_text==='do'||last_type==='TK_RESERVED'&&in_array(flags.last_text,['return','throw'])&&!current_token.wanted_newline||last_type==='TK_RESERVED'&&flags.last_text==='else'&&!(current_token.type==='TK_RESERVED'&&current_token.text==='if')||last_type==='TK_END_EXPR'&&(previous_flags.mode===MODE.ForInitializer||previous_flags.mode===MODE.Conditional)||last_type==='TK_WORD'&&flags.mode===MODE.BlockStatement&&!flags.in_case&&!(current_token.text==='--'||current_token.text==='++')&&last_last_text!=='function'&&current_token.type!=='TK_WORD'&&current_token.type!=='TK_RESERVED'||flags.mode===MODE.ObjectLiteral&&(flags.last_text===':'&&flags.ternary_depth===0||last_type==='TK_RESERVED'&&in_array(flags.last_text,['get','set']))){set_mode(MODE.Statement);indent();if(last_type==='TK_RESERVED'&&in_array(flags.last_text,['var','let','const'])&&current_token.type==='TK_WORD'){flags.declaration_statement=true;}// Issue #276:
	// If starting a new statement with [if, for, while, do], push to a new line.
	// if (a) if (b) if(c) d(); else e(); else f();
	if(!start_of_object_property()){allow_wrap_or_preserved_newline(current_token.type==='TK_RESERVED'&&in_array(current_token.text,['do','for','if','while']));}return true;}return false;}function all_lines_start_with(lines,c){for(var i=0;i<lines.length;i++){var line=trim(lines[i]);if(line.charAt(0)!==c){return false;}}return true;}function each_line_matches_indent(lines,indent){var i=0,len=lines.length,line;for(;i<len;i++){line=lines[i];// allow empty lines to pass through
	if(line&&line.indexOf(indent)!==0){return false;}}return true;}function is_special_word(word){return in_array(word,['case','return','do','if','throw','else']);}function get_token(offset){var index=token_pos+(offset||0);return index<0||index>=tokens.length?null:tokens[index];}function handle_start_expr(){if(start_of_statement()){// The conditional starts the statement if appropriate.
	}var next_mode=MODE.Expression;if(current_token.text==='['){if(last_type==='TK_WORD'||flags.last_text===')'){// this is array index specifier, break immediately
	// a[x], fn()[x]
	if(last_type==='TK_RESERVED'&&in_array(flags.last_text,Tokenizer.line_starters)){output.space_before_token=true;}set_mode(next_mode);print_token();indent();if(opt.space_in_paren){output.space_before_token=true;}return;}next_mode=MODE.ArrayLiteral;if(is_array(flags.mode)){if(flags.last_text==='['||flags.last_text===','&&(last_last_text===']'||last_last_text==='}')){// ], [ goes to new line
	// }, [ goes to new line
	if(!opt.keep_array_indentation){print_newline();}}}}else{if(last_type==='TK_RESERVED'&&flags.last_text==='for'){next_mode=MODE.ForInitializer;}else if(last_type==='TK_RESERVED'&&in_array(flags.last_text,['if','while'])){next_mode=MODE.Conditional;}else{// next_mode = MODE.Expression;
	}}if(flags.last_text===';'||last_type==='TK_START_BLOCK'){print_newline();}else if(last_type==='TK_END_EXPR'||last_type==='TK_START_EXPR'||last_type==='TK_END_BLOCK'||flags.last_text==='.'){// TODO: Consider whether forcing this is required.  Review failing tests when removed.
	allow_wrap_or_preserved_newline(current_token.wanted_newline);// do nothing on (( and )( and ][ and ]( and .(
	}else if(!(last_type==='TK_RESERVED'&&current_token.text==='(')&&last_type!=='TK_WORD'&&last_type!=='TK_OPERATOR'){output.space_before_token=true;}else if(last_type==='TK_RESERVED'&&(flags.last_word==='function'||flags.last_word==='typeof')||flags.last_text==='*'&&(in_array(last_last_text,['function','yield'])||flags.mode===MODE.ObjectLiteral&&in_array(last_last_text,['{',',']))){// function() vs function ()
	// yield*() vs yield* ()
	// function*() vs function* ()
	if(opt.space_after_anon_function){output.space_before_token=true;}}else if(last_type==='TK_RESERVED'&&(in_array(flags.last_text,Tokenizer.line_starters)||flags.last_text==='catch')){if(opt.space_before_conditional){output.space_before_token=true;}}// Should be a space between await and an IIFE
	if(current_token.text==='('&&last_type==='TK_RESERVED'&&flags.last_word==='await'){output.space_before_token=true;}// Support of this kind of newline preservation.
	// a = (b &&
	//     (c || d));
	if(current_token.text==='('){if(last_type==='TK_EQUALS'||last_type==='TK_OPERATOR'){if(!start_of_object_property()){allow_wrap_or_preserved_newline();}}}// Support preserving wrapped arrow function expressions
	// a.b('c',
	//     () => d.e
	// )
	if(current_token.text==='('&&last_type!=='TK_WORD'&&last_type!=='TK_RESERVED'){allow_wrap_or_preserved_newline();}set_mode(next_mode);print_token();if(opt.space_in_paren){output.space_before_token=true;}// In all cases, if we newline while inside an expression it should be indented.
	indent();}function handle_end_expr(){// statements inside expressions are not valid syntax, but...
	// statements must all be closed when their container closes
	while(flags.mode===MODE.Statement){restore_mode();}if(flags.multiline_frame){allow_wrap_or_preserved_newline(current_token.text===']'&&is_array(flags.mode)&&!opt.keep_array_indentation);}if(opt.space_in_paren){if(last_type==='TK_START_EXPR'&&!opt.space_in_empty_paren){// () [] no inner space in empty parens like these, ever, ref #320
	output.trim();output.space_before_token=false;}else{output.space_before_token=true;}}if(current_token.text===']'&&opt.keep_array_indentation){print_token();restore_mode();}else{restore_mode();print_token();}output.remove_redundant_indentation(previous_flags);// do {} while () // no statement required after
	if(flags.do_while&&previous_flags.mode===MODE.Conditional){previous_flags.mode=MODE.Expression;flags.do_block=false;flags.do_while=false;}}function handle_start_block(){// Check if this is should be treated as a ObjectLiteral
	var next_token=get_token(1);var second_token=get_token(2);if(second_token&&(in_array(second_token.text,[':',','])&&in_array(next_token.type,['TK_STRING','TK_WORD','TK_RESERVED'])||in_array(next_token.text,['get','set'])&&in_array(second_token.type,['TK_WORD','TK_RESERVED']))){// We don't support TypeScript,but we didn't break it for a very long time.
	// We'll try to keep not breaking it.
	if(!in_array(last_last_text,['class','interface'])){set_mode(MODE.ObjectLiteral);}else{set_mode(MODE.BlockStatement);}}else if(last_type==='TK_OPERATOR'&&flags.last_text==='=>'){// arrow function: (param1, paramN) => { statements }
	set_mode(MODE.BlockStatement);}else if(in_array(last_type,['TK_EQUALS','TK_START_EXPR','TK_COMMA','TK_OPERATOR'])||last_type==='TK_RESERVED'&&in_array(flags.last_text,['return','throw','import','default'])){// Detecting shorthand function syntax is difficult by scanning forward,
	//     so check the surrounding context.
	// If the block is being returned, imported, export default, passed as arg,
	//     assigned with = or assigned in a nested object, treat as an ObjectLiteral.
	set_mode(MODE.ObjectLiteral);}else{set_mode(MODE.BlockStatement);}var empty_braces=!next_token.comments_before.length&&next_token.text==='}';var empty_anonymous_function=empty_braces&&flags.last_word==='function'&&last_type==='TK_END_EXPR';if(opt.brace_style==="expand"||opt.brace_style==="none"&&current_token.wanted_newline){if(last_type!=='TK_OPERATOR'&&(empty_anonymous_function||last_type==='TK_EQUALS'||last_type==='TK_RESERVED'&&is_special_word(flags.last_text)&&flags.last_text!=='else')){output.space_before_token=true;}else{print_newline(false,true);}}else{// collapse
	if(opt.brace_style==='collapse-preserve-inline'){// search forward for a newline wanted inside this block
	var index=0;var check_token=null;flags.inline_frame=true;do{index+=1;check_token=get_token(index);if(check_token.wanted_newline){flags.inline_frame=false;break;}}while(check_token.type!=='TK_EOF'&&!(check_token.type==='TK_END_BLOCK'&&check_token.opened===current_token));}if(is_array(previous_flags.mode)&&(last_type==='TK_START_EXPR'||last_type==='TK_COMMA')){// if we're preserving inline,
	// allow newline between comma and next brace.
	if(last_type==='TK_COMMA'||opt.space_in_paren){output.space_before_token=true;}if(opt.brace_style==='collapse-preserve-inline'&&(last_type==='TK_COMMA'||last_type==='TK_START_EXPR'&&flags.inline_frame)){allow_wrap_or_preserved_newline();previous_flags.multiline_frame=previous_flags.multiline_frame||flags.multiline_frame;flags.multiline_frame=false;}}else if(last_type!=='TK_OPERATOR'&&last_type!=='TK_START_EXPR'){if(last_type==='TK_START_BLOCK'){print_newline();}else{output.space_before_token=true;}}}print_token();indent();}function handle_end_block(){// statements must all be closed when their container closes
	while(flags.mode===MODE.Statement){restore_mode();}var empty_braces=last_type==='TK_START_BLOCK';if(opt.brace_style==="expand"){if(!empty_braces){print_newline();}}else{// skip {}
	if(!empty_braces){if(flags.inline_frame){output.space_before_token=true;}else if(is_array(flags.mode)&&opt.keep_array_indentation){// we REALLY need a newline here, but newliner would skip that
	opt.keep_array_indentation=false;print_newline();opt.keep_array_indentation=true;}else{print_newline();}}}restore_mode();print_token();}function handle_word(){if(current_token.type==='TK_RESERVED'){if(in_array(current_token.text,['set','get'])&&flags.mode!==MODE.ObjectLiteral){current_token.type='TK_WORD';}else if(in_array(current_token.text,['as','from'])&&!flags.import_block){current_token.type='TK_WORD';}else if(flags.mode===MODE.ObjectLiteral){var next_token=get_token(1);if(next_token.text===':'){current_token.type='TK_WORD';}}}if(start_of_statement()){// The conditional starts the statement if appropriate.
	}else if(current_token.wanted_newline&&!is_expression(flags.mode)&&(last_type!=='TK_OPERATOR'||flags.last_text==='--'||flags.last_text==='++')&&last_type!=='TK_EQUALS'&&(opt.preserve_newlines||!(last_type==='TK_RESERVED'&&in_array(flags.last_text,['var','let','const','set','get'])))){print_newline();}if(flags.do_block&&!flags.do_while){if(current_token.type==='TK_RESERVED'&&current_token.text==='while'){// do {} ## while ()
	output.space_before_token=true;print_token();output.space_before_token=true;flags.do_while=true;return;}else{// do {} should always have while as the next word.
	// if we don't see the expected while, recover
	print_newline();flags.do_block=false;}}// if may be followed by else, or not
	// Bare/inline ifs are tricky
	// Need to unwind the modes correctly: if (a) if (b) c(); else d(); else e();
	if(flags.if_block){if(!flags.else_block&&current_token.type==='TK_RESERVED'&&current_token.text==='else'){flags.else_block=true;}else{while(flags.mode===MODE.Statement){restore_mode();}flags.if_block=false;flags.else_block=false;}}if(current_token.type==='TK_RESERVED'&&(current_token.text==='case'||current_token.text==='default'&&flags.in_case_statement)){print_newline();if(flags.case_body||opt.jslint_happy){// switch cases following one another
	deindent();flags.case_body=false;}print_token();flags.in_case=true;flags.in_case_statement=true;return;}if(current_token.type==='TK_RESERVED'&&current_token.text==='function'){if(in_array(flags.last_text,['}',';'])||output.just_added_newline()&&!in_array(flags.last_text,['[','{',':','=',','])){// make sure there is a nice clean space of at least one blank line
	// before a new function definition
	if(!output.just_added_blankline()&&!current_token.comments_before.length){print_newline();print_newline(true);}}if(last_type==='TK_RESERVED'||last_type==='TK_WORD'){if(last_type==='TK_RESERVED'&&in_array(flags.last_text,['get','set','new','return','export','async'])){output.space_before_token=true;}else if(last_type==='TK_RESERVED'&&flags.last_text==='default'&&last_last_text==='export'){output.space_before_token=true;}else{print_newline();}}else if(last_type==='TK_OPERATOR'||flags.last_text==='='){// foo = function
	output.space_before_token=true;}else if(!flags.multiline_frame&&(is_expression(flags.mode)||is_array(flags.mode))){// (function
	}else{print_newline();}}if(last_type==='TK_COMMA'||last_type==='TK_START_EXPR'||last_type==='TK_EQUALS'||last_type==='TK_OPERATOR'){if(!start_of_object_property()){allow_wrap_or_preserved_newline();}}if(current_token.type==='TK_RESERVED'&&in_array(current_token.text,['function','get','set'])){print_token();flags.last_word=current_token.text;return;}prefix='NONE';if(last_type==='TK_END_BLOCK'){if(!(current_token.type==='TK_RESERVED'&&in_array(current_token.text,['else','catch','finally','from']))){prefix='NEWLINE';}else{if(opt.brace_style==="expand"||opt.brace_style==="end-expand"||opt.brace_style==="none"&&current_token.wanted_newline){prefix='NEWLINE';}else{prefix='SPACE';output.space_before_token=true;}}}else if(last_type==='TK_SEMICOLON'&&flags.mode===MODE.BlockStatement){// TODO: Should this be for STATEMENT as well?
	prefix='NEWLINE';}else if(last_type==='TK_SEMICOLON'&&is_expression(flags.mode)){prefix='SPACE';}else if(last_type==='TK_STRING'){prefix='NEWLINE';}else if(last_type==='TK_RESERVED'||last_type==='TK_WORD'||flags.last_text==='*'&&(in_array(last_last_text,['function','yield'])||flags.mode===MODE.ObjectLiteral&&in_array(last_last_text,['{',',']))){prefix='SPACE';}else if(last_type==='TK_START_BLOCK'){if(flags.inline_frame){prefix='SPACE';}else{prefix='NEWLINE';}}else if(last_type==='TK_END_EXPR'){output.space_before_token=true;prefix='NEWLINE';}if(current_token.type==='TK_RESERVED'&&in_array(current_token.text,Tokenizer.line_starters)&&flags.last_text!==')'){if(flags.inline_frame||flags.last_text==='else'||flags.last_text==='export'){prefix='SPACE';}else{prefix='NEWLINE';}}if(current_token.type==='TK_RESERVED'&&in_array(current_token.text,['else','catch','finally'])){if(!(last_type==='TK_END_BLOCK'&&previous_flags.mode===MODE.BlockStatement)||opt.brace_style==="expand"||opt.brace_style==="end-expand"||opt.brace_style==="none"&&current_token.wanted_newline){print_newline();}else{output.trim(true);var line=output.current_line;// If we trimmed and there's something other than a close block before us
	// put a newline back in.  Handles '} // comment' scenario.
	if(line.last()!=='}'){print_newline();}output.space_before_token=true;}}else if(prefix==='NEWLINE'){if(last_type==='TK_RESERVED'&&is_special_word(flags.last_text)){// no newline between 'return nnn'
	output.space_before_token=true;}else if(last_type!=='TK_END_EXPR'){if((last_type!=='TK_START_EXPR'||!(current_token.type==='TK_RESERVED'&&in_array(current_token.text,['var','let','const'])))&&flags.last_text!==':'){// no need to force newline on 'var': for (var x = 0...)
	if(current_token.type==='TK_RESERVED'&&current_token.text==='if'&&flags.last_text==='else'){// no newline for } else if {
	output.space_before_token=true;}else{print_newline();}}}else if(current_token.type==='TK_RESERVED'&&in_array(current_token.text,Tokenizer.line_starters)&&flags.last_text!==')'){print_newline();}}else if(flags.multiline_frame&&is_array(flags.mode)&&flags.last_text===','&&last_last_text==='}'){print_newline();// }, in lists get a newline treatment
	}else if(prefix==='SPACE'){output.space_before_token=true;}print_token();flags.last_word=current_token.text;if(current_token.type==='TK_RESERVED'){if(current_token.text==='do'){flags.do_block=true;}else if(current_token.text==='if'){flags.if_block=true;}else if(current_token.text==='import'){flags.import_block=true;}else if(flags.import_block&&current_token.type==='TK_RESERVED'&&current_token.text==='from'){flags.import_block=false;}}}function handle_semicolon(){if(start_of_statement()){// The conditional starts the statement if appropriate.
	// Semicolon can be the start (and end) of a statement
	output.space_before_token=false;}while(flags.mode===MODE.Statement&&!flags.if_block&&!flags.do_block){restore_mode();}// hacky but effective for the moment
	if(flags.import_block){flags.import_block=false;}print_token();}function handle_string(){if(start_of_statement()){// The conditional starts the statement if appropriate.
	// One difference - strings want at least a space before
	output.space_before_token=true;}else if(last_type==='TK_RESERVED'||last_type==='TK_WORD'||flags.inline_frame){output.space_before_token=true;}else if(last_type==='TK_COMMA'||last_type==='TK_START_EXPR'||last_type==='TK_EQUALS'||last_type==='TK_OPERATOR'){if(!start_of_object_property()){allow_wrap_or_preserved_newline();}}else{print_newline();}print_token();}function handle_equals(){if(start_of_statement()){// The conditional starts the statement if appropriate.
	}if(flags.declaration_statement){// just got an '=' in a var-line, different formatting/line-breaking, etc will now be done
	flags.declaration_assignment=true;}output.space_before_token=true;print_token();output.space_before_token=true;}function handle_comma(){print_token();output.space_before_token=true;if(flags.declaration_statement){if(is_expression(flags.parent.mode)){// do not break on comma, for(var a = 1, b = 2)
	flags.declaration_assignment=false;}if(flags.declaration_assignment){flags.declaration_assignment=false;print_newline(false,true);}else if(opt.comma_first){// for comma-first, we want to allow a newline before the comma
	// to turn into a newline after the comma, which we will fixup later
	allow_wrap_or_preserved_newline();}}else if(flags.mode===MODE.ObjectLiteral||flags.mode===MODE.Statement&&flags.parent.mode===MODE.ObjectLiteral){if(flags.mode===MODE.Statement){restore_mode();}if(!flags.inline_frame){print_newline();}}else if(opt.comma_first){// EXPR or DO_BLOCK
	// for comma-first, we want to allow a newline before the comma
	// to turn into a newline after the comma, which we will fixup later
	allow_wrap_or_preserved_newline();}}function handle_operator(){if(start_of_statement()){// The conditional starts the statement if appropriate.
	}if(last_type==='TK_RESERVED'&&is_special_word(flags.last_text)){// "return" had a special handling in TK_WORD. Now we need to return the favor
	output.space_before_token=true;print_token();return;}// hack for actionscript's import .*;
	if(current_token.text==='*'&&last_type==='TK_DOT'){print_token();return;}if(current_token.text==='::'){// no spaces around exotic namespacing syntax operator
	print_token();return;}// Allow line wrapping between operators when operator_position is
	//   set to before or preserve
	if(last_type==='TK_OPERATOR'&&in_array(opt.operator_position,OPERATOR_POSITION_BEFORE_OR_PRESERVE)){allow_wrap_or_preserved_newline();}if(current_token.text===':'&&flags.in_case){flags.case_body=true;indent();print_token();print_newline();flags.in_case=false;return;}var space_before=true;var space_after=true;var in_ternary=false;var isGeneratorAsterisk=current_token.text==='*'&&(last_type==='TK_RESERVED'&&in_array(flags.last_text,['function','yield'])||flags.mode===MODE.ObjectLiteral&&in_array(last_type,['TK_START_BLOCK','TK_COMMA']));var isUnary=in_array(current_token.text,['-','+'])&&(in_array(last_type,['TK_START_BLOCK','TK_START_EXPR','TK_EQUALS','TK_OPERATOR'])||in_array(flags.last_text,Tokenizer.line_starters)||flags.last_text===',');if(current_token.text===':'){if(flags.ternary_depth===0){// Colon is invalid javascript outside of ternary and object, but do our best to guess what was meant.
	space_before=false;}else{flags.ternary_depth-=1;in_ternary=true;}}else if(current_token.text==='?'){flags.ternary_depth+=1;}// let's handle the operator_position option prior to any conflicting logic
	if(!isUnary&&!isGeneratorAsterisk&&opt.preserve_newlines&&in_array(current_token.text,Tokenizer.positionable_operators)){var isColon=current_token.text===':';var isTernaryColon=isColon&&in_ternary;var isOtherColon=isColon&&!in_ternary;switch(opt.operator_position){case OPERATOR_POSITION.before_newline:// if the current token is : and it's not a ternary statement then we set space_before to false
	output.space_before_token=!isOtherColon;print_token();if(!isColon||isTernaryColon){allow_wrap_or_preserved_newline();}output.space_before_token=true;return;case OPERATOR_POSITION.after_newline:// if the current token is anything but colon, or (via deduction) it's a colon and in a ternary statement,
	//   then print a newline.
	output.space_before_token=true;if(!isColon||isTernaryColon){if(get_token(1).wanted_newline){print_newline(false,true);}else{allow_wrap_or_preserved_newline();}}else{output.space_before_token=false;}print_token();output.space_before_token=true;return;case OPERATOR_POSITION.preserve_newline:if(!isOtherColon){allow_wrap_or_preserved_newline();}// if we just added a newline, or the current token is : and it's not a ternary statement,
	//   then we set space_before to false
	space_before=!(output.just_added_newline()||isOtherColon);output.space_before_token=space_before;print_token();output.space_before_token=true;return;}}if(in_array(current_token.text,['--','++','!','~'])||isUnary){// unary operators (and binary +/- pretending to be unary) special cases
	space_before=false;space_after=false;// http://www.ecma-international.org/ecma-262/5.1/#sec-7.9.1
	// if there is a newline between -- or ++ and anything else we should preserve it.
	if(current_token.wanted_newline&&(current_token.text==='--'||current_token.text==='++')){print_newline(false,true);}if(flags.last_text===';'&&is_expression(flags.mode)){// for (;; ++i)
	//        ^^^
	space_before=true;}if(last_type==='TK_RESERVED'){space_before=true;}else if(last_type==='TK_END_EXPR'){space_before=!(flags.last_text===']'&&(current_token.text==='--'||current_token.text==='++'));}else if(last_type==='TK_OPERATOR'){// a++ + ++b;
	// a - -b
	space_before=in_array(current_token.text,['--','-','++','+'])&&in_array(flags.last_text,['--','-','++','+']);// + and - are not unary when preceeded by -- or ++ operator
	// a-- + b
	// a * +b
	// a - -b
	if(in_array(current_token.text,['+','-'])&&in_array(flags.last_text,['--','++'])){space_after=true;}}if((flags.mode===MODE.BlockStatement&&!flags.inline_frame||flags.mode===MODE.Statement)&&(flags.last_text==='{'||flags.last_text===';')){// { foo; --i }
	// foo(); --bar;
	print_newline();}}else if(isGeneratorAsterisk){allow_wrap_or_preserved_newline();space_before=false;space_after=false;}output.space_before_token=output.space_before_token||space_before;print_token();output.space_before_token=space_after;}function handle_block_comment(){if(output.raw){output.add_raw_token(current_token);if(current_token.directives&&current_token.directives.preserve==='end'){// If we're testing the raw output behavior, do not allow a directive to turn it off.
	output.raw=opt.test_output_raw;}return;}if(current_token.directives){print_newline(false,true);print_token();if(current_token.directives.preserve==='start'){output.raw=true;}print_newline(false,true);return;}// inline block
	if(!acorn.newline.test(current_token.text)&&!current_token.wanted_newline){output.space_before_token=true;print_token();output.space_before_token=true;return;}var lines=split_linebreaks(current_token.text);var j;// iterator for this case
	var javadoc=false;var starless=false;var lastIndent=current_token.whitespace_before;var lastIndentLength=lastIndent.length;// block comment starts with a new line
	print_newline(false,true);if(lines.length>1){javadoc=all_lines_start_with(lines.slice(1),'*');starless=each_line_matches_indent(lines.slice(1),lastIndent);}// first line always indented
	print_token(lines[0]);for(j=1;j<lines.length;j++){print_newline(false,true);if(javadoc){// javadoc: reformat and re-indent
	print_token(' '+ltrim(lines[j]));}else if(starless&&lines[j].length>lastIndentLength){// starless: re-indent non-empty content, avoiding trim
	print_token(lines[j].substring(lastIndentLength));}else{// normal comments output raw
	output.add_token(lines[j]);}}// for comments of more than one line, make sure there's a new line after
	print_newline(false,true);}function handle_comment(){if(current_token.wanted_newline){print_newline(false,true);}else{output.trim(true);}output.space_before_token=true;print_token();print_newline(false,true);}function handle_dot(){if(start_of_statement()){// The conditional starts the statement if appropriate.
	}if(last_type==='TK_RESERVED'&&is_special_word(flags.last_text)){output.space_before_token=true;}else{// allow preserved newlines before dots in general
	// force newlines on dots after close paren when break_chained - for bar().baz()
	allow_wrap_or_preserved_newline(flags.last_text===')'&&opt.break_chained_methods);}print_token();}function handle_unknown(){print_token();if(current_token.text[current_token.text.length-1]==='\n'){print_newline();}}function handle_eof(){// Unwind any open statements
	while(flags.mode===MODE.Statement){restore_mode();}}}function OutputLine(parent){var _character_count=0;// use indent_count as a marker for lines that have preserved indentation
	var _indent_count=-1;var _items=[];var _empty=true;this.set_indent=function(level){_character_count=parent.baseIndentLength+level*parent.indent_length;_indent_count=level;};this.get_character_count=function(){return _character_count;};this.is_empty=function(){return _empty;};this.last=function(){if(!this._empty){return _items[_items.length-1];}else{return null;}};this.push=function(input){_items.push(input);_character_count+=input.length;_empty=false;};this.pop=function(){var item=null;if(!_empty){item=_items.pop();_character_count-=item.length;_empty=_items.length===0;}return item;};this.remove_indent=function(){if(_indent_count>0){_indent_count-=1;_character_count-=parent.indent_length;}};this.trim=function(){while(this.last()===' '){_items.pop();_character_count-=1;}_empty=_items.length===0;};this.toString=function(){var result='';if(!this._empty){if(_indent_count>=0){result=parent.indent_cache[_indent_count];}result+=_items.join('');}return result;};}function Output(indent_string,baseIndentString){baseIndentString=baseIndentString||'';this.indent_cache=[baseIndentString];this.baseIndentLength=baseIndentString.length;this.indent_length=indent_string.length;this.raw=false;var lines=[];this.baseIndentString=baseIndentString;this.indent_string=indent_string;this.previous_line=null;this.current_line=null;this.space_before_token=false;this.add_outputline=function(){this.previous_line=this.current_line;this.current_line=new OutputLine(this);lines.push(this.current_line);};// initialize
	this.add_outputline();this.get_line_number=function(){return lines.length;};// Using object instead of string to allow for later expansion of info about each line
	this.add_new_line=function(force_newline){if(this.get_line_number()===1&&this.just_added_newline()){return false;// no newline on start of file
	}if(force_newline||!this.just_added_newline()){if(!this.raw){this.add_outputline();}return true;}return false;};this.get_code=function(){var sweet_code=lines.join('\n').replace(/[\r\n\t ]+$/,'');return sweet_code;};this.set_indent=function(level){// Never indent your first output indent at the start of the file
	if(lines.length>1){while(level>=this.indent_cache.length){this.indent_cache.push(this.indent_cache[this.indent_cache.length-1]+this.indent_string);}this.current_line.set_indent(level);return true;}this.current_line.set_indent(0);return false;};this.add_raw_token=function(token){for(var x=0;x<token.newlines;x++){this.add_outputline();}this.current_line.push(token.whitespace_before);this.current_line.push(token.text);this.space_before_token=false;};this.add_token=function(printable_token){this.add_space_before_token();this.current_line.push(printable_token);};this.add_space_before_token=function(){if(this.space_before_token&&!this.just_added_newline()){this.current_line.push(' ');}this.space_before_token=false;};this.remove_redundant_indentation=function(frame){// This implementation is effective but has some issues:
	//     - can cause line wrap to happen too soon due to indent removal
	//           after wrap points are calculated
	// These issues are minor compared to ugly indentation.
	if(frame.multiline_frame||frame.mode===MODE.ForInitializer||frame.mode===MODE.Conditional){return;}// remove one indent from each line inside this section
	var index=frame.start_line_index;var output_length=lines.length;while(index<output_length){lines[index].remove_indent();index++;}};this.trim=function(eat_newlines){eat_newlines=eat_newlines===undefined?false:eat_newlines;this.current_line.trim(indent_string,baseIndentString);while(eat_newlines&&lines.length>1&&this.current_line.is_empty()){lines.pop();this.current_line=lines[lines.length-1];this.current_line.trim();}this.previous_line=lines.length>1?lines[lines.length-2]:null;};this.just_added_newline=function(){return this.current_line.is_empty();};this.just_added_blankline=function(){if(this.just_added_newline()){if(lines.length===1){return true;// start of the file and newline = blank
	}var line=lines[lines.length-2];return line.is_empty();}return false;};}var InputScanner=function InputScanner(input){var _input=input;var _input_length=_input.length;var _position=0;this.back=function(){_position-=1;};this.hasNext=function(){return _position<_input_length;};this.next=function(){var val=null;if(this.hasNext()){val=_input.charAt(_position);_position+=1;}return val;};this.peek=function(index){var val=null;index=index||0;index+=_position;if(index>=0&&index<_input_length){val=_input.charAt(index);}return val;};this.peekCharCode=function(index){var val=0;index=index||0;index+=_position;if(index>=0&&index<_input_length){val=_input.charCodeAt(index);}return val;};this.test=function(pattern,index){index=index||0;pattern.lastIndex=_position+index;return pattern.test(_input);};this.testChar=function(pattern,index){var val=this.peek(index);return val!==null&&pattern.test(val);};this.match=function(pattern){pattern.lastIndex=_position;var pattern_match=pattern.exec(_input);if(pattern_match&&pattern_match.index===_position){_position+=pattern_match[0].length;}else{pattern_match=null;}return pattern_match;};};var Token=function Token(type,text,newlines,whitespace_before,parent){this.type=type;this.text=text;this.comments_before=[];this.newlines=newlines||0;this.wanted_newline=newlines>0;this.whitespace_before=whitespace_before||'';this.parent=parent||null;this.opened=null;this.directives=null;};function tokenizer(input_string,opts){var whitespace="\n\r\t ".split('');var digit=/[0-9]/;var digit_bin=/[01]/;var digit_oct=/[01234567]/;var digit_hex=/[0123456789abcdefABCDEF]/;this.positionable_operators='!= !== % & && * ** + - / : < << <= == === > >= >> >>> ? ^ | ||'.split(' ');var punct=this.positionable_operators.concat(// non-positionable operators - these do not follow operator position settings
	'! %= &= *= **= ++ += , -- -= /= :: <<= = => >>= >>>= ^= |= ~'.split(' '));// words which should always start on new line.
	this.line_starters='continue,try,throw,return,var,let,const,if,switch,case,default,for,while,break,function,import,export'.split(',');var reserved_words=this.line_starters.concat(['do','in','else','get','set','new','catch','finally','typeof','yield','async','await','from','as']);//  /* ... */ comment ends with nearest */ or end of file
	var block_comment_pattern=/([\s\S]*?)((?:\*\/)|$)/g;// comment ends just before nearest linefeed or end of file
	var comment_pattern=/([^\n\r\u2028\u2029]*)/g;var directives_block_pattern=/\/\* beautify( \w+[:]\w+)+ \*\//g;var directive_pattern=/ (\w+)[:](\w+)/g;var directives_end_ignore_pattern=/([\s\S]*?)((?:\/\*\sbeautify\signore:end\s\*\/)|$)/g;var template_pattern=/((<\?php|<\?=)[\s\S]*?\?>)|(<%[\s\S]*?%>)/g;var n_newlines,whitespace_before_token,in_html_comment,tokens;var input;this.tokenize=function(){input=new InputScanner(input_string);in_html_comment=false;tokens=[];var next,last;var token_values;var open=null;var open_stack=[];var comments=[];while(!(last&&last.type==='TK_EOF')){token_values=tokenize_next();next=new Token(token_values[1],token_values[0],n_newlines,whitespace_before_token);while(next.type==='TK_COMMENT'||next.type==='TK_BLOCK_COMMENT'||next.type==='TK_UNKNOWN'){if(next.type==='TK_BLOCK_COMMENT'){next.directives=token_values[2];}comments.push(next);token_values=tokenize_next();next=new Token(token_values[1],token_values[0],n_newlines,whitespace_before_token);}if(comments.length){next.comments_before=comments;comments=[];}if(next.type==='TK_START_BLOCK'||next.type==='TK_START_EXPR'){next.parent=last;open_stack.push(open);open=next;}else if((next.type==='TK_END_BLOCK'||next.type==='TK_END_EXPR')&&open&&(next.text===']'&&open.text==='['||next.text===')'&&open.text==='('||next.text==='}'&&open.text==='{')){next.parent=open.parent;next.opened=open;open=open_stack.pop();}tokens.push(next);last=next;}return tokens;};function get_directives(text){if(!text.match(directives_block_pattern)){return null;}var directives={};directive_pattern.lastIndex=0;var directive_match=directive_pattern.exec(text);while(directive_match){directives[directive_match[1]]=directive_match[2];directive_match=directive_pattern.exec(text);}return directives;}function tokenize_next(){var resulting_string;var whitespace_on_this_line=[];n_newlines=0;whitespace_before_token='';var c=input.next();if(c===null){return['','TK_EOF'];}var last_token;if(tokens.length){last_token=tokens[tokens.length-1];}else{// For the sake of tokenizing we can pretend that there was on open brace to start
	last_token=new Token('TK_START_BLOCK','{');}while(in_array(c,whitespace)){if(acorn.newline.test(c)){if(!(c==='\n'&&input.peek(-2)==='\r')){n_newlines+=1;whitespace_on_this_line=[];}}else{whitespace_on_this_line.push(c);}c=input.next();if(c===null){return['','TK_EOF'];}}if(whitespace_on_this_line.length){whitespace_before_token=whitespace_on_this_line.join('');}if(digit.test(c)||c==='.'&&input.testChar(digit)){var allow_decimal=true;var allow_e=true;var local_digit=digit;if(c==='0'&&input.testChar(/[XxOoBb]/)){// switch to hex/oct/bin number, no decimal or e, just hex/oct/bin digits
	allow_decimal=false;allow_e=false;if(input.testChar(/[Bb]/)){local_digit=digit_bin;}else if(input.testChar(/[Oo]/)){local_digit=digit_oct;}else{local_digit=digit_hex;}c+=input.next();}else if(c==='.'){// Already have a decimal for this literal, don't allow another
	allow_decimal=false;}else{// we know this first loop will run.  It keeps the logic simpler.
	c='';input.back();}// Add the digits
	while(input.testChar(local_digit)){c+=input.next();if(allow_decimal&&input.peek()==='.'){c+=input.next();allow_decimal=false;}else if(allow_e&&input.testChar(/[Ee]/)){c+=input.next();if(input.testChar(/[+-]/)){c+=input.next();}allow_e=false;allow_decimal=false;}}return[c,'TK_WORD'];}if(acorn.isIdentifierStart(input.peekCharCode(-1))){if(input.hasNext()){while(acorn.isIdentifierChar(input.peekCharCode())){c+=input.next();if(!input.hasNext()){break;}}}if(!(last_token.type==='TK_DOT'||last_token.type==='TK_RESERVED'&&in_array(last_token.text,['set','get']))&&in_array(c,reserved_words)){if(c==='in'){// hack for 'in' operator
	return[c,'TK_OPERATOR'];}return[c,'TK_RESERVED'];}return[c,'TK_WORD'];}if(c==='('||c==='['){return[c,'TK_START_EXPR'];}if(c===')'||c===']'){return[c,'TK_END_EXPR'];}if(c==='{'){return[c,'TK_START_BLOCK'];}if(c==='}'){return[c,'TK_END_BLOCK'];}if(c===';'){return[c,'TK_SEMICOLON'];}if(c==='/'){var comment='';var comment_match;// peek for comment /* ... */
	if(input.peek()==='*'){input.next();comment_match=input.match(block_comment_pattern);comment='/*'+comment_match[0];var directives=get_directives(comment);if(directives&&directives.ignore==='start'){comment_match=input.match(directives_end_ignore_pattern);comment+=comment_match[0];}comment=comment.replace(acorn.allLineBreaks,'\n');return[comment,'TK_BLOCK_COMMENT',directives];}// peek for comment // ...
	if(input.peek()==='/'){input.next();comment_match=input.match(comment_pattern);comment='//'+comment_match[0];return[comment,'TK_COMMENT'];}}var startXmlRegExp=/<()([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;if(c==='`'||c==="'"||c==='"'||// string
	(c==='/'||// regexp
	opts.e4x&&c==="<"&&input.test(startXmlRegExp,-1)// xml
	)&&(// regex and xml can only appear in specific locations during parsing
	last_token.type==='TK_RESERVED'&&in_array(last_token.text,['return','case','throw','else','do','typeof','yield'])||last_token.type==='TK_END_EXPR'&&last_token.text===')'&&last_token.parent&&last_token.parent.type==='TK_RESERVED'&&in_array(last_token.parent.text,['if','while','for'])||in_array(last_token.type,['TK_COMMENT','TK_START_EXPR','TK_START_BLOCK','TK_END_BLOCK','TK_OPERATOR','TK_EQUALS','TK_EOF','TK_SEMICOLON','TK_COMMA']))){var sep=c,esc=false,has_char_escapes=false;resulting_string=c;if(sep==='/'){//
	// handle regexp
	//
	var in_char_class=false;while(input.hasNext()&&(esc||in_char_class||input.peek()!==sep)&&!input.testChar(acorn.newline)){resulting_string+=input.peek();if(!esc){esc=input.peek()==='\\';if(input.peek()==='['){in_char_class=true;}else if(input.peek()===']'){in_char_class=false;}}else{esc=false;}input.next();}}else if(opts.e4x&&sep==='<'){//
	// handle e4x xml literals
	//
	var xmlRegExp=/[\s\S]*?<(\/?)([-a-zA-Z:0-9_.]+|{[\s\S]+?}|!\[CDATA\[[\s\S]*?\]\])(\s+{[\s\S]+?}|\s+[-a-zA-Z:0-9_.]+|\s+[-a-zA-Z:0-9_.]+\s*=\s*('[^']*'|"[^"]*"|{[\s\S]+?}))*\s*(\/?)\s*>/g;input.back();var xmlStr='';var match=input.match(startXmlRegExp);if(match){// Trim root tag to attempt to
	var rootTag=match[2].replace(/^{\s+/,'{').replace(/\s+}$/,'}');var isCurlyRoot=rootTag.indexOf('{')===0;var depth=0;while(match){var isEndTag=!!match[1];var tagName=match[2];var isSingletonTag=!!match[match.length-1]||tagName.slice(0,8)==="![CDATA[";if(!isSingletonTag&&(tagName===rootTag||isCurlyRoot&&tagName.replace(/^{\s+/,'{').replace(/\s+}$/,'}'))){if(isEndTag){--depth;}else{++depth;}}xmlStr+=match[0];if(depth<=0){break;}match=input.match(xmlRegExp);}// if we didn't close correctly, keep unformatted.
	if(!match){xmlStr+=input.match(/[\s\S]*/g)[0];}xmlStr=xmlStr.replace(acorn.allLineBreaks,'\n');return[xmlStr,"TK_STRING"];}}else{//
	// handle string
	//
	var parse_string=function parse_string(delimiter,allow_unescaped_newlines,start_sub){// Template strings can travers lines without escape characters.
	// Other strings cannot
	var current_char;while(input.hasNext()){current_char=input.peek();if(!(esc||current_char!==delimiter&&(allow_unescaped_newlines||!acorn.newline.test(current_char)))){break;}// Handle \r\n linebreaks after escapes or in template strings
	if((esc||allow_unescaped_newlines)&&acorn.newline.test(current_char)){if(current_char==='\r'&&input.peek(1)==='\n'){input.next();current_char=input.peek();}resulting_string+='\n';}else{resulting_string+=current_char;}if(esc){if(current_char==='x'||current_char==='u'){has_char_escapes=true;}esc=false;}else{esc=current_char==='\\';}input.next();if(start_sub&&resulting_string.indexOf(start_sub,resulting_string.length-start_sub.length)!==-1){if(delimiter==='`'){parse_string('}',allow_unescaped_newlines,'`');}else{parse_string('`',allow_unescaped_newlines,'${');}}}};if(sep==='`'){parse_string('`',true,'${');}else{parse_string(sep);}}if(has_char_escapes&&opts.unescape_strings){resulting_string=unescape_string(resulting_string);}if(input.peek()===sep){resulting_string+=sep;input.next();if(sep==='/'){// regexps may have modifiers /regexp/MOD , so fetch those, too
	// Only [gim] are valid, but if the user puts in garbage, do what we can to take it.
	while(input.hasNext()&&acorn.isIdentifierStart(input.peekCharCode())){resulting_string+=input.next();}}}return[resulting_string,'TK_STRING'];}if(c==='#'){if(tokens.length===0&&input.peek()==='!'){// shebang
	resulting_string=c;while(input.hasNext()&&c!=='\n'){c=input.next();resulting_string+=c;}return[trim(resulting_string)+'\n','TK_UNKNOWN'];}// Spidermonkey-specific sharp variables for circular references
	// https://developer.mozilla.org/En/Sharp_variables_in_JavaScript
	// http://mxr.mozilla.org/mozilla-central/source/js/src/jsscan.cpp around line 1935
	var sharp='#';if(input.hasNext()&&input.testChar(digit)){do{c=input.next();sharp+=c;}while(input.hasNext()&&c!=='#'&&c!=='=');if(c==='#'){//
	}else if(input.peek()==='['&&input.peek(1)===']'){sharp+='[]';input.next();input.next();}else if(input.peek()==='{'&&input.peek(1)==='}'){sharp+='{}';input.next();input.next();}return[sharp,'TK_WORD'];}}if(c==='<'&&(input.peek()==='?'||input.peek()==='%')){input.back();var template_match=input.match(template_pattern);if(template_match){c=template_match[0];c=c.replace(acorn.allLineBreaks,'\n');return[c,'TK_STRING'];}}if(c==='<'&&input.match(/\!--/g)){c='<!--';while(input.hasNext()&&!input.testChar(acorn.newline)){c+=input.next();}in_html_comment=true;return[c,'TK_COMMENT'];}if(c==='-'&&in_html_comment&&input.match(/->/g)){in_html_comment=false;return['-->','TK_COMMENT'];}if(c==='.'){return[c,'TK_DOT'];}if(in_array(c,punct)){while(input.hasNext()&&in_array(c+input.peek(),punct)){c+=input.next();if(!input.hasNext()){break;}}if(c===','){return[c,'TK_COMMA'];}else if(c==='='){return[c,'TK_EQUALS'];}else{return[c,'TK_OPERATOR'];}}return[c,'TK_UNKNOWN'];}function unescape_string(s){// You think that a regex would work for this
	// return s.replace(/\\x([0-9a-f]{2})/gi, function(match, val) {
	//         return String.fromCharCode(parseInt(val, 16));
	//     })
	// However, dealing with '\xff', '\\xff', '\\\xff' makes this more fun.
	var out='',escaped=0;var input_scan=new InputScanner(s);var matched=null;while(input_scan.hasNext()){// Keep any whitespace, non-slash characters
	// also keep slash pairs.
	matched=input_scan.match(/([\s]|[^\\]|\\\\)+/g);if(matched){out+=matched[0];}if(input_scan.peek()==='\\'){input_scan.next();if(input_scan.peek()==='x'){matched=input_scan.match(/x([0-9A-Fa-f]{2})/g);}else if(input_scan.peek()==='u'){matched=input_scan.match(/u([0-9A-Fa-f]{4})/g);}else{out+='\\';if(input_scan.hasNext()){out+=input_scan.next();}continue;}// If there's some error decoding, return the original string
	if(!matched){return s;}escaped=parseInt(matched[1],16);if(escaped>0x7e&&escaped<=0xff&&matched[0].indexOf('x')===0){// we bail out on \x7f..\xff,
	// leaving whole string escaped,
	// as it's probably completely binary
	return s;}else if(escaped>=0x00&&escaped<0x20){// leave 0x00...0x1f escaped
	out+='\\'+matched[0];continue;}else if(escaped===0x22||escaped===0x27||escaped===0x5c){// single-quote, apostrophe, backslash - escape these
	out+='\\'+String.fromCharCode(escaped);}else{out+=String.fromCharCode(escaped);}}}return out;}}var beautifier=new Beautifier(js_source_text,options);return beautifier.beautify();}if(true){// Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function(){return{js_beautify:js_beautify};}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));}else if(typeof exports!=="undefined"){// Add support for CommonJS. Just put this file somewhere on your require.paths
	// and you will be able to `var js_beautify = require("beautify").js_beautify`.
	exports.js_beautify=js_beautify;}else if(typeof window!=="undefined"){// If we're running a web page and don't have either of the above, add our one global
	window.js_beautify=js_beautify;}else if(typeof global!=="undefined"){// If we don't even have window, try global.
	global.js_beautify=js_beautify;}})();

/***/ },
/* 230 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*
	
	  The MIT License (MIT)
	
	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.
	
	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:
	
	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.
	
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.
	
	
	 CSS Beautifier
	---------------
	
	    Written by Harutyun Amirjanyan, (amirjanyan@gmail.com)
	
	    Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	        http://jsbeautifier.org/
	
	    Usage:
	        css_beautify(source_text);
	        css_beautify(source_text, options);
	
	    The options are (default in brackets):
	        indent_size (4)                         — indentation size,
	        indent_char (space)                     — character to indent with,
	        selector_separator_newline (true)       - separate selectors with newline or
	                                                  not (e.g. "a,\nbr" or "a, br")
	        end_with_newline (false)                - end with a newline
	        newline_between_rules (true)            - add a new line after every css rule
	        space_around_selector_separator (false) - ensure space around selector separators:
	                                                  '>', '+', '~' (e.g. "a>b" -> "a > b")
	    e.g
	
	    css_beautify(css_source_text, {
	      'indent_size': 1,
	      'indent_char': '\t',
	      'selector_separator': ' ',
	      'end_with_newline': false,
	      'newline_between_rules': true,
	      'space_around_selector_separator': true
	    });
	*/
	
	// http://www.w3.org/TR/CSS21/syndata.html#tokenization
	// http://www.w3.org/TR/css3-syntax/
	
	(function () {
	    function css_beautify(source_text, options) {
	        options = options || {};
	        source_text = source_text || '';
	        // HACK: newline parsing inconsistent. This brute force normalizes the input.
	        source_text = source_text.replace(/\r\n|[\r\u2028\u2029]/g, '\n');
	
	        var indentSize = options.indent_size || 4;
	        var indentCharacter = options.indent_char || ' ';
	        var selectorSeparatorNewline = options.selector_separator_newline === undefined ? true : options.selector_separator_newline;
	        var end_with_newline = options.end_with_newline === undefined ? false : options.end_with_newline;
	        var newline_between_rules = options.newline_between_rules === undefined ? true : options.newline_between_rules;
	        var space_around_combinator = options.space_around_combinator === undefined ? false : options.space_around_combinator;
	        space_around_combinator = space_around_combinator || (options.space_around_selector_separator === undefined ? false : options.space_around_selector_separator);
	        var eol = options.eol ? options.eol : '\n';
	
	        // compatibility
	        if (typeof indentSize === "string") {
	            indentSize = parseInt(indentSize, 10);
	        }
	
	        if (options.indent_with_tabs) {
	            indentCharacter = '\t';
	            indentSize = 1;
	        }
	
	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
	
	        // tokenizer
	        var whiteRe = /^\s+$/;
	
	        var pos = -1,
	            ch;
	        var parenLevel = 0;
	
	        function next() {
	            ch = source_text.charAt(++pos);
	            return ch || '';
	        }
	
	        function peek(skipWhitespace) {
	            var result = '';
	            var prev_pos = pos;
	            if (skipWhitespace) {
	                eatWhitespace();
	            }
	            result = source_text.charAt(pos + 1) || '';
	            pos = prev_pos - 1;
	            next();
	            return result;
	        }
	
	        function eatString(endChars) {
	            var start = pos;
	            while (next()) {
	                if (ch === "\\") {
	                    next();
	                } else if (endChars.indexOf(ch) !== -1) {
	                    break;
	                } else if (ch === "\n") {
	                    break;
	                }
	            }
	            return source_text.substring(start, pos + 1);
	        }
	
	        function peekString(endChar) {
	            var prev_pos = pos;
	            var str = eatString(endChar);
	            pos = prev_pos - 1;
	            next();
	            return str;
	        }
	
	        function eatWhitespace() {
	            var result = '';
	            while (whiteRe.test(peek())) {
	                next();
	                result += ch;
	            }
	            return result;
	        }
	
	        function skipWhitespace() {
	            var result = '';
	            if (ch && whiteRe.test(ch)) {
	                result = ch;
	            }
	            while (whiteRe.test(next())) {
	                result += ch;
	            }
	            return result;
	        }
	
	        function eatComment(singleLine) {
	            var start = pos;
	            singleLine = peek() === "/";
	            next();
	            while (next()) {
	                if (!singleLine && ch === "*" && peek() === "/") {
	                    next();
	                    break;
	                } else if (singleLine && ch === "\n") {
	                    return source_text.substring(start, pos);
	                }
	            }
	
	            return source_text.substring(start, pos) + ch;
	        }
	
	        function lookBack(str) {
	            return source_text.substring(pos - str.length, pos).toLowerCase() === str;
	        }
	
	        // Nested pseudo-class if we are insideRule
	        // and the next special character found opens
	        // a new block
	        function foundNestedPseudoClass() {
	            var openParen = 0;
	            for (var i = pos + 1; i < source_text.length; i++) {
	                var ch = source_text.charAt(i);
	                if (ch === "{") {
	                    return true;
	                } else if (ch === '(') {
	                    // pseudoclasses can contain ()
	                    openParen += 1;
	                } else if (ch === ')') {
	                    if (openParen === 0) {
	                        return false;
	                    }
	                    openParen -= 1;
	                } else if (ch === ";" || ch === "}") {
	                    return false;
	                }
	            }
	            return false;
	        }
	
	        // printer
	        var basebaseIndentString = source_text.match(/^[\t ]*/)[0];
	        var singleIndent = new Array(indentSize + 1).join(indentCharacter);
	        var indentLevel = 0;
	        var nestedLevel = 0;
	
	        function indent() {
	            indentLevel++;
	            basebaseIndentString += singleIndent;
	        }
	
	        function outdent() {
	            indentLevel--;
	            basebaseIndentString = basebaseIndentString.slice(0, -indentSize);
	        }
	
	        var print = {};
	        print["{"] = function (ch) {
	            print.singleSpace();
	            output.push(ch);
	            print.newLine();
	        };
	        print["}"] = function (ch) {
	            print.newLine();
	            output.push(ch);
	            print.newLine();
	        };
	
	        print._lastCharWhitespace = function () {
	            return whiteRe.test(output[output.length - 1]);
	        };
	
	        print.newLine = function (keepWhitespace) {
	            if (output.length) {
	                if (!keepWhitespace && output[output.length - 1] !== '\n') {
	                    print.trim();
	                }
	
	                output.push('\n');
	
	                if (basebaseIndentString) {
	                    output.push(basebaseIndentString);
	                }
	            }
	        };
	        print.singleSpace = function () {
	            if (output.length && !print._lastCharWhitespace()) {
	                output.push(' ');
	            }
	        };
	
	        print.preserveSingleSpace = function () {
	            if (isAfterSpace) {
	                print.singleSpace();
	            }
	        };
	
	        print.trim = function () {
	            while (print._lastCharWhitespace()) {
	                output.pop();
	            }
	        };
	
	        var output = [];
	        /*_____________________--------------------_____________________*/
	
	        var insideRule = false;
	        var insidePropertyValue = false;
	        var enteringConditionalGroup = false;
	        var top_ch = '';
	        var last_top_ch = '';
	
	        while (true) {
	            var whitespace = skipWhitespace();
	            var isAfterSpace = whitespace !== '';
	            var isAfterNewline = whitespace.indexOf('\n') !== -1;
	            last_top_ch = top_ch;
	            top_ch = ch;
	
	            if (!ch) {
	                break;
	            } else if (ch === '/' && peek() === '*') {
	                /* css comment */
	                var header = indentLevel === 0;
	
	                if (isAfterNewline || header) {
	                    print.newLine();
	                }
	
	                output.push(eatComment());
	                print.newLine();
	                if (header) {
	                    print.newLine(true);
	                }
	            } else if (ch === '/' && peek() === '/') {
	                // single line comment
	                if (!isAfterNewline && last_top_ch !== '{') {
	                    print.trim();
	                }
	                print.singleSpace();
	                output.push(eatComment());
	                print.newLine();
	            } else if (ch === '@') {
	                print.preserveSingleSpace();
	
	                // deal with less propery mixins @{...}
	                if (peek() === '{') {
	                    output.push(eatString('}'));
	                } else {
	                    output.push(ch);
	
	                    // strip trailing space, if present, for hash property checks
	                    var variableOrRule = peekString(": ,;{}()[]/='\"");
	
	                    if (variableOrRule.match(/[ :]$/)) {
	                        // we have a variable or pseudo-class, add it and insert one space before continuing
	                        next();
	                        variableOrRule = eatString(": ").replace(/\s$/, '');
	                        output.push(variableOrRule);
	                        print.singleSpace();
	                    }
	
	                    variableOrRule = variableOrRule.replace(/\s$/, '');
	
	                    // might be a nesting at-rule
	                    if (variableOrRule in css_beautify.NESTED_AT_RULE) {
	                        nestedLevel += 1;
	                        if (variableOrRule in css_beautify.CONDITIONAL_GROUP_RULE) {
	                            enteringConditionalGroup = true;
	                        }
	                    }
	                }
	            } else if (ch === '#' && peek() === '{') {
	                print.preserveSingleSpace();
	                output.push(eatString('}'));
	            } else if (ch === '{') {
	                if (peek(true) === '}') {
	                    eatWhitespace();
	                    next();
	                    print.singleSpace();
	                    output.push("{}");
	                    print.newLine();
	                    if (newline_between_rules && indentLevel === 0) {
	                        print.newLine(true);
	                    }
	                } else {
	                    indent();
	                    print["{"](ch);
	                    // when entering conditional groups, only rulesets are allowed
	                    if (enteringConditionalGroup) {
	                        enteringConditionalGroup = false;
	                        insideRule = indentLevel > nestedLevel;
	                    } else {
	                        // otherwise, declarations are also allowed
	                        insideRule = indentLevel >= nestedLevel;
	                    }
	                }
	            } else if (ch === '}') {
	                outdent();
	                print["}"](ch);
	                insideRule = false;
	                insidePropertyValue = false;
	                if (nestedLevel) {
	                    nestedLevel--;
	                }
	                if (newline_between_rules && indentLevel === 0) {
	                    print.newLine(true);
	                }
	            } else if (ch === ":") {
	                eatWhitespace();
	                if ((insideRule || enteringConditionalGroup) && !(lookBack("&") || foundNestedPseudoClass()) && !lookBack("(")) {
	                    // 'property: value' delimiter
	                    // which could be in a conditional group query
	                    insidePropertyValue = true;
	                    output.push(':');
	                    print.singleSpace();
	                } else {
	                    // sass/less parent reference don't use a space
	                    // sass nested pseudo-class don't use a space
	
	                    // preserve space before pseudoclasses/pseudoelements, as it means "in any child"
	                    if (lookBack(" ") && output[output.length - 1] !== " ") {
	                        output.push(" ");
	                    }
	                    if (peek() === ":") {
	                        // pseudo-element
	                        next();
	                        output.push("::");
	                    } else {
	                        // pseudo-class
	                        output.push(':');
	                    }
	                }
	            } else if (ch === '"' || ch === '\'') {
	                print.preserveSingleSpace();
	                output.push(eatString(ch));
	            } else if (ch === ';') {
	                insidePropertyValue = false;
	                output.push(ch);
	                print.newLine();
	            } else if (ch === '(') {
	                // may be a url
	                if (lookBack("url")) {
	                    output.push(ch);
	                    eatWhitespace();
	                    if (next()) {
	                        if (ch !== ')' && ch !== '"' && ch !== '\'') {
	                            output.push(eatString(')'));
	                        } else {
	                            pos--;
	                        }
	                    }
	                } else {
	                    parenLevel++;
	                    print.preserveSingleSpace();
	                    output.push(ch);
	                    eatWhitespace();
	                }
	            } else if (ch === ')') {
	                output.push(ch);
	                parenLevel--;
	            } else if (ch === ',') {
	                output.push(ch);
	                eatWhitespace();
	                if (selectorSeparatorNewline && !insidePropertyValue && parenLevel < 1) {
	                    print.newLine();
	                } else {
	                    print.singleSpace();
	                }
	            } else if ((ch === '>' || ch === '+' || ch === '~') && !insidePropertyValue && parenLevel < 1) {
	                //handle combinator spacing
	                if (space_around_combinator) {
	                    print.singleSpace();
	                    output.push(ch);
	                    print.singleSpace();
	                } else {
	                    output.push(ch);
	                    eatWhitespace();
	                    // squash extra whitespace
	                    if (ch && whiteRe.test(ch)) {
	                        ch = '';
	                    }
	                }
	            } else if (ch === ']') {
	                output.push(ch);
	            } else if (ch === '[') {
	                print.preserveSingleSpace();
	                output.push(ch);
	            } else if (ch === '=') {
	                // no whitespace before or after
	                eatWhitespace();
	                ch = '=';
	                output.push(ch);
	            } else {
	                print.preserveSingleSpace();
	                output.push(ch);
	            }
	        }
	
	        var sweetCode = '';
	        if (basebaseIndentString) {
	            sweetCode += basebaseIndentString;
	        }
	
	        sweetCode += output.join('').replace(/[\r\n\t ]+$/, '');
	
	        // establish end_with_newline
	        if (end_with_newline) {
	            sweetCode += '\n';
	        }
	
	        if (eol !== '\n') {
	            sweetCode = sweetCode.replace(/[\n]/g, eol);
	        }
	
	        return sweetCode;
	    }
	
	    // https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule
	    css_beautify.NESTED_AT_RULE = {
	        "@page": true,
	        "@font-face": true,
	        "@keyframes": true,
	        // also in CONDITIONAL_GROUP_RULE below
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };
	    css_beautify.CONDITIONAL_GROUP_RULE = {
	        "@media": true,
	        "@supports": true,
	        "@document": true
	    };
	
	    /*global define */
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return {
	                css_beautify: css_beautify
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        exports.css_beautify = css_beautify;
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.css_beautify = css_beautify;
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.css_beautify = css_beautify;
	    }
	})();

/***/ },
/* 231 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;'use strict';
	
	/*jshint curly:true, eqeqeq:true, laxbreak:true, noempty:false */
	/*
	
	  The MIT License (MIT)
	
	  Copyright (c) 2007-2013 Einar Lielmanis and contributors.
	
	  Permission is hereby granted, free of charge, to any person
	  obtaining a copy of this software and associated documentation files
	  (the "Software"), to deal in the Software without restriction,
	  including without limitation the rights to use, copy, modify, merge,
	  publish, distribute, sublicense, and/or sell copies of the Software,
	  and to permit persons to whom the Software is furnished to do so,
	  subject to the following conditions:
	
	  The above copyright notice and this permission notice shall be
	  included in all copies or substantial portions of the Software.
	
	  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
	  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
	  NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
	  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
	  ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
	  CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	  SOFTWARE.
	
	
	 Style HTML
	---------------
	
	  Written by Nochum Sossonko, (nsossonko@hotmail.com)
	
	  Based on code initially developed by: Einar Lielmanis, <einar@jsbeautifier.org>
	    http://jsbeautifier.org/
	
	  Usage:
	    style_html(html_source);
	
	    style_html(html_source, options);
	
	  The options are:
	    indent_inner_html (default false)  — indent <head> and <body> sections,
	    indent_size (default 4)          — indentation size,
	    indent_char (default space)      — character to indent with,
	    wrap_line_length (default 250)            -  maximum amount of characters per line (0 = disable)
	    brace_style (default "collapse") - "collapse" | "expand" | "end-expand" | "none"
	            put braces on the same line as control statements (default), or put braces on own line (Allman / ANSI style), or just put end braces on own line, or attempt to keep them where they are.
	    unformatted (defaults to inline tags) - list of tags, that shouldn't be reformatted
	    indent_scripts (default normal)  - "keep"|"separate"|"normal"
	    preserve_newlines (default true) - whether existing line breaks before elements should be preserved
	                                        Only works before elements, not inside tags or for text.
	    max_preserve_newlines (default unlimited) - maximum number of line breaks to be preserved in one chunk
	    indent_handlebars (default false) - format and indent {{#foo}} and {{/foo}}
	    end_with_newline (false)          - end with a newline
	    extra_liners (default [head,body,/html]) -List of tags that should have an extra newline before them.
	
	    e.g.
	
	    style_html(html_source, {
	      'indent_inner_html': false,
	      'indent_size': 2,
	      'indent_char': ' ',
	      'wrap_line_length': 78,
	      'brace_style': 'expand',
	      'preserve_newlines': true,
	      'max_preserve_newlines': 5,
	      'indent_handlebars': false,
	      'extra_liners': ['/html']
	    });
	*/
	
	(function () {
	
	    // function trim(s) {
	    //     return s.replace(/^\s+|\s+$/g, '');
	    // }
	
	    function ltrim(s) {
	        return s.replace(/^\s+/g, '');
	    }
	
	    function rtrim(s) {
	        return s.replace(/\s+$/g, '');
	    }
	
	    function style_html(html_source, options, js_beautify, css_beautify) {
	        //Wrapper function to invoke all the necessary constructors and deal with the output.
	
	        var multi_parser, indent_inner_html, indent_body_inner_html, indent_head_inner_html, indent_size, indent_character, wrap_line_length, brace_style, unformatted, preserve_newlines, max_preserve_newlines, indent_handlebars, wrap_attributes, wrap_attributes_indent_size, end_with_newline, extra_liners, eol;
	
	        options = options || {};
	
	        // backwards compatibility to 1.3.4
	        if ((options.wrap_line_length === undefined || parseInt(options.wrap_line_length, 10) === 0) && options.max_char !== undefined && parseInt(options.max_char, 10) !== 0) {
	            options.wrap_line_length = options.max_char;
	        }
	
	        indent_inner_html = options.indent_inner_html === undefined ? false : options.indent_inner_html;
	        indent_body_inner_html = options.indent_body_inner_html === undefined ? true : options.indent_body_inner_html;
	        indent_head_inner_html = options.indent_head_inner_html === undefined ? true : options.indent_head_inner_html;
	        indent_size = options.indent_size === undefined ? 4 : parseInt(options.indent_size, 10);
	        indent_character = options.indent_char === undefined ? ' ' : options.indent_char;
	        brace_style = options.brace_style === undefined ? 'collapse' : options.brace_style;
	        wrap_line_length = parseInt(options.wrap_line_length, 10) === 0 ? 32786 : parseInt(options.wrap_line_length || 250, 10);
	        unformatted = options.unformatted || [
	        // https://www.w3.org/TR/html5/dom.html#phrasing-content
	        'a', 'abbr', 'area', 'audio', 'b', 'bdi', 'bdo', 'br', 'button', 'canvas', 'cite', 'code', 'data', 'datalist', 'del', 'dfn', 'em', 'embed', 'i', 'iframe', 'img', 'input', 'ins', 'kbd', 'keygen', 'label', 'map', 'mark', 'math', 'meter', 'noscript', 'object', 'output', 'progress', 'q', 'ruby', 's', 'samp', /* 'script', */'select', 'small', 'span', 'strong', 'sub', 'sup', 'svg', 'template', 'textarea', 'time', 'u', 'var', 'video', 'wbr', 'text',
	        // prexisting - not sure of full effect of removing, leaving in
	        'acronym', 'address', 'big', 'dt', 'ins', 'small', 'strike', 'tt', 'pre'];
	        preserve_newlines = options.preserve_newlines === undefined ? true : options.preserve_newlines;
	        max_preserve_newlines = preserve_newlines ? isNaN(parseInt(options.max_preserve_newlines, 10)) ? 32786 : parseInt(options.max_preserve_newlines, 10) : 0;
	        indent_handlebars = options.indent_handlebars === undefined ? false : options.indent_handlebars;
	        wrap_attributes = options.wrap_attributes === undefined ? 'auto' : options.wrap_attributes;
	        wrap_attributes_indent_size = isNaN(parseInt(options.wrap_attributes_indent_size, 10)) ? indent_size : parseInt(options.wrap_attributes_indent_size, 10);
	        end_with_newline = options.end_with_newline === undefined ? false : options.end_with_newline;
	        extra_liners = typeof options.extra_liners === 'object' && options.extra_liners ? options.extra_liners.concat() : typeof options.extra_liners === 'string' ? options.extra_liners.split(',') : 'head,body,/html'.split(',');
	        eol = options.eol ? options.eol : '\n';
	
	        if (options.indent_with_tabs) {
	            indent_character = '\t';
	            indent_size = 1;
	        }
	
	        eol = eol.replace(/\\r/, '\r').replace(/\\n/, '\n');
	
	        function Parser() {
	
	            this.pos = 0; //Parser position
	            this.token = '';
	            this.current_mode = 'CONTENT'; //reflects the current Parser mode: TAG/CONTENT
	            this.tags = { //An object to hold tags, their position, and their parent-tags, initiated with default values
	                parent: 'parent1',
	                parentcount: 1,
	                parent1: ''
	            };
	            this.tag_type = '';
	            this.token_text = this.last_token = this.last_text = this.token_type = '';
	            this.newlines = 0;
	            this.indent_content = indent_inner_html;
	            this.indent_body_inner_html = indent_body_inner_html;
	            this.indent_head_inner_html = indent_head_inner_html;
	
	            this.Utils = { //Uilities made available to the various functions
	                whitespace: "\n\r\t ".split(''),
	
	                single_token: [
	                // HTLM void elements - aka self-closing tags - aka singletons
	                // https://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements
	                'area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'keygen', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr',
	                // NOTE: Optional tags - are not understood.
	                // https://www.w3.org/TR/html5/syntax.html#optional-tags
	                // The rules for optional tags are too complex for a simple list
	                // Also, the content of these tags should still be indented in many cases.
	                // 'li' is a good exmple.
	
	                // Doctype and xml elements
	                '!doctype', '?xml',
	                // ?php tag
	                '?php',
	                // other tags that were in this list, keeping just in case
	                'basefont', 'isindex'],
	                extra_liners: extra_liners, //for tags that need a line of whitespace before them
	                in_array: function in_array(what, arr) {
	                    for (var i = 0; i < arr.length; i++) {
	                        if (what === arr[i]) {
	                            return true;
	                        }
	                    }
	                    return false;
	                }
	            };
	
	            // Return true if the given text is composed entirely of whitespace.
	            this.is_whitespace = function (text) {
	                for (var n = 0; n < text.length; n++) {
	                    if (!this.Utils.in_array(text.charAt(n), this.Utils.whitespace)) {
	                        return false;
	                    }
	                }
	                return true;
	            };
	
	            this.traverse_whitespace = function () {
	                var input_char = '';
	
	                input_char = this.input.charAt(this.pos);
	                if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                    this.newlines = 0;
	                    while (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (preserve_newlines && input_char === '\n' && this.newlines <= max_preserve_newlines) {
	                            this.newlines += 1;
	                        }
	
	                        this.pos++;
	                        input_char = this.input.charAt(this.pos);
	                    }
	                    return true;
	                }
	                return false;
	            };
	
	            // Append a space to the given content (string array) or, if we are
	            // at the wrap_line_length, append a newline/indentation.
	            // return true if a newline was added, false if a space was added
	            this.space_or_wrap = function (content) {
	                if (this.line_char_count >= this.wrap_line_length) {
	                    //insert a line when the wrap_line_length is reached
	                    this.print_newline(false, content);
	                    this.print_indentation(content);
	                    return true;
	                } else {
	                    this.line_char_count++;
	                    content.push(' ');
	                    return false;
	                }
	            };
	
	            this.get_content = function () {
	                //function to capture regular content between tags
	                var input_char = '',
	                    content = [];
	
	                while (this.input.charAt(this.pos) !== '<') {
	                    if (this.pos >= this.input.length) {
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }
	
	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                        continue;
	                    }
	
	                    if (indent_handlebars) {
	                        // Handlebars parsing is complicated.
	                        // {{#foo}} and {{/foo}} are formatted tags.
	                        // {{something}} should get treated as content, except:
	                        // {{else}} specifically behaves like {{#if}} and {{/if}}
	                        var peek3 = this.input.substr(this.pos, 3);
	                        if (peek3 === '{{#' || peek3 === '{{/') {
	                            // These are tags and not content.
	                            break;
	                        } else if (peek3 === '{{!') {
	                            return [this.get_tag(), 'TK_TAG_HANDLEBARS_COMMENT'];
	                        } else if (this.input.substr(this.pos, 2) === '{{') {
	                            if (this.get_tag(true) === '{{else}}') {
	                                break;
	                            }
	                        }
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                    this.line_char_count++;
	                    content.push(input_char); //letter at-a-time (or string) inserted to an array
	                }
	                return content.length ? content.join('') : '';
	            };
	
	            this.get_contents_to = function (name) {
	                //get the full content of a script or style to pass to js_beautify
	                if (this.pos === this.input.length) {
	                    return ['', 'TK_EOF'];
	                }
	                var content = '';
	                var reg_match = new RegExp('</' + name + '\\s*>', 'igm');
	                reg_match.lastIndex = this.pos;
	                var reg_array = reg_match.exec(this.input);
	                var end_script = reg_array ? reg_array.index : this.input.length; //absolute end of script
	                if (this.pos < end_script) {
	                    //get everything in between the script tags
	                    content = this.input.substring(this.pos, end_script);
	                    this.pos = end_script;
	                }
	                return content;
	            };
	
	            this.record_tag = function (tag) {
	                //function to record a tag and its parent in this.tags Object
	                if (this.tags[tag + 'count']) {
	                    //check for the existence of this tag type
	                    this.tags[tag + 'count']++;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                } else {
	                    //otherwise initialize this tag type
	                    this.tags[tag + 'count'] = 1;
	                    this.tags[tag + this.tags[tag + 'count']] = this.indent_level; //and record the present indent level
	                }
	                this.tags[tag + this.tags[tag + 'count'] + 'parent'] = this.tags.parent; //set the parent (i.e. in the case of a div this.tags.div1parent)
	                this.tags.parent = tag + this.tags[tag + 'count']; //and make this the current parent (i.e. in the case of a div 'div1')
	            };
	
	            this.retrieve_tag = function (tag) {
	                //function to retrieve the opening tag to the corresponding closer
	                if (this.tags[tag + 'count']) {
	                    //if the openener is not in the Object we ignore it
	                    var temp_parent = this.tags.parent; //check to see if it's a closable tag.
	                    while (temp_parent) {
	                        //till we reach '' (the initial value);
	                        if (tag + this.tags[tag + 'count'] === temp_parent) {
	                            //if this is it use it
	                            break;
	                        }
	                        temp_parent = this.tags[temp_parent + 'parent']; //otherwise keep on climbing up the DOM Tree
	                    }
	                    if (temp_parent) {
	                        //if we caught something
	                        this.indent_level = this.tags[tag + this.tags[tag + 'count']]; //set the indent_level accordingly
	                        this.tags.parent = this.tags[temp_parent + 'parent']; //and set the current parent
	                    }
	                    delete this.tags[tag + this.tags[tag + 'count'] + 'parent']; //delete the closed tags parent reference...
	                    delete this.tags[tag + this.tags[tag + 'count']]; //...and the tag itself
	                    if (this.tags[tag + 'count'] === 1) {
	                        delete this.tags[tag + 'count'];
	                    } else {
	                        this.tags[tag + 'count']--;
	                    }
	                }
	            };
	
	            this.indent_to_tag = function (tag) {
	                // Match the indentation level to the last use of this tag, but don't remove it.
	                if (!this.tags[tag + 'count']) {
	                    return;
	                }
	                var temp_parent = this.tags.parent;
	                while (temp_parent) {
	                    if (tag + this.tags[tag + 'count'] === temp_parent) {
	                        break;
	                    }
	                    temp_parent = this.tags[temp_parent + 'parent'];
	                }
	                if (temp_parent) {
	                    this.indent_level = this.tags[tag + this.tags[tag + 'count']];
	                }
	            };
	
	            this.get_tag = function (peek) {
	                //function to get a full tag and parse its type
	                var input_char = '',
	                    content = [],
	                    comment = '',
	                    space = false,
	                    first_attr = true,
	                    tag_start,
	                    tag_end,
	                    tag_start_char,
	                    orig_pos = this.pos,
	                    orig_line_char_count = this.line_char_count;
	
	                peek = peek !== undefined ? peek : false;
	
	                do {
	                    if (this.pos >= this.input.length) {
	                        if (peek) {
	                            this.pos = orig_pos;
	                            this.line_char_count = orig_line_char_count;
	                        }
	                        return content.length ? content.join('') : ['', 'TK_EOF'];
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	
	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        //don't want to insert unnecessary space
	                        space = true;
	                        continue;
	                    }
	
	                    if (input_char === "'" || input_char === '"') {
	                        input_char += this.get_unformatted(input_char);
	                        space = true;
	                    }
	
	                    if (input_char === '=') {
	                        //no space before =
	                        space = false;
	                    }
	
	                    if (content.length && content[content.length - 1] !== '=' && input_char !== '>' && space) {
	                        //no space after = or before >
	                        var wrapped = this.space_or_wrap(content);
	                        var indentAttrs = wrapped && input_char !== '/' && wrap_attributes !== 'force';
	                        space = false;
	                        if (!first_attr && wrap_attributes === 'force' && input_char !== '/') {
	                            this.print_newline(false, content);
	                            this.print_indentation(content);
	                            indentAttrs = true;
	                        }
	                        if (indentAttrs) {
	                            //indent attributes an auto or forced line-wrap
	                            for (var count = 0; count < wrap_attributes_indent_size; count++) {
	                                content.push(indent_character);
	                            }
	                        }
	                        for (var i = 0; i < content.length; i++) {
	                            if (content[i] === ' ') {
	                                first_attr = false;
	                                break;
	                            }
	                        }
	                    }
	
	                    if (indent_handlebars && tag_start_char === '<') {
	                        // When inside an angle-bracket tag, put spaces around
	                        // handlebars not inside of strings.
	                        if (input_char + this.input.charAt(this.pos) === '{{') {
	                            input_char += this.get_unformatted('}}');
	                            if (content.length && content[content.length - 1] !== ' ' && content[content.length - 1] !== '<') {
	                                input_char = ' ' + input_char;
	                            }
	                            space = true;
	                        }
	                    }
	
	                    if (input_char === '<' && !tag_start_char) {
	                        tag_start = this.pos - 1;
	                        tag_start_char = '<';
	                    }
	
	                    if (indent_handlebars && !tag_start_char) {
	                        if (content.length >= 2 && content[content.length - 1] === '{' && content[content.length - 2] === '{') {
	                            if (input_char === '#' || input_char === '/' || input_char === '!') {
	                                tag_start = this.pos - 3;
	                            } else {
	                                tag_start = this.pos - 2;
	                            }
	                            tag_start_char = '{';
	                        }
	                    }
	
	                    this.line_char_count++;
	                    content.push(input_char); //inserts character at-a-time (or string)
	
	                    if (content[1] && (content[1] === '!' || content[1] === '?' || content[1] === '%')) {
	                        //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }
	
	                    if (indent_handlebars && content[1] && content[1] === '{' && content[2] && content[2] === '!') {
	                        //if we're in a comment, do something special
	                        // We treat all comments as literals, even more than preformatted tags
	                        // we just look for the appropriate close tag
	                        content = [this.get_comment(tag_start)];
	                        break;
	                    }
	
	                    if (indent_handlebars && tag_start_char === '{' && content.length > 2 && content[content.length - 2] === '}' && content[content.length - 1] === '}') {
	                        break;
	                    }
	                } while (input_char !== '>');
	
	                var tag_complete = content.join('');
	                var tag_index;
	                var tag_offset;
	
	                if (tag_complete.indexOf(' ') !== -1) {
	                    //if there's whitespace, thats where the tag name ends
	                    tag_index = tag_complete.indexOf(' ');
	                } else if (tag_complete.charAt(0) === '{') {
	                    tag_index = tag_complete.indexOf('}');
	                } else {
	                    //otherwise go with the tag ending
	                    tag_index = tag_complete.indexOf('>');
	                }
	                if (tag_complete.charAt(0) === '<' || !indent_handlebars) {
	                    tag_offset = 1;
	                } else {
	                    tag_offset = tag_complete.charAt(2) === '#' ? 3 : 2;
	                }
	                var tag_check = tag_complete.substring(tag_offset, tag_index).toLowerCase();
	                if (tag_complete.charAt(tag_complete.length - 2) === '/' || this.Utils.in_array(tag_check, this.Utils.single_token)) {
	                    //if this tag name is a single tag type (either in the list or has a closing /)
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                    }
	                } else if (indent_handlebars && tag_complete.charAt(0) === '{' && tag_check === 'else') {
	                    if (!peek) {
	                        this.indent_to_tag('if');
	                        this.tag_type = 'HANDLEBARS_ELSE';
	                        this.indent_content = true;
	                        this.traverse_whitespace();
	                    }
	                } else if (this.is_unformatted(tag_check, unformatted)) {
	                    // do not reformat the "unformatted" tags
	                    comment = this.get_unformatted('</' + tag_check + '>', tag_complete); //...delegate to get_unformatted function
	                    content.push(comment);
	                    tag_end = this.pos - 1;
	                    this.tag_type = 'SINGLE';
	                } else if (tag_check === 'script' && (tag_complete.search('type') === -1 || tag_complete.search('type') > -1 && tag_complete.search(/\b(text|application|dojo)\/(x-)?(javascript|ecmascript|jscript|livescript|(ld\+)?json|method|aspect)/) > -1)) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'SCRIPT';
	                    }
	                } else if (tag_check === 'style' && (tag_complete.search('type') === -1 || tag_complete.search('type') > -1 && tag_complete.search('text/css') > -1)) {
	                    if (!peek) {
	                        this.record_tag(tag_check);
	                        this.tag_type = 'STYLE';
	                    }
	                } else if (tag_check.charAt(0) === '!') {
	                    //peek for <! comment
	                    // for comments content is already correct.
	                    if (!peek) {
	                        this.tag_type = 'SINGLE';
	                        this.traverse_whitespace();
	                    }
	                } else if (!peek) {
	                    if (tag_check.charAt(0) === '/') {
	                        //this tag is a double tag so check for tag-ending
	                        this.retrieve_tag(tag_check.substring(1)); //remove it and all ancestors
	                        this.tag_type = 'END';
	                    } else {
	                        //otherwise it's a start-tag
	                        this.record_tag(tag_check); //push it on the tag stack
	                        if (tag_check.toLowerCase() !== 'html') {
	                            this.indent_content = true;
	                        }
	                        this.tag_type = 'START';
	                    }
	
	                    // Allow preserving of newlines after a start or end tag
	                    if (this.traverse_whitespace()) {
	                        this.space_or_wrap(content);
	                    }
	
	                    if (this.Utils.in_array(tag_check, this.Utils.extra_liners)) {
	                        //check if this double needs an extra line
	                        this.print_newline(false, this.output);
	                        if (this.output.length && this.output[this.output.length - 2] !== '\n') {
	                            this.print_newline(true, this.output);
	                        }
	                    }
	                }
	
	                if (peek) {
	                    this.pos = orig_pos;
	                    this.line_char_count = orig_line_char_count;
	                }
	
	                return content.join(''); //returns fully formatted tag
	            };
	
	            this.get_comment = function (start_pos) {
	                //function to return comment content in its entirety
	                // this is will have very poor perf, but will work for now.
	                var comment = '',
	                    delimiter = '>',
	                    matched = false;
	
	                this.pos = start_pos;
	                var input_char = this.input.charAt(this.pos);
	                this.pos++;
	
	                while (this.pos <= this.input.length) {
	                    comment += input_char;
	
	                    // only need to check for the delimiter if the last chars match
	                    if (comment.charAt(comment.length - 1) === delimiter.charAt(delimiter.length - 1) && comment.indexOf(delimiter) !== -1) {
	                        break;
	                    }
	
	                    // only need to search for custom delimiter for the first few characters
	                    if (!matched && comment.length < 10) {
	                        if (comment.indexOf('<![if') === 0) {
	                            //peek for <![if conditional comment
	                            delimiter = '<![endif]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![cdata[') === 0) {
	                            //if it's a <[cdata[ comment...
	                            delimiter = ']]>';
	                            matched = true;
	                        } else if (comment.indexOf('<![') === 0) {
	                            // some other ![ comment? ...
	                            delimiter = ']>';
	                            matched = true;
	                        } else if (comment.indexOf('<!--') === 0) {
	                            // <!-- comment ...
	                            delimiter = '-->';
	                            matched = true;
	                        } else if (comment.indexOf('{{!') === 0) {
	                            // {{! handlebars comment
	                            delimiter = '}}';
	                            matched = true;
	                        } else if (comment.indexOf('<?') === 0) {
	                            // {{! handlebars comment
	                            delimiter = '?>';
	                            matched = true;
	                        } else if (comment.indexOf('<%') === 0) {
	                            // {{! handlebars comment
	                            delimiter = '%>';
	                            matched = true;
	                        }
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	                }
	
	                return comment;
	            };
	
	            function tokenMatcher(delimiter) {
	                var token = '';
	
	                var add = function add(str) {
	                    var newToken = token + str.toLowerCase();
	                    token = newToken.length <= delimiter.length ? newToken : newToken.substr(newToken.length - delimiter.length, delimiter.length);
	                };
	
	                var doesNotMatch = function doesNotMatch() {
	                    return token.indexOf(delimiter) === -1;
	                };
	
	                return {
	                    add: add,
	                    doesNotMatch: doesNotMatch
	                };
	            }
	
	            this.get_unformatted = function (delimiter, orig_tag) {
	                //function to return unformatted content in its entirety
	                if (orig_tag && orig_tag.toLowerCase().indexOf(delimiter) !== -1) {
	                    return '';
	                }
	                var input_char = '';
	                var content = '';
	                var space = true;
	
	                var delimiterMatcher = tokenMatcher(delimiter);
	
	                do {
	
	                    if (this.pos >= this.input.length) {
	                        return content;
	                    }
	
	                    input_char = this.input.charAt(this.pos);
	                    this.pos++;
	
	                    if (this.Utils.in_array(input_char, this.Utils.whitespace)) {
	                        if (!space) {
	                            this.line_char_count--;
	                            continue;
	                        }
	                        if (input_char === '\n' || input_char === '\r') {
	                            content += '\n';
	                            /*  Don't change tab indention for unformatted blocks.  If using code for html editing, this will greatly affect <pre> tags if they are specified in the 'unformatted array'
	                            for (var i=0; i<this.indent_level; i++) {
	                            content += this.indent_string;
	                            }
	                            space = false; //...and make sure other indentation is erased
	                            */
	                            this.line_char_count = 0;
	                            continue;
	                        }
	                    }
	                    content += input_char;
	                    delimiterMatcher.add(input_char);
	                    this.line_char_count++;
	                    space = true;
	
	                    if (indent_handlebars && input_char === '{' && content.length && content.charAt(content.length - 2) === '{') {
	                        // Handlebars expressions in strings should also be unformatted.
	                        content += this.get_unformatted('}}');
	                        // Don't consider when stopping for delimiters.
	                    }
	                } while (delimiterMatcher.doesNotMatch());
	
	                return content;
	            };
	
	            this.get_token = function () {
	                //initial handler for token-retrieval
	                var token;
	
	                if (this.last_token === 'TK_TAG_SCRIPT' || this.last_token === 'TK_TAG_STYLE') {
	                    //check if we need to format javascript
	                    var type = this.last_token.substr(7);
	                    token = this.get_contents_to(type);
	                    if (typeof token !== 'string') {
	                        return token;
	                    }
	                    return [token, 'TK_' + type];
	                }
	                if (this.current_mode === 'CONTENT') {
	                    token = this.get_content();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        return [token, 'TK_CONTENT'];
	                    }
	                }
	
	                if (this.current_mode === 'TAG') {
	                    token = this.get_tag();
	                    if (typeof token !== 'string') {
	                        return token;
	                    } else {
	                        var tag_name_type = 'TK_TAG_' + this.tag_type;
	                        return [token, tag_name_type];
	                    }
	                }
	            };
	
	            this.get_full_indent = function (level) {
	                level = this.indent_level + level || 0;
	                if (level < 1) {
	                    return '';
	                }
	
	                return Array(level + 1).join(this.indent_string);
	            };
	
	            this.is_unformatted = function (tag_check, unformatted) {
	                //is this an HTML5 block-level link?
	                if (!this.Utils.in_array(tag_check, unformatted)) {
	                    return false;
	                }
	
	                if (tag_check.toLowerCase() !== 'a' || !this.Utils.in_array('a', unformatted)) {
	                    return true;
	                }
	
	                //at this point we have an  tag; is its first child something we want to remain
	                //unformatted?
	                var next_tag = this.get_tag(true /* peek. */);
	
	                // test next_tag to see if it is just html tag (no external content)
	                var tag = (next_tag || "").match(/^\s*<\s*\/?([a-z]*)\s*[^>]*>\s*$/);
	
	                // if next_tag comes back but is not an isolated tag, then
	                // let's treat the 'a' tag as having content
	                // and respect the unformatted option
	                if (!tag || this.Utils.in_array(tag, unformatted)) {
	                    return true;
	                } else {
	                    return false;
	                }
	            };
	
	            this.printer = function (js_source, indent_character, indent_size, wrap_line_length, brace_style) {
	                //handles input/output and some other printing functions
	
	                this.input = js_source || ''; //gets the input for the Parser
	
	                // HACK: newline parsing inconsistent. This brute force normalizes the input.
	                this.input = this.input.replace(/\r\n|[\r\u2028\u2029]/g, '\n');
	
	                this.output = [];
	                this.indent_character = indent_character;
	                this.indent_string = '';
	                this.indent_size = indent_size;
	                this.brace_style = brace_style;
	                this.indent_level = 0;
	                this.wrap_line_length = wrap_line_length;
	                this.line_char_count = 0; //count to see if wrap_line_length was exceeded
	
	                for (var i = 0; i < this.indent_size; i++) {
	                    this.indent_string += this.indent_character;
	                }
	
	                this.print_newline = function (force, arr) {
	                    this.line_char_count = 0;
	                    if (!arr || !arr.length) {
	                        return;
	                    }
	                    if (force || arr[arr.length - 1] !== '\n') {
	                        //we might want the extra line
	                        if (arr[arr.length - 1] !== '\n') {
	                            arr[arr.length - 1] = rtrim(arr[arr.length - 1]);
	                        }
	                        arr.push('\n');
	                    }
	                };
	
	                this.print_indentation = function (arr) {
	                    for (var i = 0; i < this.indent_level; i++) {
	                        arr.push(this.indent_string);
	                        this.line_char_count += this.indent_string.length;
	                    }
	                };
	
	                this.print_token = function (text) {
	                    // Avoid printing initial whitespace.
	                    if (this.is_whitespace(text) && !this.output.length) {
	                        return;
	                    }
	                    if (text || text !== '') {
	                        if (this.output.length && this.output[this.output.length - 1] === '\n') {
	                            this.print_indentation(this.output);
	                            text = ltrim(text);
	                        }
	                    }
	                    this.print_token_raw(text);
	                };
	
	                this.print_token_raw = function (text) {
	                    // If we are going to print newlines, truncate trailing
	                    // whitespace, as the newlines will represent the space.
	                    if (this.newlines > 0) {
	                        text = rtrim(text);
	                    }
	
	                    if (text && text !== '') {
	                        if (text.length > 1 && text.charAt(text.length - 1) === '\n') {
	                            // unformatted tags can grab newlines as their last character
	                            this.output.push(text.slice(0, -1));
	                            this.print_newline(false, this.output);
	                        } else {
	                            this.output.push(text);
	                        }
	                    }
	
	                    for (var n = 0; n < this.newlines; n++) {
	                        this.print_newline(n > 0, this.output);
	                    }
	                    this.newlines = 0;
	                };
	
	                this.indent = function () {
	                    this.indent_level++;
	                };
	
	                this.unindent = function () {
	                    if (this.indent_level > 0) {
	                        this.indent_level--;
	                    }
	                };
	            };
	            return this;
	        }
	
	        /*_____________________--------------------_____________________*/
	
	        multi_parser = new Parser(); //wrapping functions Parser
	        multi_parser.printer(html_source, indent_character, indent_size, wrap_line_length, brace_style); //initialize starting values
	
	        while (true) {
	            var t = multi_parser.get_token();
	            multi_parser.token_text = t[0];
	            multi_parser.token_type = t[1];
	
	            if (multi_parser.token_type === 'TK_EOF') {
	                break;
	            }
	
	            switch (multi_parser.token_type) {
	                case 'TK_TAG_START':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        if ((multi_parser.indent_body_inner_html || !multi_parser.token_text.match(/<body(?:.*)>/)) && (multi_parser.indent_head_inner_html || !multi_parser.token_text.match(/<head(?:.*)>/))) {
	
	                            multi_parser.indent();
	                        }
	
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_STYLE':
	                case 'TK_TAG_SCRIPT':
	                    multi_parser.print_newline(false, multi_parser.output);
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_END':
	                    //Print new line only if the tag has no content and has child
	                    if (multi_parser.last_token === 'TK_CONTENT' && multi_parser.last_text === '') {
	                        var tag_name = (multi_parser.token_text.match(/\w+/) || [])[0];
	                        var tag_extracted_from_last_output = null;
	                        if (multi_parser.output.length) {
	                            tag_extracted_from_last_output = multi_parser.output[multi_parser.output.length - 1].match(/(?:<|{{#)\s*(\w+)/);
	                        }
	                        if (tag_extracted_from_last_output === null || tag_extracted_from_last_output[1] !== tag_name && !multi_parser.Utils.in_array(tag_extracted_from_last_output[1], unformatted)) {
	                            multi_parser.print_newline(false, multi_parser.output);
	                        }
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_SINGLE':
	                    // Don't add a newline before elements that should remain unformatted.
	                    var tag_check = multi_parser.token_text.match(/^\s*<([a-z-]+)/i);
	                    if (!tag_check || !multi_parser.Utils.in_array(tag_check[1], unformatted)) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_ELSE':
	                    // Don't add a newline if opening {{#if}} tag is on the current line
	                    var foundIfOnCurrentLine = false;
	                    for (var lastCheckedOutput = multi_parser.output.length - 1; lastCheckedOutput >= 0; lastCheckedOutput--) {
	                        if (multi_parser.output[lastCheckedOutput] === '\n') {
	                            break;
	                        } else {
	                            if (multi_parser.output[lastCheckedOutput].match(/{{#if/)) {
	                                foundIfOnCurrentLine = true;
	                                break;
	                            }
	                        }
	                    }
	                    if (!foundIfOnCurrentLine) {
	                        multi_parser.print_newline(false, multi_parser.output);
	                    }
	                    multi_parser.print_token(multi_parser.token_text);
	                    if (multi_parser.indent_content) {
	                        multi_parser.indent();
	                        multi_parser.indent_content = false;
	                    }
	                    multi_parser.current_mode = 'CONTENT';
	                    break;
	                case 'TK_TAG_HANDLEBARS_COMMENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_CONTENT':
	                    multi_parser.print_token(multi_parser.token_text);
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                case 'TK_STYLE':
	                case 'TK_SCRIPT':
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_newline(false, multi_parser.output);
	                        var text = multi_parser.token_text,
	                            _beautifier,
	                            script_indent_level = 1;
	                        if (multi_parser.token_type === 'TK_SCRIPT') {
	                            _beautifier = typeof js_beautify === 'function' && js_beautify;
	                        } else if (multi_parser.token_type === 'TK_STYLE') {
	                            _beautifier = typeof css_beautify === 'function' && css_beautify;
	                        }
	
	                        if (options.indent_scripts === "keep") {
	                            script_indent_level = 0;
	                        } else if (options.indent_scripts === "separate") {
	                            script_indent_level = -multi_parser.indent_level;
	                        }
	
	                        var indentation = multi_parser.get_full_indent(script_indent_level);
	                        if (_beautifier) {
	
	                            // call the Beautifier if avaliable
	                            var Child_options = function Child_options() {
	                                this.eol = '\n';
	                            };
	                            Child_options.prototype = options;
	                            var child_options = new Child_options();
	                            text = _beautifier(text.replace(/^\s*/, indentation), child_options);
	                        } else {
	                            // simply indent the string otherwise
	                            var white = text.match(/^\s*/)[0];
	                            var _level = white.match(/[^\n\r]*$/)[0].split(multi_parser.indent_string).length - 1;
	                            var reindent = multi_parser.get_full_indent(script_indent_level - _level);
	                            text = text.replace(/^\s*/, indentation).replace(/\r\n|\r|\n/g, '\n' + reindent).replace(/\s+$/, '');
	                        }
	                        if (text) {
	                            multi_parser.print_token_raw(text);
	                            multi_parser.print_newline(true, multi_parser.output);
	                        }
	                    }
	                    multi_parser.current_mode = 'TAG';
	                    break;
	                default:
	                    // We should not be getting here but we don't want to drop input on the floor
	                    // Just output the text and move on
	                    if (multi_parser.token_text !== '') {
	                        multi_parser.print_token(multi_parser.token_text);
	                    }
	                    break;
	            }
	            multi_parser.last_token = multi_parser.token_type;
	            multi_parser.last_text = multi_parser.token_text;
	        }
	        var sweet_code = multi_parser.output.join('').replace(/[\r\n\t ]+$/, '');
	
	        // establish end_with_newline
	        if (end_with_newline) {
	            sweet_code += '\n';
	        }
	
	        if (eol !== '\n') {
	            sweet_code = sweet_code.replace(/[\n]/g, eol);
	        }
	
	        return sweet_code;
	    }
	
	    if (true) {
	        // Add support for AMD ( https://github.com/amdjs/amdjs-api/wiki/AMD#defineamd-property- )
	        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__, __webpack_require__(229), __webpack_require__(230)], __WEBPACK_AMD_DEFINE_RESULT__ = function (requireamd) {
	            var js_beautify = __webpack_require__(229);
	            var css_beautify = __webpack_require__(230);
	
	            return {
	                html_beautify: function html_beautify(html_source, options) {
	                    return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	                }
	            };
	        }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if (typeof exports !== "undefined") {
	        // Add support for CommonJS. Just put this file somewhere on your require.paths
	        // and you will be able to `var html_beautify = require("beautify").html_beautify`.
	        var js_beautify = require('./beautify.js');
	        var css_beautify = require('./beautify-css.js');
	
	        exports.html_beautify = function (html_source, options) {
	            return style_html(html_source, options, js_beautify.js_beautify, css_beautify.css_beautify);
	        };
	    } else if (typeof window !== "undefined") {
	        // If we're running a web page and don't have either of the above, add our one global
	        window.html_beautify = function (html_source, options) {
	            return style_html(html_source, options, window.js_beautify, window.css_beautify);
	        };
	    } else if (typeof global !== "undefined") {
	        // If we don't even have window, try global.
	        global.html_beautify = function (html_source, options) {
	            return style_html(html_source, options, global.js_beautify, global.css_beautify);
	        };
	    }
	})();

/***/ },
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */
/***/ function(module, exports, __webpack_require__) {

	var map = {
		"./ErrorPage/ErrorPage.js": 238,
		"./Header/Header.js": 242,
		"./HomePage/HomePage.js": 251
	};
	function webpackContext(req) {
		return __webpack_require__(webpackContextResolve(req));
	};
	function webpackContextResolve(req) {
		return map[req] || (function() { throw new Error("Cannot find module '" + req + "'.") }());
	};
	webpackContext.keys = function webpackContextKeys() {
		return Object.keys(map);
	};
	webpackContext.resolve = webpackContextResolve;
	module.exports = webpackContext;
	webpackContext.id = 237;


/***/ },
/* 238 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.ErrorPage = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _ErrorPage = __webpack_require__(239);
	
	var _ErrorPage2 = _interopRequireDefault(_ErrorPage);
	
	var _ErrorPage3 = __webpack_require__(240);
	
	var _ErrorPage4 = _interopRequireDefault(_ErrorPage3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var ErrorPage = exports.ErrorPage = (_dec = (0, _malanka.Defaults)({
	    template: _ErrorPage4.default,
	    styles: _ErrorPage2.default
	}), _dec(_class = function (_Component) {
	    (0, _inherits3.default)(ErrorPage, _Component);

	    function ErrorPage() {
	        (0, _classCallCheck3.default)(this, ErrorPage);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }

	    return ErrorPage;
	}(_malanka.Component)) || _class);

/***/ },
/* 239 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"ErrorPage__root___2lZuV Page__root___2VuHt Base__font_mono___3jnpN"};

/***/ },
/* 240 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(185).Component,_log = __webpack_require__(241).default,__mergeStrings = __webpack_require__(194).mergeStrings;
	
	module.exports = function(context){return __mergeStrings([new Component({"tagName":"h1","content":context.exception.message}),new Component({"tagName":"pre","content":context.exception.stack}),_log.call(context,context.exception,{"hash":{}})], context)}

/***/ },
/* 241 */
/***/ function(module, exports) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = log;
	function log() {
	    var _console;
	
	    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
	        args[_key] = arguments[_key];
	    }
	
	    (_console = console).log.apply(_console, args.slice(0, -1));
	    return '';
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SdW50aW1lL2xvZ0hlbHBlci5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7a0JBQXdCLEc7QUFBVCxTQUFTLEdBQVQsR0FBc0I7QUFBQTs7QUFBQSxzQ0FBTixJQUFNO0FBQU4sWUFBTTtBQUFBOztBQUNqQyx5QkFBUSxHQUFSLGlCQUFlLEtBQUssS0FBTCxDQUFXLENBQVgsRUFBYyxDQUFDLENBQWYsQ0FBZjtBQUNBLFdBQU8sRUFBUDtBQUNIIiwiZmlsZSI6ImxvZ0hlbHBlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvZyguLi5hcmdzKSB7XG4gICAgY29uc29sZS5sb2coLi4uYXJncy5zbGljZSgwLCAtMSkpO1xuICAgIHJldHVybiAnJztcbn0iXX0=

/***/ },
/* 242 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Header = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _Header = __webpack_require__(243);
	
	var _Header2 = _interopRequireDefault(_Header);
	
	var _Header3 = __webpack_require__(244);
	
	var _Header4 = _interopRequireDefault(_Header3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Header = exports.Header = (_dec = (0, _malanka.Defaults)({
	    template: _Header4.default,
	    styles: _Header2.default,
	    tagName: 'header'
	}), _dec(_class = function (_Component) {
	    (0, _inherits3.default)(Header, _Component);

	    function Header() {
	        (0, _classCallCheck3.default)(this, Header);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }

	    return Header;
	}(_malanka.Component)) || _class);

/***/ },
/* 243 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"Header__root___O9oW9","header":"Header__header___1qRCL Base__font_mono___3jnpN"};

/***/ },
/* 244 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(185).Component,Navigation = __webpack_require__(245).Navigation;
	
	module.exports = function(context){return [new Component({"tagName":"h1","attributes":{"class":context.styles.header},"content":"Malanka sandbox"}),new Navigation({"sandbox":context.sandbox})]}

/***/ },
/* 245 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Navigation = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _Navigation = __webpack_require__(246);
	
	var _Navigation2 = _interopRequireDefault(_Navigation);
	
	var _Navigation3 = __webpack_require__(250);
	
	var _Navigation4 = _interopRequireDefault(_Navigation3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Navigation = exports.Navigation = (_dec = (0, _malanka.Defaults)({
	    styles: _Navigation4.default,
	    template: _Navigation2.default,
	
	    links: [{ title: 'Home', route: 'home' }]
	}), _dec(_class = function (_Component) {
	    (0, _inherits3.default)(Navigation, _Component);

	    function Navigation() {
	        (0, _classCallCheck3.default)(this, Navigation);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }

	    return Navigation;
	}(_malanka.Component)) || _class);

/***/ },
/* 246 */
/***/ function(module, exports, __webpack_require__) {

	var Check = __webpack_require__(247).Check;
	
	module.exports = function(context){return [new Check({"value":context.proxy("sandbox").proxy("css"),"class":context.styles.check,"content":"CSS Modules"}),new Check({"value":context.proxy("sandbox").proxy("trim"),"class":context.styles.check,"content":"Trim"})]}

/***/ },
/* 247 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Check = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _dec2, _class, _desc, _value, _class2;
	
	var _malanka = __webpack_require__(171);
	
	var _Check = __webpack_require__(248);
	
	var _Check2 = _interopRequireDefault(_Check);
	
	var _Check3 = __webpack_require__(249);
	
	var _Check4 = _interopRequireDefault(_Check3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	    var desc = {};
	    Object['ke' + 'ys'](descriptor).forEach(function (key) {
	        desc[key] = descriptor[key];
	    });
	    desc.enumerable = !!desc.enumerable;
	    desc.configurable = !!desc.configurable;
	
	    if ('value' in desc || desc.initializer) {
	        desc.writable = true;
	    }
	
	    desc = decorators.slice().reverse().reduce(function (desc, decorator) {
	        return decorator(target, property, desc) || desc;
	    }, desc);
	
	    if (context && desc.initializer !== void 0) {
	        desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
	        desc.initializer = undefined;
	    }
	
	    if (desc.initializer === void 0) {
	        Object['define' + 'Property'](target, property, desc);
	        desc = null;
	    }
	
	    return desc;
	}
	
	var Check = exports.Check = (_dec = (0, _malanka.Defaults)({
	    styles: _Check2.default,
	    template: _Check4.default,
	    tagName: 'label'
	}), _dec2 = (0, _malanka.Mutator)('value'), _dec(_class = (_class2 = function (_Component) {
	    (0, _inherits3.default)(Check, _Component);
	
	    function Check() {
	        (0, _classCallCheck3.default)(this, Check);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }
	
	    Check.prototype.checked = function checked(value) {
	        return Boolean(value);
	    };
	
	    /**
	     * Event handler
	     *
	     * @param event
	     */
	
	
	    Check.prototype.onChange = function onChange(event) {
	        this.value.setValue(event.target.checked);
	    };
	
	    return Check;
	}(_malanka.Component), (_applyDecoratedDescriptor(_class2.prototype, 'checked', [_dec2], Object.getOwnPropertyDescriptor(_class2.prototype, 'checked'), _class2.prototype)), _class2)) || _class);

/***/ },
/* 248 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"Check__root___39lZA"};

/***/ },
/* 249 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(185).Component,__mergeStrings = __webpack_require__(194).mergeStrings;
	
	module.exports = function(context){return __mergeStrings([new Component({"tagName":"input","attributes":{"type":"checkbox","checked":context.checked},"events":{"change":context.onChange.bind(context)}})," ",context.content," "], context)}

/***/ },
/* 250 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"Navigation__root___2gcJx","link":"Navigation__link___Ntl35 Base__font_normal___zZSzf","link_current":"Navigation__link_current___2P9bi","check":"Navigation__check___3Xh6D Check__root___39lZA"};

/***/ },
/* 251 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.HomePage = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _HomePage = __webpack_require__(252);
	
	var _HomePage2 = _interopRequireDefault(_HomePage);
	
	var _HomePage3 = __webpack_require__(267);
	
	var _HomePage4 = _interopRequireDefault(_HomePage3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var HomePage = exports.HomePage = (_dec = (0, _malanka.Defaults)({ styles: _HomePage4.default, template: _HomePage2.default }), _dec(_class = function (_Component) {
	  (0, _inherits3.default)(HomePage, _Component);

	  function HomePage() {
	    (0, _classCallCheck3.default)(this, HomePage);
	    return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	  }

	  return HomePage;
	}(_malanka.Component)) || _class);

/***/ },
/* 252 */
/***/ function(module, exports, __webpack_require__) {

	var Component = __webpack_require__(185).Component,__mergeStrings = __webpack_require__(194).mergeStrings,__join = __webpack_require__(194).join,Brace = __webpack_require__(253).Brace,Result = __webpack_require__(264).Result;
	
	module.exports = function(context){return [new Component({"attributes":{"class":__join(__mergeStrings([context.styles.column," ",context.styles.column_left], context))},"content":new Brace({"value":context.proxy("sandbox").proxy("code"),"lang":"handlebars"})}),new Component({"attributes":{"class":__join(__mergeStrings([context.styles.column," ",context.styles.column_right], context))},"content":[new Component({"attributes":{"class":context.styles.cell},"content":new Brace({"value":context.sandbox.compiledCode,"lang":"javascript","readonly":true})}),new Component({"attributes":{"class":__join(__mergeStrings([context.styles.cell," ",context.styles.cell_result], context))},"content":new Result({"sandbox":context.sandbox,"code":context.sandbox.compiledCode})}),"  "]})]}

/***/ },
/* 253 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Brace = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _Brace = __webpack_require__(254);
	
	var _Brace2 = _interopRequireDefault(_Brace);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Brace = exports.Brace = (_dec = (0, _malanka.Defaults)({
	    styles: _Brace2.default
	}), _dec(_class = function (_Component) {
	    (0, _inherits3.default)(Brace, _Component);
	
	    function Brace() {
	        (0, _classCallCheck3.default)(this, Brace);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }
	
	    Brace.prototype.onRender = function onRender() {
	        var _this2 = this;
	
	        if (this.env.isBrowser) {
	            __webpack_require__.e/* require */(2, function(__webpack_require__) { var __WEBPACK_AMD_REQUIRE_ARRAY__ = [__webpack_require__(255), __webpack_require__(258), __webpack_require__(259), __webpack_require__(263)]; (function () {
	                setTimeout(function () {
	                    var editor = ace.edit(_this2.getElement());
	                    editor.getSession().setMode('ace/mode/' + _this2.lang);
	                    editor.setTheme('ace/theme/monokai');
	                    editor.setValue(_this2.value.getValue());
	                    editor.$blockScrolling = Infinity;
	
	                    editor.commands.addCommand({
	                        name: 'submit',
	                        bindKey: { win: 'Ctrl-Enter', mac: 'Command-Enter' },
	                        exec: function exec(editor) {
	                            _this2.value.setValue(editor.getValue());
	                            _this2.emitEvent('enter');
	                        }
	                    });
	
	                    if (!_this2.readonly) {
	                        editor.getSession().on('change', function () {
	                            setTimeout(function () {
	                                _this2.value.setValue(editor.getSession().getValue());
	                            });
	                        });
	                    }
	
	                    _this2.listenTo(_this2.value, function (value) {
	                        if (editor.getSession().getValue() !== value) {
	                            editor.getSession().setValue(value);
	                        }
	                    });
	                });
	            }.apply(null, __WEBPACK_AMD_REQUIRE_ARRAY__));});
	        }
	    };
	
	    return Brace;
	}(_malanka.Component)) || _class);

/***/ },
/* 254 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"Brace__root___3vLP5"};

/***/ },
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.Result = undefined;
	
	var _classCallCheck2 = __webpack_require__(93);
	
	var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);
	
	var _possibleConstructorReturn2 = __webpack_require__(94);
	
	var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);
	
	var _inherits2 = __webpack_require__(163);
	
	var _inherits3 = _interopRequireDefault(_inherits2);
	
	var _dec, _class;
	
	var _malanka = __webpack_require__(171);
	
	var _Result = __webpack_require__(265);
	
	var _Result2 = _interopRequireDefault(_Result);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var Result = exports.Result = (_dec = (0, _malanka.Defaults)({
	    styles: _Result2.default
	}), _dec(_class = function (_Component) {
	    (0, _inherits3.default)(Result, _Component);
	
	    function Result() {
	        (0, _classCallCheck3.default)(this, Result);
	        return (0, _possibleConstructorReturn3.default)(this, _Component.apply(this, arguments));
	    }
	
	    Result.prototype.onRender = function onRender() {
	        var _this2 = this;
	
	        if (!this.isRendered()) {
	            this.listenTo(this.code, function () {
	                setTimeout(function () {
	                    return _this2.render();
	                });
	            });
	        }
	    };
	
	    Result.prototype.template = function template(context) {
	        var modules = {
	            malanka: __webpack_require__(171),
	            'malanka/es5/Runtime/runtime': __webpack_require__(194),
	            'malanka/es5/Runtime/eachHelper': __webpack_require__(266),
	            'malanka/es5/Runtime/ifHelper': __webpack_require__(192)
	        };
	
	        var module = {};
	        var code = '(function(){\n            var require = function(module) {\n                return modules[module];\n            }\n            \n            ' + context.code + '\n        })()';
	
	        eval(code);
	
	        return module.exports(context);
	    };
	
	    return Result;
	}(_malanka.Component)) || _class);

/***/ },
/* 265 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"Result__root___RjIbQ"};

/***/ },
/* 266 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.__esModule = true;
	exports.default = eachHelper;
	
	var _CollectionComponent = __webpack_require__(189);
	
	function eachHelper(collection, options) {
	    // For simple array we don't need create wrapper
	    // if no additional params was not passed
	    if (Array.isArray(collection) && !Object.keys(options.hash).length) {
	        if (collection.length) {
	            if (options.content) {
	                return [].concat.apply([], collection.map(options.content));
	            }
	        } else if (options.inverse) {
	            return options.inverse.call(this);
	        }
	    } else {
	        var params = {
	            collection: collection,
	            childTemplate: options.content,
	            emptyTemplate: options.inverse
	        };
	
	        return new _CollectionComponent.CollectionComponent(Object.assign(params, options.hash));
	    }
	}
	//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9SdW50aW1lL2VhY2hIZWxwZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O2tCQUV3QixVOztBQUZ4Qjs7QUFFZSxTQUFTLFVBQVQsQ0FBb0IsVUFBcEIsRUFBZ0MsT0FBaEMsRUFBeUM7QUFDcEQ7QUFDQTtBQUNBLFFBQUksTUFBTSxPQUFOLENBQWMsVUFBZCxLQUE2QixDQUFDLE9BQU8sSUFBUCxDQUFZLFFBQVEsSUFBcEIsRUFBMEIsTUFBNUQsRUFBb0U7QUFDaEUsWUFBSSxXQUFXLE1BQWYsRUFBdUI7QUFDbkIsZ0JBQUksUUFBUSxPQUFaLEVBQXFCO0FBQ2pCLHVCQUFPLEdBQUcsTUFBSCxDQUFVLEtBQVYsQ0FBZ0IsRUFBaEIsRUFBb0IsV0FBVyxHQUFYLENBQWUsUUFBUSxPQUF2QixDQUFwQixDQUFQO0FBQ0g7QUFDSixTQUpELE1BSU8sSUFBSSxRQUFRLE9BQVosRUFBcUI7QUFDeEIsbUJBQU8sUUFBUSxPQUFSLENBQWdCLElBQWhCLENBQXFCLElBQXJCLENBQVA7QUFDSDtBQUNKLEtBUkQsTUFRTztBQUNILFlBQUksU0FBUztBQUNULGtDQURTO0FBRVQsMkJBQWUsUUFBUSxPQUZkO0FBR1QsMkJBQWUsUUFBUTtBQUhkLFNBQWI7O0FBTUEsZUFBTyw2Q0FBd0IsT0FBTyxNQUFQLENBQWMsTUFBZCxFQUFzQixRQUFRLElBQTlCLENBQXhCLENBQVA7QUFDSDtBQUNKIiwiZmlsZSI6ImVhY2hIZWxwZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbGxlY3Rpb25Db21wb25lbnR9IGZyb20gJy4uL0NvbXBvbmVudHMvQ29sbGVjdGlvbkNvbXBvbmVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGVhY2hIZWxwZXIoY29sbGVjdGlvbiwgb3B0aW9ucykge1xuICAgIC8vIEZvciBzaW1wbGUgYXJyYXkgd2UgZG9uJ3QgbmVlZCBjcmVhdGUgd3JhcHBlclxuICAgIC8vIGlmIG5vIGFkZGl0aW9uYWwgcGFyYW1zIHdhcyBub3QgcGFzc2VkXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY29sbGVjdGlvbikgJiYgIU9iamVjdC5rZXlzKG9wdGlvbnMuaGFzaCkubGVuZ3RoKSB7XG4gICAgICAgIGlmIChjb2xsZWN0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuY29udGVudCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbXS5jb25jYXQuYXBwbHkoW10sIGNvbGxlY3Rpb24ubWFwKG9wdGlvbnMuY29udGVudCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaW52ZXJzZSkge1xuICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuaW52ZXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIGNvbGxlY3Rpb24sXG4gICAgICAgICAgICBjaGlsZFRlbXBsYXRlOiBvcHRpb25zLmNvbnRlbnQsXG4gICAgICAgICAgICBlbXB0eVRlbXBsYXRlOiBvcHRpb25zLmludmVyc2VcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gbmV3IENvbGxlY3Rpb25Db21wb25lbnQoT2JqZWN0LmFzc2lnbihwYXJhbXMsIG9wdGlvbnMuaGFzaCkpO1xuICAgIH1cbn1cbiJdfQ==

/***/ },
/* 267 */
/***/ function(module, exports) {

	// removed by extract-text-webpack-plugin
	module.exports = {"root":"HomePage__root___1U3BG","column":"HomePage__column___2jqaG","cell":"HomePage__cell___3kHes","cell_result":"HomePage__cell_result___mrKrO"};

/***/ }
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,